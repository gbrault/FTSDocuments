Page 1
  Cluster 0
    1-1 - 470.64 - 862.17 74.36 - ff1 - 99.148 - rgb(0, 0, 0) - Python Tutorial
  Cluster 1
    1-2 - 566.2 - 827.2 49.3 - ff2 - 68.86 - rgb(0, 0, 0) - Release 3.7.0
  Cluster 2
    1-3 - 420.34 - 643.04 51.65 - ff1 - 68.86 - rgb(0, 0, 0) - Guido van Rossum
  Cluster 3
    1-4 - 336.82 - 614.56 51.65 - ff1 - 68.86 - rgb(0, 0, 0) - and the Python development team
  Cluster 4
    1-5 - 557.78 - 288.73 35.87 - ff1 - 47.82 - rgb(0, 0, 0) - September 02, 2018
  Cluster 5
    1-6 - 498.68 - 114.93 35.87 - ff1 - 47.82 - rgb(0, 0, 0) - Python Software Foundation
  Cluster 6
    1-7 - 531.35 - 96.8 35.87 - ff1 - 47.82 - rgb(0, 0, 0) - Email: docs@python.org
Page 3
  Cluster 0
    3-1 - 593.75 - 834.98 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - CONTENTS
  Cluster 1
    3-2 - 93.6 - 702.87 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 1 Whetting Your Appetite 3
  Cluster 2
    3-3 - 93.6 - 674.38 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 2 Using the Python Interpreter 5
  Cluster 3
    3-4 - 113.02 - 658.84 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 2.1 Invoking the Interpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
  Cluster 4
    3-5 - 113.02 - 643.29 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 2.2 The Interpreter and Its Environment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
  Cluster 5
    3-6 - 93.6 - 614.81 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 3 An Informal Introduction to Python 9
  Cluster 6
    3-7 - 113.02 - 599.26 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 3.1 Using Python as a Calculator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
  Cluster 7
    3-8 - 113.02 - 583.73 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 3.2 First Steps Towards Programming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
  Cluster 8
    3-9 - 93.6 - 555.23 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 4 More Control Flow Tools 19
  Cluster 9
    3-10 - 113.02 - 539.68 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 4.1 if Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
  Cluster 10
    3-11 - 113.02 - 524.15 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 4.2 for Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
  Cluster 11
    3-12 - 113.02 - 508.6 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 4.3 The range() Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
  Cluster 12
    3-13 - 113.02 - 493.06 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 4.4 break and continue Statements, and else Clauses on Loops . . . . . . . . . . . . . . . . . . 21
  Cluster 13
    3-14 - 113.02 - 477.52 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 4.5 pass Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
  Cluster 14
    3-15 - 113.02 - 461.98 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 4.6 Deﬁning Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
  Cluster 15
    3-16 - 113.02 - 446.43 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 4.7 More on Deﬁning Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
  Cluster 16
    3-17 - 113.02 - 430.9 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 4.8 Intermezzo: Coding Style . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
  Cluster 17
    3-18 - 93.6 - 402.4 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 5 Data Structures 31
  Cluster 18
    3-19 - 113.02 - 386.85 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 5.1 More on Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
  Cluster 19
    3-20 - 113.02 - 371.32 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 5.2 The del statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
  Cluster 20
    3-21 - 113.02 - 355.77 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 5.3 Tuples and Sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
  Cluster 21
    3-22 - 113.02 - 340.24 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 5.4 Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
  Cluster 22
    3-23 - 113.02 - 324.69 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 5.5 Dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
  Cluster 23
    3-24 - 113.02 - 309.15 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 5.6 Looping Techniques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
  Cluster 24
    3-25 - 113.02 - 293.61 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 5.7 More on Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
  Cluster 25
    3-26 - 113.02 - 278.07 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 5.8 Comparing Sequences and Other Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
  Cluster 26
    3-27 - 93.6 - 249.57 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 6 Modules 43
  Cluster 27
    3-28 - 113.02 - 234.03 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 6.1 More on Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
  Cluster 28
    3-29 - 113.02 - 218.49 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 6.2 Standard Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
  Cluster 29
    3-30 - 113.02 - 202.94 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 6.3 The dir() Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
  Cluster 30
    3-31 - 113.02 - 187.41 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 6.4 Packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
  Cluster 31
    3-32 - 93.6 - 158.91 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 7 Input and Output 53
  Cluster 32
    3-33 - 113.02 - 143.38 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 7.1 Fancier Output Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
  Cluster 33
    3-34 - 113.02 - 127.83 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 7.2 Reading and Writing Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
  Cluster 34
    3-35 - 93.6 - 99.33 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 8 Errors and Exceptions 61
  Cluster 35
    3-36 - 698.68 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - i
Page 4
  Cluster 0
    4-1 - 113.02 - 923.05 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 8.1 Syntax Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
    4-1 - 113.02 - 907.5 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 8.2 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
  Cluster 1
    4-2 - 113.02 - 891.97 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 8.3 Handling Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
  Cluster 2
    4-3 - 113.02 - 876.42 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 8.4 Raising Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
  Cluster 3
    4-4 - 113.02 - 860.89 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 8.5 User-deﬁned Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
  Cluster 4
    4-5 - 113.02 - 845.34 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 8.6 Deﬁning Clean-up Actions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
  Cluster 5
    4-6 - 113.02 - 829.8 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 8.7 Predeﬁned Clean-up Actions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
  Cluster 6
    4-7 - 93.6 - 801.31 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 9 Classes 69
  Cluster 7
    4-8 - 113.02 - 785.76 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 9.1 A Word About Names and Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
  Cluster 8
    4-9 - 113.02 - 770.22 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 9.2 Python Scopes and Namespaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
  Cluster 9
    4-10 - 113.02 - 754.68 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 9.3 A First Look at Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72
  Cluster 10
    4-11 - 113.02 - 739.14 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 9.4 Random Remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
  Cluster 11
    4-12 - 113.02 - 723.59 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 9.5 Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
  Cluster 12
    4-13 - 113.02 - 708.06 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 9.6 Private Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
  Cluster 13
    4-14 - 113.02 - 692.51 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 9.7 Odds and Ends . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
  Cluster 14
    4-15 - 113.02 - 676.98 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 9.8 Iterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
  Cluster 15
    4-16 - 113.02 - 661.43 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 9.9 Generators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
  Cluster 16
    4-17 - 113.02 - 645.89 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 9.10 Generator Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
  Cluster 17
    4-18 - 93.6 - 617.4 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 10 Brief Tour of the Standard Library 83
  Cluster 18
    4-19 - 113.02 - 601.85 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.1 Operating System Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
  Cluster 19
    4-20 - 113.02 - 586.31 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.2 File Wildcards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
  Cluster 20
    4-21 - 113.02 - 570.76 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.3 Command Line Arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
  Cluster 21
    4-22 - 113.02 - 555.23 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.4 Error Output Redirection and Program Termination . . . . . . . . . . . . . . . . . . . . . . . 84
  Cluster 22
    4-23 - 113.02 - 539.68 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.5 String Pattern Matching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
  Cluster 23
    4-24 - 113.02 - 524.15 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.6 Mathematics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
  Cluster 24
    4-25 - 113.02 - 508.6 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.7 Internet Access . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
  Cluster 25
    4-26 - 113.02 - 493.06 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.8 Dates and Times . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
  Cluster 26
    4-27 - 113.02 - 477.52 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.9 Data Compression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
  Cluster 27
    4-28 - 113.02 - 461.98 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.10 Performance Measurement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
  Cluster 28
    4-29 - 113.02 - 446.43 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.11 Quality Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
  Cluster 29
    4-30 - 113.02 - 430.9 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 10.12 Batteries Included . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
  Cluster 30
    4-31 - 93.6 - 402.4 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 11 Brief Tour of the Standard Library — Part II 89
  Cluster 31
    4-32 - 113.02 - 386.85 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 11.1 Output Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
  Cluster 32
    4-33 - 113.02 - 371.32 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 11.2 Templating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
  Cluster 33
    4-34 - 113.02 - 355.77 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 11.3 Working with Binary Data Record Layouts . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
  Cluster 34
    4-35 - 113.02 - 340.24 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 11.4 Multi-threading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
  Cluster 35
    4-36 - 113.02 - 324.69 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 11.5 Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92
  Cluster 36
    4-37 - 113.02 - 309.15 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 11.6 Weak References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
  Cluster 37
    4-38 - 113.02 - 293.61 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 11.7 Tools for Working with Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
  Cluster 38
    4-39 - 113.02 - 278.07 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 11.8 Decimal Floating Point Arithmetic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
  Cluster 39
    4-40 - 93.6 - 249.57 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 12 Virtual Environments and Packages 97
  Cluster 40
    4-41 - 113.02 - 234.03 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 12.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
  Cluster 41
    4-42 - 113.02 - 218.49 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 12.2 Creating Virtual Environments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
  Cluster 42
    4-43 - 113.02 - 202.94 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 12.3 Managing Packages with pip . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
  Cluster 43
    4-44 - 93.6 - 174.46 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 13 What Now? 101
  Cluster 44
    4-45 - 93.6 - 145.96 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 14 Interactive Input Editing and History Substitution 103
  Cluster 45
    4-46 - 113.02 - 130.42 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 14.1 Tab Completion and History Editing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
  Cluster 46
    4-47 - 113.02 - 114.88 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 14.2 Alternatives to the Interactive Interpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
  Cluster 47
    4-48 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - ii
Page 5
  Cluster 0
    5-1 - 93.6 - 923.05 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 15 Floating Point Arithmetic: Issues and Limitations 105

    =====
    5-1 - 113.02 - 907.5 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 15.1 Representation Error . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
  Cluster 1
    5-2 - 93.6 - 879.01 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - 16 Appendix 111
  Cluster 2
    5-3 - 113.02 - 863.47 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - 16.1 Interactive Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
  Cluster 3
    5-4 - 93.6 - 834.98 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - A Glossary 113
  Cluster 4
    5-5 - 93.6 - 806.48 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - B About these documents 127
  Cluster 5
    5-6 - 113.02 - 790.95 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - B.1 Contributors to the Python Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
  Cluster 6
    5-7 - 93.6 - 762.45 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - C History and License 129
  Cluster 7
    5-8 - 113.02 - 746.91 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - C.1 History of the software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
  Cluster 8
    5-9 - 113.02 - 731.37 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - C.2 Terms and conditions for accessing or otherwise using Python . . . . . . . . . . . . . . . . . 130
  Cluster 9
    5-10 - 113.02 - 715.83 29.89 - ff4 - 39.852 - rgb(53, 95, 124) - C.3 Licenses and Acknowledgements for Incorporated Software . . . . . . . . . . . . . . . . . . . 133
  Cluster 10
    5-11 - 93.6 - 687.34 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - D Copyright 145
  Cluster 11
    5-12 - 93.6 - 658.84 27.9 - ff3 - 39.852 - rgb(53, 95, 124) - Index 147
  Cluster 12
    5-13 - 692.05 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - iii
Page 6
  Cluster 0
    6-1 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - iv
Page 7
  Cluster 0
    7-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    7-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python is an easy to learn, powerful programming language. It has eﬃcient high-level data structures and
  Cluster 2
    7-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a simple but eﬀective approach to object-oriented programming. Python’s elegant syntax and dynamic
  Cluster 3
    7-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - typing, together with its interpreted nature, make it an ideal language for scripting and rapid application
  Cluster 4
    7-5 - 93.6 - 876.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - development in many areas on most platforms.
  Cluster 5
    7-6 - 93.6 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The Python interpreter and the extensive standard library are freely available in source or binary form for all
  Cluster 6
    7-7 - 93.6 - 838.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - major platforms from the Python Web site, https://www.python.org/, and may be freely distributed. The
  Cluster 7
    7-8 - 93.6 - 823.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - same site also contains distributions of and pointers to many free third party Python modules, programs
  Cluster 8
    7-9 - 93.6 - 807.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and tools, and additional documentation.
  Cluster 9
    7-10 - 93.6 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The Python interpreter is easily extended with new functions and data types implemented in C or C++
  Cluster 10
    7-11 - 93.6 - 770.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (or other languages callable from C). Python is also suitable as an extension language for customizable
  Cluster 11
    7-12 - 93.6 - 754.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - applications.
  Cluster 12
    7-13 - 93.6 - 732.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This tutorial introduces the reader informally to the basic concepts and features of the Python language
  Cluster 13
    7-14 - 93.6 - 717.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are
  Cluster 14
    7-15 - 93.6 - 701.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - self-contained, so the tutorial can be read oﬀ-line as well.
  Cluster 15
    7-16 - 93.6 - 679.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For a description of standard objects and modules, see library-index. reference-index gives a more formal
  Cluster 16
    7-17 - 93.6 - 664.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - deﬁnition of the language. To write extensions in C or C++, read extending-index and c-api-index. There
  Cluster 17
    7-18 - 93.6 - 648.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are also several books covering Python in depth.
  Cluster 18
    7-19 - 93.6 - 626.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly
  Cluster 19
    7-20 - 93.6 - 610.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - used feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good
  Cluster 20
    7-21 - 93.6 - 595.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - idea of the language’s ﬂavor and style. After reading it, you will be able to read and write Python modules
  Cluster 21
    7-22 - 93.6 - 579.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and programs, and you will be ready to learn more about the various Python library modules described in
  Cluster 22
    7-23 - 93.6 - 564.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - library-index.
  Cluster 23
    7-24 - 93.6 - 542.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The Glossary is also worth going through.
  Cluster 24
    7-25 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CONTENTS 1
Page 8
  Cluster 0
    8-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    8-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 2 CONTENTS
Page 9
  Cluster 0
    9-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    9-2 - 660.41 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - ONE
  Cluster 2
    9-3 - 426.97 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - WHETTING YOUR APPETITE
  Cluster 3
    9-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you do much work on computers, eventually you ﬁnd that there’s some task you’d like to automate. For
  Cluster 4
    9-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - example, you may wish to perform a search-and-replace over a large number of text ﬁles, or rename and
  Cluster 5
    9-6 - 93.6 - 697.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - rearrange a bunch of photo ﬁles in a complicated way. Perhaps you’d like to write a small custom database,
  Cluster 6
    9-7 - 93.6 - 682.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - or a specialized GUI application, or a simple game.
  Cluster 7
    9-8 - 93.6 - 660.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you’re a professional software developer, you may have to work with several C/C++/Java libraries but
  Cluster 8
    9-9 - 93.6 - 644.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁnd the usual write/compile/test/re-compile cycle is too slow. Perhaps you’re writing a test suite for such
  Cluster 9
    9-10 - 93.6 - 629.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a library and ﬁnd writing the testing code a tedious task. Or maybe you’ve written a program that could
  Cluster 10
    9-11 - 93.6 - 613.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - use an extension language, and you don’t want to design and implement a whole new language for your
  Cluster 11
    9-12 - 93.6 - 597.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - application.
  Cluster 12
    9-13 - 93.6 - 575.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python is just the language for you.
    9-13 - 93.6 - 553.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - You could write a Unix shell script or Windows batch ﬁles for some of these tasks, but shell scripts are best
  Cluster 13
    9-14 - 93.6 - 538.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - at moving around ﬁles and changing text data, not well-suited for GUI applications or games. You could
  Cluster 14
    9-15 - 93.6 - 522.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - write a C/C++/Java program, but it can take a lot of development time to get even a ﬁrst-draft program.
  Cluster 15
    9-16 - 93.6 - 507.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python is simpler to use, available on Windows, Mac OS X, and Unix operating systems, and will help you
  Cluster 16
    9-17 - 93.6 - 491.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - get the job done more quickly.
  Cluster 17
    9-18 - 93.6 - 469.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python is simple to use, but it is a real programming language, oﬀering much more structure and support
  Cluster 18
    9-19 - 93.6 - 454.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - for large programs than shell scripts or batch ﬁles can oﬀer. On the other hand, Python also oﬀers much
  Cluster 19
    9-20 - 93.6 - 438.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - more error checking than C, and, being a very-high-level language, it has high-level data types built in, such
  Cluster 20
    9-21 - 93.6 - 423.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as ﬂexible arrays and dictionaries. Because of its more general data types Python is applicable to a much
  Cluster 21
    9-22 - 93.6 - 407.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - larger problem domain than Awk or even Perl, yet many things are at least as easy in Python as in those
  Cluster 22
    9-23 - 93.6 - 392.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - languages.
  Cluster 23
    9-24 - 93.6 - 370.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python allows you to split your program into modules that can be reused in other Python programs. It
  Cluster 24
    9-25 - 93.6 - 354.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - comes with a large collection of standard modules that you can use as the basis of your programs — or as
  Cluster 25
    9-26 - 93.6 - 338.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - examples to start learning to program in Python. Some of these modules provide things like ﬁle I/O, system
  Cluster 26
    9-27 - 93.6 - 323.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - calls, sockets, and even interfaces to graphical user interface toolkits like Tk.
  Cluster 27
    9-28 - 93.6 - 301.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python is an interpreted language, which can save you considerable time during program development
  Cluster 28
    9-29 - 93.6 - 285.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - because no compilation and linking is necessary. The interpreter can be used interactively, which makes it
  Cluster 29
    9-30 - 93.6 - 270.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - easy to experiment with features of the language, to write throw-away programs, or to test functions during
  Cluster 30
    9-31 - 93.6 - 254.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - bottom-up program development. It is also a handy desk calculator.
  Cluster 31
    9-32 - 93.6 - 232.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python enables programs to be written compactly and readably. Programs written in Python are typically
  Cluster 32
    9-33 - 93.6 - 217.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - much shorter than equivalent C, C++, or Java programs, for several reasons:
  Cluster 33
    9-34 - 109.42 - 195.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • the high-level data types allow you to express complex operations in a single statement;
  Cluster 34
    9-35 - 109.42 - 173.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • statement grouping is done by indentation instead of beginning and ending brackets;
    9-35 - 109.42 - 151.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • no variable or argument declarations are necessary.
  Cluster 35
    9-36 - 93.6 - 129.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python is extensible: if you know how to program in C it is easy to add a new built-in function or module
  Cluster 36
    9-37 - 93.6 - 113.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to the interpreter, either to perform critical operations at maximum speed, or to link Python programs to
  Cluster 37
    9-38 - 93.6 - 98.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - libraries that may only be available in binary form (such as a vendor-speciﬁc graphics library). Once you
  Cluster 38
    9-39 - 694.88 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 3
Page 10
  Cluster 0
    10-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    10-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are really hooked, you can link the Python interpreter into an application written in C and use it as an
  Cluster 2
    10-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - extension or command language for that application.
  Cluster 3
    10-4 - 93.6 - 885.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - By the way, the language is named after the BBC show “Monty Python’s Flying Circus” and has nothing
  Cluster 4
    10-5 - 93.6 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to do with reptiles. Making references to Monty Python skits in documentation is not only allowed, it is
  Cluster 5
    10-6 - 93.6 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - encouraged!
  Cluster 6
    10-7 - 93.6 - 832.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Now that you are all excited about Python, you’ll want to examine it in some more detail. Since the best
  Cluster 7
    10-8 - 93.6 - 816.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - way to learn a language is to use it, the tutorial invites you to play with the Python interpreter as you read.
  Cluster 8
    10-9 - 93.6 - 794.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In the next chapter, the mechanics of using the interpreter are explained. This is rather mundane information,
  Cluster 9
    10-10 - 93.6 - 779.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - but essential for trying out the examples shown later.
  Cluster 10
    10-11 - 93.6 - 757.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The rest of the tutorial introduces various features of the Python language and system through examples,
  Cluster 11
    10-12 - 93.6 - 741.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - beginning with simple expressions, statements and data types, through functions and modules, and ﬁnally
  Cluster 12
    10-13 - 93.6 - 726.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - touching upon advanced concepts like exceptions and user-deﬁned classes.
  Cluster 13
    10-14 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 4 Chapter 1. Whetting Your Appetite
Page 11
  Cluster 0
    11-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    11-2 - 654.72 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - TWO
  Cluster 2
    11-3 - 359.15 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - USING THE PYTHON INTERPRETER
  Cluster 3
    11-4 - 93.6 - 721.01 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 2.1 Invoking the Interpreter
  Cluster 4
    11-5 - 93.6 - 684.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The Python interpreter is usually installed as /usr/local/bin/python3.7 on those machines where it is
  Cluster 5
    11-6 - 93.6 - 668.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - available; putting /usr/local/bin in your Unix shell’s search path makes it possible to start it by typing
  Cluster 6
    11-7 - 93.6 - 653.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the command:
  Cluster 7
    11-8 - 93.6 - 627.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - python3.7
  Cluster 8
    11-9 - 162.44 - 601.56 18.58 - ff8 - 27.896 - rgb(53, 95, 124) - 1
  Cluster 9
    11-10 - 93.6 - 596.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to the shell.
  Cluster 10
    11-11 - 176.77 - 596.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Since the choice of the directory where the interpreter lives is an installation option, other
  Cluster 11
    11-12 - 93.6 - 581.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - places are possible; check with your local Python guru or system administrator. (E.g., /usr/local/python
  Cluster 12
    11-13 - 93.6 - 565.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is a popular alternative location.)
  Cluster 13
    11-14 - 93.6 - 543.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - On Windows machines, the Python installation is usually placed in C:\Program Files\Python37\, though 
  Cluster 14
    11-15 - 93.6 - 528.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - you can change this when you’re running the installer. To add this directory to your path, you can 
  Cluster 15
    11-16 - 93.6 - 512.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - type the following command into the command prompt in a DOS box:
  Cluster 16
    11-17 - 93.6 - 486.9 25.54 - ff7 - 35.864 - rgb(0, 112, 33) - set path=%path%;C:\Program Files\Python37\
  Cluster 17
    11-18 - 93.6 - 456.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Typing an end-of-ﬁle character (Control-D on Unix, Control-Z on Windows) at the primary prompt causes
  Cluster 18
    11-19 - 93.6 - 440.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the interpreter to exit with a zero exit status. If that doesn’t work, you can exit the interpreter by typing
  Cluster 19
    11-20 - 93.6 - 425.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the following command: quit().
  Cluster 20
    11-21 - 93.6 - 403.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The interpreter’s line-editing features include interactive editing, history substitution and code completion
  Cluster 21
    11-22 - 93.6 - 387.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - on systems that support readline. Perhaps the quickest check to see whether command line editing is
  Cluster 22
    11-23 - 93.6 - 372.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - supported is typing Control-P to the ﬁrst Python prompt you get. If it beeps, you have command line
  Cluster 23
    11-24 - 93.6 - 356.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - editing; see Appendix Interactive Input Editing and History Substitution for an introduction to the keys. If
  Cluster 24
    11-25 - 93.6 - 340.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - nothing appears to happen, or if ^P is echoed, command line editing isn’t available; you’ll only be able to
  Cluster 25
    11-26 - 93.6 - 325.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - use backspace to remove characters from the current line.
  Cluster 26
    11-27 - 93.6 - 303.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The interpreter operates somewhat like the Unix shell: when called with standard input connected to a tty
  Cluster 27
    11-28 - 93.6 - 287.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - device, it reads and executes commands interactively; when called with a ﬁle name argument or with a ﬁle
  Cluster 28
    11-29 - 93.6 - 272.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as standard input, it reads and executes a script from that ﬁle.
  Cluster 29
    11-30 - 93.6 - 250.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A second way of starting the interpreter is python -c command [arg] ..., which executes the statement(s)
  Cluster 30
    11-31 - 93.6 - 234.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in command, analogous to the shell’s -c option. Since Python statements often contain spaces or other
  Cluster 31
    11-32 - 93.6 - 219.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - characters that are special to the shell, it is usually advised to quote command in its entirety with single
  Cluster 32
    11-33 - 93.6 - 203.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - quotes.
  Cluster 33
    11-34 - 93.6 - 181.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Some Python modules are also useful as scripts. These can be invoked using python -m module [arg] ...,
  Cluster 34
    11-35 - 93.6 - 166.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - which executes the source ﬁle for module as if you had spelled out its full name on the command line.
  Cluster 35
    11-36 - 93.6 - 144.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When a script ﬁle is used, it is sometimes useful to be able to run the script and enter interactive mode
  Cluster 36
    11-37 - 93.6 - 128.53 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - afterwards. This can be done by passing -i before the script.
  Cluster 37
    11-38 - 106.86 - 109.56 15.93 - ffa - 23.912 - rgb(0, 0, 0) - 1
  Cluster 38
    11-39 - 115.92 - 105.9 23.91 - ffb - 31.88 - rgb(0, 0, 0) - On Unix, the Python 3.x interpreter is by default not installed with the executable named python, so that it does not
  Cluster 39
    11-40 - 93.6 - 93.6 23.91 - ffb - 31.88 - rgb(0, 0, 0) - conﬂict with a simultaneously installed Python 2.x executable.
  Cluster 40
    11-41 - 694.88 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 5
Page 12
  Cluster 0
    12-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    12-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - All command line options are described in using-on-general.
  Cluster 2
    12-3 - 93.6 - 880.29 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 2.1.1 Argument Passing
  Cluster 3
    12-4 - 93.6 - 849.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When known to the interpreter, the script name and additional arguments thereafter are turned into a list
  Cluster 4
    12-5 - 93.6 - 834.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of strings and assigned to the argv variable in the sys module. You can access this list by executing import
  Cluster 5
    12-6 - 93.6 - 818.83 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - sys. The length of the list is at least one; when no script and no arguments are given, sys.argv[0] is an
  Cluster 6
    12-7 - 93.6 - 803.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - empty string. When the script name is given as '-' (meaning standard input), sys.argv[0] is set to '-'.
  Cluster 7
    12-8 - 93.6 - 787.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When -c command is used, sys.argv[0] is set to '-c'. When -m module is used, sys.argv[0] is set to
  Cluster 8
    12-9 - 93.6 - 772.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the full name of the located module. Options found after -c command or -m module are not consumed by
    12-9 - 93.6 - 756.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the Python interpreter’s option processing but left in sys.argv for the command or module to handle.
  Cluster 9
    12-10 - 93.6 - 713.91 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 2.1.2 Interactive Mode
  Cluster 10
    12-11 - 93.6 - 683.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When commands are read from a tty, the interpreter is said to be in interactive mode. In this mode it prompts
  Cluster 11
    12-12 - 93.6 - 667.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - for the next command with the primary prompt, usually three greater-than signs (>>>); for continuation lines
  Cluster 12
    12-13 - 93.6 - 652.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - it prompts with the secondary prompt, by default three dots (...). The interpreter prints a welcome message
  Cluster 13
    12-14 - 93.6 - 636.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - stating its version number and a copyright notice before printing the ﬁrst prompt:
  Cluster 14
    12-15 - 93.6 - 610.86 24.89 - ffd - 35.864 - rgb(199, 92, 10) - $ python3.7
  Cluster 15
    12-16 - 93.6 - 596.61 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Python 3.7 (default, Sep 16 2015, 09:25:04)
  Cluster 16
    12-17 - 93.6 - 582.37 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [GCC 4.8.2] on linux
  Cluster 17
    12-18 - 93.6 - 568.13 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Type "help", "copyright", "credits" or "license" for more information.
  Cluster 18
    12-19 - 93.6 - 553.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>>
  Cluster 19
    12-20 - 93.6 - 523.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Continuation lines are needed when entering a multi-line construct. As an example, take a look at this if
  Cluster 20
    12-21 - 93.6 - 507.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - statement:
  Cluster 21
    12-22 - 93.6 - 481.61 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> the_world_is_flat = True
  Cluster 22
    12-23 - 93.6 - 467.36 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> if the_world_is_flat:
    12-23 - 93.6 - 453.12 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("Be careful not to fall off!")
    12-23 - 93.6 - 438.87 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    12-23 - 93.6 - 424.62 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Be careful not to fall off!
  Cluster 23
    12-24 - 93.6 - 393.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For more on interactive mode, see Interactive Mode.
  Cluster 24
    12-25 - 93.6 - 344.6 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 2.2 The Interpreter and Its Environment
  Cluster 25
    12-26 - 93.6 - 304.3 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 2.2.1 Source Code Encoding
  Cluster 26
    12-27 - 93.6 - 273.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - By default, Python source ﬁles are treated as encoded in UTF-8. In that encoding, characters of most
  Cluster 27
    12-28 - 93.6 - 258.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - languages in the world can be used simultaneously in string literals, identiﬁers and comments — although
  Cluster 28
    12-29 - 93.6 - 242.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the standard library only uses ASCII characters for identiﬁers, a convention that any portable code should
  Cluster 29
    12-30 - 93.6 - 227.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - follow. To display all these characters properly, your editor must recognize that the ﬁle is UTF-8, and it
  Cluster 30
    12-31 - 93.6 - 211.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - must use a font that supports all the characters in the ﬁle.
  Cluster 31
    12-32 - 93.6 - 189.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To declare an encoding other than the default one, a special comment line should be added as the ﬁrst line
  Cluster 32
    12-33 - 93.6 - 174.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the ﬁle. The syntax is as follows:
  Cluster 33
    12-34 - 93.6 - 148.15 24.89 - ffe - 35.864 - rgb(64, 128, 143) - # -*- coding: encoding -*-
  Cluster 34
    12-35 - 93.6 - 117.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - where encoding is one of the valid codecs supported by Python.
  Cluster 35
    12-36 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 6 Chapter 2. Using the Python Interpreter
Page 13
  Cluster 0
    13-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    13-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For example, to declare that Windows-1252 encoding is to be used, the ﬁrst line of your source code ﬁle
  Cluster 2
    13-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - should be:
  Cluster 3
    13-4 - 93.6 - 881.48 24.89 - ffe - 35.864 - rgb(64, 128, 143) - # -*- coding: cp1252 -*-
  Cluster 4
    13-5 - 93.6 - 850.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - One exception to the ﬁrst line rule is when the source code starts with a UNIX “shebang” line. In this case,
  Cluster 5
    13-6 - 93.6 - 835.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the encoding declaration should be added as the second line of the ﬁle. For example:
  Cluster 6
    13-7 - 93.6 - 809.21 24.89 - ffe - 35.864 - rgb(64, 128, 143) - #!/usr/bin/env python3
  Cluster 7
    13-8 - 93.6 - 794.96 24.89 - ffe - 35.864 - rgb(64, 128, 143) - # -*- coding: cp1252 -*-
  Cluster 8
    13-9 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 2.2. The Interpreter and Its Environment 7
Page 14
  Cluster 0
    14-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    14-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 8 Chapter 2. Using the Python Interpreter
Page 15
  Cluster 0
    15-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    15-2 - 637.1 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - THREE
  Cluster 2
    15-3 - 276.12 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - AN INFORMAL INTRODUCTION TO PYTHON
  Cluster 3
    15-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In the following examples, input and output are distinguished by the presence or absence of prompts (>>>
  Cluster 4
    15-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and …): to repeat the example, you must type everything after the prompt, when the prompt appears; lines
  Cluster 5
    15-6 - 93.6 - 697.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line
  Cluster 6
    15-7 - 93.6 - 682.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - by itself in an example means you must type a blank line; this is used to end a multi-line command.
  Cluster 7
    15-8 - 93.6 - 660.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Many of the examples in this manual, even those entered at the interactive prompt, include comments.
  Cluster 8
    15-9 - 93.6 - 644.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Comments in Python start with the hash character, #, and extend to the end of the physical line. A
  Cluster 9
    15-10 - 93.6 - 629.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - comment may appear at the start of a line or following whitespace or code, but not within a string literal.
  Cluster 10
    15-11 - 93.6 - 613.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A hash character within a string literal is just a hash character. Since comments are to clarify code and are
  Cluster 11
    15-12 - 93.6 - 597.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - not interpreted by Python, they may be omitted when typing in examples.
  Cluster 12
    15-13 - 93.6 - 575.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Some examples:
  Cluster 13
    15-14 - 93.6 - 549.91 24.89 - ffe - 35.864 - rgb(64, 128, 143) - # this is the first comment
  Cluster 14
    15-15 - 93.6 - 535.66 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - spam = 1 # and this is the second comment
  Cluster 15
    15-16 - 154.79 - 521.43 24.89 - ffe - 35.864 - rgb(64, 128, 143) - # ... and now a third!
  Cluster 16
    15-17 - 93.6 - 507.18 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - text = "# This is not a comment because it's inside quotes."
  Cluster 17
    15-18 - 93.6 - 449.18 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 3.1 Using Python as a Calculator
  Cluster 18
    15-19 - 93.6 - 411.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Let’s try some simple Python commands. Start the interpreter and wait for the primary prompt, >>>. (It
  Cluster 19
    15-20 - 93.6 - 396.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - shouldn’t take long.)
  Cluster 20
    15-21 - 93.6 - 353.56 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 3.1.1 Numbers
  Cluster 21
    15-22 - 93.6 - 323.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The interpreter acts as a simple calculator: you can type an expression at it and it will write the value.
  Cluster 22
    15-23 - 93.6 - 307.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Expression syntax is straightforward: the operators +, -, * and / work just like in most other languages (for
  Cluster 23
    15-24 - 93.6 - 292.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - example, Pascal or C); parentheses (()) can be used for grouping. For example:
  Cluster 24
    15-25 - 93.6 - 266.06 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 2 + 2
  Cluster 25
    15-26 - 93.6 - 251.81 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 4
    15-26 - 93.6 - 237.56 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 50 - 5*6
  Cluster 26
    15-27 - 93.6 - 223.33 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 20
  Cluster 27
    15-28 - 93.6 - 209.08 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> (50 - 5*6) / 4
  Cluster 28
    15-29 - 93.6 - 194.83 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 5.0
  Cluster 29
    15-30 - 93.6 - 180.58 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 8 / 5 # division always returns a floating point number
    15-30 - 93.6 - 166.34 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1.6
  Cluster 30
    15-31 - 93.6 - 135.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The integer numbers (e.g. 2, 4, 20) have type int, the ones with a fractional part (e.g. 5.0, 1.6) have type
  Cluster 31
    15-32 - 93.6 - 120.09 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - float. We will see more about numeric types later in the tutorial.
  Cluster 32
    15-33 - 694.88 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 9
Page 16
  Cluster 0
    16-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    16-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Division (/) always returns a ﬂoat. To do ﬂoor division and get an integer result (discarding any fractional
  Cluster 2
    16-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - result) you can use the // operator; to calculate the remainder you can use %:
  Cluster 3
    16-4 - 93.6 - 881.48 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 17 / 3 # classic division returns a float
  Cluster 4
    16-5 - 93.6 - 867.23 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 5.666666666666667
  Cluster 5
    16-6 - 93.6 - 852.98 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - >>>
  Cluster 6
    16-7 - 93.6 - 838.73 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 17 // 3 # floor division discards the fractional part
  Cluster 7
    16-8 - 93.6 - 824.49 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 5
  Cluster 8
    16-9 - 93.6 - 810.24 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 17 % 3 # the % operator returns the remainder of the division
  Cluster 9
    16-10 - 93.6 - 795.99 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 2
    16-10 - 93.6 - 781.74 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 5 * 3 + 2 # result * divisor + remainder
  Cluster 10
    16-11 - 93.6 - 767.51 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 17
  Cluster 11
    16-12 - 490.27 - 741.51 18.58 - ff8 - 27.896 - rgb(53, 95, 124) - 1
  Cluster 12
    16-13 - 93.6 - 736.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - With Python, it is possible to use the ** operator to calculate powers
  Cluster 13
    16-14 - 496.07 - 736.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - :
  Cluster 14
    16-15 - 93.6 - 710.77 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 5 ** 2 # 5 squared
  Cluster 15
    16-16 - 93.6 - 696.53 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 25
  Cluster 16
    16-17 - 93.6 - 682.28 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 2 ** 7 # 2 to the power of 7
    16-17 - 93.6 - 668.03 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 128
  Cluster 17
    16-18 - 93.6 - 637.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The equal sign (=) is used to assign a value to a variable. Afterwards, no result is displayed before the next
  Cluster 18
    16-19 - 93.6 - 621.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - interactive prompt:
  Cluster 19
    16-20 - 93.6 - 595.76 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> width = 20
  Cluster 20
    16-21 - 93.6 - 581.52 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> height = 5 * 9
  Cluster 21
    16-22 - 93.6 - 567.27 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> width * height
  Cluster 22
    16-23 - 93.6 - 553.02 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 900
  Cluster 23
    16-24 - 93.6 - 522.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If a variable is not “deﬁned” (assigned a value), trying to use it will give you an error:
  Cluster 24
    16-25 - 93.6 - 496.3 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> n # try to access an undefined variable
  Cluster 25
    16-26 - 93.6 - 482.05 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
    16-26 - 93.6 - 453.56 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - NameError: name 'n' is not defined

    =====
    16-26 - 105.83 - 467.81 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
  Cluster 26
    16-27 - 93.6 - 422.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There is full support for ﬂoating point; operators with mixed type operands convert the integer operand to
  Cluster 27
    16-28 - 93.6 - 407.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬂoating point:
  Cluster 28
    16-29 - 93.6 - 381.29 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 4 * 3.75 - 1
  Cluster 29
    16-30 - 93.6 - 367.04 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 14.0
  Cluster 30
    16-31 - 93.6 - 336.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In interactive mode, the last printed expression is assigned to the variable _. This means that when you are
  Cluster 31
    16-32 - 93.6 - 320.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - using Python as a desk calculator, it is somewhat easier to continue calculations, for example:
  Cluster 32
    16-33 - 93.6 - 294.77 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> tax = 12.5 / 100
  Cluster 33
    16-34 - 93.6 - 280.53 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> price = 100.50
    16-34 - 93.6 - 266.28 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> price * tax
    16-34 - 93.6 - 252.03 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 12.5625
  Cluster 34
    16-35 - 93.6 - 237.78 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> price + _
  Cluster 35
    16-36 - 93.6 - 223.55 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 113.0625
  Cluster 36
    16-37 - 93.6 - 209.3 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> round(_, 2)
  Cluster 37
    16-38 - 93.6 - 195.05 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 113.06
  Cluster 38
    16-39 - 93.6 - 164.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This variable should be treated as read-only by the user. Don’t explicitly assign a value to it — you
  Cluster 39
    16-40 - 93.6 - 148.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - would create an independent local variable with the same name masking the built-in variable with its magic
  Cluster 40
    16-41 - 93.6 - 133.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - behavior.
  Cluster 41
    16-42 - 106.86 - 116.3 15.93 - ffa - 23.912 - rgb(0, 0, 0) - 1
  Cluster 42
    16-43 - 115.92 - 112.64 23.91 - ffb - 31.88 - rgb(0, 0, 0) - Since ** has higher precedence than -, -3**2 will be interpreted as -(3**2) and thus result in -9. To avoid this and get
  Cluster 43
    16-44 - 93.6 - 100.35 23.91 - ffc - 31.88 - rgb(0, 0, 0) - 9, you can use (-3)**2.
  Cluster 44
    16-45 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 10 Chapter 3. An Informal Introduction to Python
Page 17
  Cluster 0
    17-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    17-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In addition to int and float, Python supports other types of numbers, such as Decimal and Fraction.
  Cluster 2
    17-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python also has built-in support for complex numbers, and uses the j or J suﬃx to indicate the imaginary
  Cluster 3
    17-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - part (e.g. 3+5j).
  Cluster 4
    17-5 - 93.6 - 849.21 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 3.1.2 Strings
  Cluster 5
    17-6 - 93.6 - 818.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Besides numbers, Python can also manipulate strings, which can be expressed in several ways. They can be
  Cluster 6
    17-7 - 550.64 - 807.99 18.58 - ff8 - 27.896 - rgb(53, 95, 124) - 2
  Cluster 7
    17-8 - 93.6 - 803.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - enclosed in single quotes ('...') or double quotes ("...") with the same result
  Cluster 8
    17-9 - 556.44 - 803.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - . \ can be used to escape
  Cluster 9
    17-10 - 93.6 - 787.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - quotes:
  Cluster 10
    17-11 - 93.6 - 761.71 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 'spam eggs' # single quotes
  Cluster 11
    17-12 - 93.6 - 747.46 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'spam eggs'
  Cluster 12
    17-13 - 93.6 - 733.21 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 'doesn\'t' # use \' to escape the single quote...
  Cluster 13
    17-14 - 93.6 - 718.97 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - "doesn't"
  Cluster 14
    17-15 - 93.6 - 704.72 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> "doesn't" # ...or use double quotes instead
  Cluster 15
    17-16 - 93.6 - 690.48 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - "doesn't"
  Cluster 16
    17-17 - 93.6 - 676.23 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> '"Yes," they said.'
  Cluster 17
    17-18 - 93.6 - 661.99 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '"Yes," they said.'
  Cluster 18
    17-19 - 93.6 - 647.74 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> "\"Yes,\" they said."
  Cluster 19
    17-20 - 93.6 - 633.49 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '"Yes," they said.'
    17-20 - 93.6 - 619.24 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> '"Isn\'t," they said.'
  Cluster 20
    17-21 - 93.6 - 604.99 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '"Isn\'t," they said.'
  Cluster 21
    17-22 - 93.6 - 574.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In the interactive interpreter, the output string is enclosed in quotes and special characters are escaped with
  Cluster 22
    17-23 - 93.6 - 558.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - backslashes. While this might sometimes look diﬀerent from the input (the enclosing quotes could change),
  Cluster 23
    17-24 - 93.6 - 543.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the two strings are equivalent. The string is enclosed in double quotes if the string contains a single quote
  Cluster 24
    17-25 - 93.6 - 527.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and no double quotes, otherwise it is enclosed in single quotes. The print() function produces a more
  Cluster 25
    17-26 - 93.6 - 512.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - readable output, by omitting the enclosing quotes and by printing escaped and special characters:
  Cluster 26
    17-27 - 93.6 - 486.11 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> '"Isn\'t," they said.'
  Cluster 27
    17-28 - 93.6 - 471.86 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '"Isn\'t," they said.'
    17-28 - 93.6 - 457.61 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('"Isn\'t," they said.')
    17-28 - 93.6 - 443.37 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - "Isn't," they said.
    17-28 - 93.6 - 429.12 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> s = 'First line.\nSecond line.' # \n means newline
    17-28 - 93.6 - 414.87 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> s # without print(), \n is included in the output
  Cluster 28
    17-29 - 93.6 - 400.62 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'First line.\nSecond line.'
  Cluster 29
    17-30 - 93.6 - 386.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(s) # with print(), \n produces a new line
    17-30 - 93.6 - 372.12 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - First line.
  Cluster 30
    17-31 - 93.6 - 357.89 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Second line.
  Cluster 31
    17-32 - 93.6 - 327.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you don’t want characters prefaced by \ to be interpreted as special characters, you can use raw strings
  Cluster 32
    17-33 - 93.6 - 311.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - by adding an r before the ﬁrst quote:
  Cluster 33
    17-34 - 93.6 - 285.61 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('C:\some\name') # here \n means newline!
  Cluster 34
    17-35 - 93.6 - 271.36 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - C:\some
  Cluster 35
    17-36 - 93.6 - 257.13 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ame
  Cluster 36
    17-37 - 93.6 - 242.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(r'C:\some\name') # note the r before the quote
  Cluster 37
    17-38 - 93.6 - 228.63 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - C:\some\name
  Cluster 38
    17-39 - 93.6 - 197.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - String literals can span multiple lines. One way is using triple-quotes: """...""" or '''...'''. End of
  Cluster 39
    17-40 - 93.6 - 182.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - lines are automatically included in the string, but it’s possible to prevent this by adding a \ at the end of
  Cluster 40
    17-41 - 93.6 - 166.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the line. The following example:
  Cluster 41
    17-42 - 106.86 - 150.02 15.93 - ffa - 23.912 - rgb(0, 0, 0) - 2
  Cluster 42
    17-43 - 115.92 - 146.37 23.91 - ffb - 31.88 - rgb(0, 0, 0) - Unlike other languages, special characters such as \n have the same meaning with both single ('...') and double ("...")
  Cluster 43
    17-44 - 93.6 - 134.07 23.91 - ffb - 31.88 - rgb(0, 0, 0) - quotes. The only diﬀerence between the two is that within single quotes you don’t need to escape " (but you have to escape
  Cluster 44
    17-45 - 93.6 - 121.76 23.91 - ffc - 31.88 - rgb(0, 0, 0) - \') and vice versa.
  Cluster 45
    17-46 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 3.1. Using Python as a Calculator 11
Page 18
  Cluster 0
    18-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    18-2 - 93.6 - 916.45 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("""\
  Cluster 2
    18-3 - 93.6 - 902.2 24.89 - ff7 - 35.864 - rgb(64, 112, 161) - Usage: thingy [OPTIONS]
  Cluster 3
    18-4 - 124.2 - 887.95 24.89 - ff7 - 35.864 - rgb(64, 112, 161) - -h Display this usage message
    18-4 - 124.2 - 873.7 24.89 - ff7 - 35.864 - rgb(64, 112, 161) - -H hostname Hostname to connect to
  Cluster 4
    18-5 - 93.6 - 859.46 24.89 - ff7 - 35.864 - rgb(64, 112, 161) - """)
  Cluster 5
    18-6 - 93.6 - 828.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - produces the following output (note that the initial newline is not included):
  Cluster 6
    18-7 - 93.6 - 802.72 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Usage: thingy [OPTIONS]
  Cluster 7
    18-8 - 124.2 - 788.49 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - -h Display this usage message
  Cluster 8
    18-9 - 124.2 - 774.24 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - -H hostname Hostname to connect to
  Cluster 9
    18-10 - 93.6 - 743.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Strings can be concatenated (glued together) with the + operator, and repeated with *:
  Cluster 10
    18-11 - 93.6 - 717.51 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # 3 times 'un', followed by 'ium'
  Cluster 11
    18-12 - 93.6 - 703.26 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 3 * 'un' + 'ium'
  Cluster 12
    18-13 - 93.6 - 689.01 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'unununium'
  Cluster 13
    18-14 - 93.6 - 658.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Two or more string literals (i.e. the ones enclosed between quotes) next to each other are automatically
  Cluster 14
    18-15 - 93.6 - 642.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - concatenated.
  Cluster 15
    18-16 - 93.6 - 616.75 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 'Py' 'thon'
  Cluster 16
    18-17 - 93.6 - 602.5 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Python'
  Cluster 17
    18-18 - 93.6 - 571.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This feature is particularly useful when you want to break long strings:
  Cluster 18
    18-19 - 93.6 - 545.78 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> text = ('Put several strings within parentheses '
  Cluster 19
    18-20 - 93.6 - 531.53 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... 'to have them joined together.')
  Cluster 20
    18-21 - 93.6 - 517.28 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> text
  Cluster 21
    18-22 - 93.6 - 503.04 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Put several strings within parentheses to have them joined together.'
  Cluster 22
    18-23 - 93.6 - 472.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This only works with two literals though, not with variables or expressions:
  Cluster 23
    18-24 - 93.6 - 446.3 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> prefix = 'Py'
  Cluster 24
    18-25 - 93.6 - 432.06 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> prefix 'thon' # can't concatenate a variable and a string literal

    =====
    18-25 - 105.83 - 417.81 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ...
  Cluster 25
    18-26 - 93.6 - 403.57 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - SyntaxError: invalid syntax
  Cluster 26
    18-27 - 93.6 - 389.32 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> ('un' * 3) 'ium'

    =====
    18-27 - 105.83 - 375.08 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ...
  Cluster 27
    18-28 - 93.6 - 360.83 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - SyntaxError: invalid syntax
  Cluster 28
    18-29 - 93.6 - 330.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you want to concatenate variables or a variable and a literal, use +:
  Cluster 29
    18-30 - 93.6 - 304.1 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> prefix + 'thon'
  Cluster 30
    18-31 - 93.6 - 289.85 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Python'
  Cluster 31
    18-32 - 93.6 - 259.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Strings can be indexed (subscripted), with the ﬁrst character having index 0. There is no separate character
  Cluster 32
    18-33 - 93.6 - 243.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - type; a character is simply a string of size one:
  Cluster 33
    18-34 - 93.6 - 217.58 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word = 'Python'
  Cluster 34
    18-35 - 93.6 - 203.33 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[0] # character in position 0
    18-35 - 93.6 - 189.09 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'P'
  Cluster 35
    18-36 - 93.6 - 174.85 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[5] # character in position 5
  Cluster 36
    18-37 - 93.6 - 160.6 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'n'
  Cluster 37
    18-38 - 93.6 - 129.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Indices may also be negative numbers, to start counting from the right:
  Cluster 38
    18-39 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 12 Chapter 3. An Informal Introduction to Python
Page 19
  Cluster 0
    19-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    19-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[-1] # last character
  Cluster 2
    19-3 - 93.6 - 902.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'n'
  Cluster 3
    19-4 - 93.6 - 887.95 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[-2] # second-last character
    19-4 - 93.6 - 873.7 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'o'
  Cluster 4
    19-5 - 93.6 - 859.46 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[-6]
  Cluster 5
    19-6 - 93.6 - 845.21 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'P'
  Cluster 6
    19-7 - 93.6 - 814.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that since -0 is the same as 0, negative indices start from -1.
  Cluster 7
    19-8 - 93.6 - 792.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In addition to indexing, slicing is also supported. While indexing is used to obtain individual characters,
  Cluster 8
    19-9 - 93.6 - 776.96 29.89 - ff6 - 39.852 - rgb(0, 0, 0) - slicing allows you to obtain substring:
  Cluster 9
    19-10 - 93.6 - 750.92 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[0:2] # characters from position 0 (included) to 2 (excluded)
  Cluster 10
    19-11 - 93.6 - 736.68 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Py'
  Cluster 11
    19-12 - 93.6 - 722.44 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[2:5] # characters from position 2 (included) to 5 (excluded)
  Cluster 12
    19-13 - 93.6 - 708.19 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'tho'
  Cluster 13
    19-14 - 93.6 - 677.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note how the start is always included, and the end always excluded. This makes sure that s[:i] + s[i:]
  Cluster 14
    19-15 - 93.6 - 661.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is always equal to s:
  Cluster 15
    19-16 - 93.6 - 635.92 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[:2] + word[2:]
  Cluster 16
    19-17 - 93.6 - 621.67 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Python'
    19-17 - 93.6 - 607.42 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[:4] + word[4:]
  Cluster 17
    19-18 - 93.6 - 593.18 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Python'
  Cluster 18
    19-19 - 93.6 - 562.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Slice indices have useful defaults; an omitted ﬁrst index defaults to zero, an omitted second index defaults
  Cluster 19
    19-20 - 93.6 - 546.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to the size of the string being sliced.
  Cluster 20
    19-21 - 93.6 - 520.91 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[:2] # character from the beginning to position 2 (excluded)
  Cluster 21
    19-22 - 93.6 - 506.66 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Py'
    19-22 - 93.6 - 492.41 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[4:] # characters from position 4 (included) to the end
    19-22 - 93.6 - 478.17 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'on'
    19-22 - 93.6 - 463.92 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[-2:] # characters from the second-last (included) to the end
    19-22 - 93.6 - 449.67 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'on'
  Cluster 22
    19-23 - 93.6 - 418.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - One way to remember how slices work is to think of the indices as pointing between characters, with the left
  Cluster 23
    19-24 - 93.6 - 403.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - edge of the ﬁrst character numbered 0. Then the right edge of the last character of a string of n characters
  Cluster 24
    19-25 - 93.6 - 387.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - has index n, for example:
  Cluster 25
    19-26 - 99.72 - 361.87 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - +---+---+---+---+---+---+
  Cluster 26
    19-27 - 99.72 - 347.62 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - | P | y | t | h | o | n |
    19-27 - 99.72 - 333.37 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - +---+---+---+---+---+---+
    19-27 - 99.72 - 319.12 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 0 1 2 3 4 5 6
  Cluster 27
    19-28 - 93.6 - 304.88 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - -6 -5 -4 -3 -2 -1
  Cluster 28
    19-29 - 93.6 - 274.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The ﬁrst row of numbers gives the position of the indices 0…6 in the string; the second row gives the
  Cluster 29
    19-30 - 93.6 - 258.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - corresponding negative indices. The slice from i to j consists of all characters between the edges labeled i
  Cluster 30
    19-31 - 93.6 - 243.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and j, respectively.
  Cluster 31
    19-32 - 93.6 - 221.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For non-negative indices, the length of a slice is the diﬀerence of the indices, if both are within bounds. For
  Cluster 32
    19-33 - 93.6 - 205.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - example, the length of word[1:3] is 2.
  Cluster 33
    19-34 - 93.6 - 183.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Attempting to use an index that is too large will result in an error:
  Cluster 34
    19-35 - 93.6 - 157.5 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[42] # the word only has 6 characters
  Cluster 35
    19-36 - 93.6 - 143.25 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
  Cluster 36
    19-37 - 105.83 - 129.0 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
  Cluster 37
    19-38 - 93.6 - 114.75 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - IndexError: string index out of range
  Cluster 38
    19-39 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 3.1. Using Python as a Calculator 13
Page 20
  Cluster 0
    20-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    20-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - However, out of range slice indexes are handled gracefully when used for slicing:
  Cluster 2
    20-3 - 93.6 - 897.36 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[4:42]
  Cluster 3
    20-4 - 93.6 - 883.12 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'on'
  Cluster 4
    20-5 - 93.6 - 868.87 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[42:]
  Cluster 5
    20-6 - 93.6 - 854.62 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ''
  Cluster 6
    20-7 - 93.6 - 823.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python strings cannot be changed — they are immutable. Therefore, assigning to an indexed position in the
  Cluster 7
    20-8 - 93.6 - 808.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - string results in an error:
  Cluster 8
    20-9 - 93.6 - 782.7 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[0] = 'J'
  Cluster 9
    20-10 - 105.83 - 768.46 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ...
  Cluster 10
    20-11 - 93.6 - 754.21 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - TypeError: 'str' object does not support item assignment
  Cluster 11
    20-12 - 93.6 - 739.96 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[2:] = 'py'
  Cluster 12
    20-13 - 105.83 - 725.71 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ...
  Cluster 13
    20-14 - 93.6 - 711.46 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - TypeError: 'str' object does not support item assignment
  Cluster 14
    20-15 - 93.6 - 680.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you need a diﬀerent string, you should create a new one:
  Cluster 15
    20-16 - 93.6 - 655.1 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 'J' + word[1:]
  Cluster 16
    20-17 - 93.6 - 640.85 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Jython'
  Cluster 17
    20-18 - 93.6 - 626.6 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> word[:2] + 'py'
  Cluster 18
    20-19 - 93.6 - 612.35 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Pypy'
  Cluster 19
    20-20 - 93.6 - 581.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The built-in function len() returns the length of a string:
  Cluster 20
    20-21 - 93.6 - 555.97 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> s = 'supercalifragilisticexpialidocious'
  Cluster 21
    20-22 - 93.6 - 541.72 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> len(s)
  Cluster 22
    20-23 - 93.6 - 527.48 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 34
  Cluster 23
    20-24 - 93.6 - 496.78 27.9 - ff3 - 39.852 - rgb(0, 0, 0) - See also:
  Cluster 24
    20-25 - 93.6 - 474.76 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - textseq Strings are examples of sequence types, and support the common operations supported by such
  Cluster 25
    20-26 - 125.98 - 459.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - types.
  Cluster 26
    20-27 - 93.6 - 437.2 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - string-methods Strings support a large number of methods for basic transformations and searching.
  Cluster 27
    20-28 - 93.6 - 415.19 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - f-strings String literals that have embedded expressions.
  Cluster 28
    20-29 - 93.6 - 393.17 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - formatstrings Information about string formatting with str.format().
  Cluster 29
    20-30 - 93.6 - 371.15 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - old-string-formatting The old formatting operations invoked when strings are the left operand of the %
  Cluster 30
    20-31 - 125.98 - 355.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - operator are described in more detail here.
  Cluster 31
    20-32 - 93.6 - 313.16 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 3.1.3 Lists
  Cluster 32
    20-33 - 93.6 - 282.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python knows a number of compound data types, used to group together other values. The most versatile
  Cluster 33
    20-34 - 93.6 - 267.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is the list, which can be written as a list of comma-separated values (items) between square brackets. Lists
  Cluster 34
    20-35 - 93.6 - 251.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - might contain items of diﬀerent types, but usually the items all have the same type.
  Cluster 35
    20-36 - 93.6 - 226.0 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> squares = [1, 4, 9, 16, 25]
  Cluster 36
    20-37 - 93.6 - 211.76 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> squares
  Cluster 37
    20-38 - 93.6 - 197.51 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [1, 4, 9, 16, 25]
  Cluster 38
    20-39 - 93.6 - 166.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Like strings (and all other built-in sequence type), lists can be indexed and sliced:
  Cluster 39
    20-40 - 93.6 - 141.13 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> squares[0] # indexing returns the item
  Cluster 40
    20-41 - 93.6 - 126.88 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1
  Cluster 41
    20-42 - 93.6 - 112.64 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> squares[-1]
  Cluster 42
    20-43 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 43
    20-44 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 14 Chapter 3. An Informal Introduction to Python
Page 21
  Cluster 0
    21-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    21-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    21-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 25
  Cluster 3
    21-4 - 93.6 - 890.54 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> squares[-3:] # slicing returns a new list
  Cluster 4
    21-5 - 93.6 - 876.29 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [9, 16, 25]
  Cluster 5
    21-6 - 93.6 - 845.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - All slice operations return a new list containing the requested elements. This means that the following slice
  Cluster 6
    21-7 - 93.6 - 830.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - returns a new (shallow) copy of the list:
  Cluster 7
    21-8 - 93.6 - 804.02 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> squares[:]
  Cluster 8
    21-9 - 93.6 - 789.78 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [1, 4, 9, 16, 25]
  Cluster 9
    21-10 - 93.6 - 759.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Lists also support operations like concatenation:
  Cluster 10
    21-11 - 93.6 - 733.06 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> squares + [36, 49, 64, 81, 100]
  Cluster 11
    21-12 - 93.6 - 718.81 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
  Cluster 12
    21-13 - 93.6 - 688.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Unlike strings, which are immutable, lists are a mutable type, i.e. it is possible to change their content:
  Cluster 13
    21-14 - 93.6 - 662.08 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> cubes = [1, 8, 27, 65, 125] # something's wrong here
  Cluster 14
    21-15 - 93.6 - 647.83 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 4 ** 3 # the cube of 4 is 64, not 65!
  Cluster 15
    21-16 - 93.6 - 633.58 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 64
  Cluster 16
    21-17 - 93.6 - 619.33 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> cubes[3] = 64 # replace the wrong value
  Cluster 17
    21-18 - 93.6 - 605.09 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> cubes
  Cluster 18
    21-19 - 93.6 - 590.85 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [1, 8, 27, 64, 125]
  Cluster 19
    21-20 - 93.6 - 560.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - You can also add new items at the end of the list, by using the append() method (we will see more about
  Cluster 20
    21-21 - 93.6 - 544.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - methods later):
  Cluster 21
    21-22 - 93.6 - 518.57 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> cubes.append(216) # add the cube of 6
  Cluster 22
    21-23 - 93.6 - 504.33 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> cubes.append(7 ** 3) # and the cube of 7
  Cluster 23
    21-24 - 93.6 - 490.09 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> cubes
    21-24 - 93.6 - 475.84 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [1, 8, 27, 64, 125, 216, 343]
  Cluster 24
    21-25 - 93.6 - 445.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Assignment to slices is also possible, and this can even change the size of the list or clear it entirely:
  Cluster 25
    21-26 - 93.6 - 419.11 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
  Cluster 26
    21-27 - 93.6 - 404.86 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> letters
  Cluster 27
    21-28 - 93.6 - 390.61 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['a', 'b', 'c', 'd', 'e', 'f', 'g']
    21-28 - 93.6 - 376.36 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # replace some values
  Cluster 28
    21-29 - 93.6 - 362.13 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> letters[2:5] = ['C', 'D', 'E']
  Cluster 29
    21-30 - 93.6 - 347.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> letters
    21-30 - 93.6 - 333.63 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['a', 'b', 'C', 'D', 'E', 'f', 'g']
    21-30 - 93.6 - 319.38 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # now remove them
    21-30 - 93.6 - 305.14 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> letters[2:5] = []
  Cluster 30
    21-31 - 93.6 - 290.89 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> letters
  Cluster 31
    21-32 - 93.6 - 276.64 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['a', 'b', 'f', 'g']
    21-32 - 93.6 - 262.39 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # clear the list by replacing all the elements with an empty list
    21-32 - 93.6 - 248.14 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> letters[:] = []
  Cluster 32
    21-33 - 93.6 - 233.91 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> letters
  Cluster 33
    21-34 - 93.6 - 219.66 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - []
  Cluster 34
    21-35 - 93.6 - 188.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The built-in function len() also applies to lists:
  Cluster 35
    21-36 - 93.6 - 162.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> letters = ['a', 'b', 'c', 'd']
  Cluster 36
    21-37 - 93.6 - 148.68 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> len(letters)
  Cluster 37
    21-38 - 93.6 - 134.43 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 4
  Cluster 38
    21-39 - 93.6 - 103.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is possible to nest lists (create lists containing other lists), for example:
  Cluster 39
    21-40 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 3.1. Using Python as a Calculator 15
Page 22
  Cluster 0
    22-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    22-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a = ['a', 'b', 'c']
  Cluster 2
    22-3 - 93.6 - 902.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> n = [1, 2, 3]
  Cluster 3
    22-4 - 93.6 - 887.95 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x = [a, n]
    22-4 - 93.6 - 873.7 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x
  Cluster 4
    22-5 - 93.6 - 859.46 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [['a', 'b', 'c'], [1, 2, 3]]
  Cluster 5
    22-6 - 93.6 - 845.21 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x[0]
  Cluster 6
    22-7 - 93.6 - 830.96 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['a', 'b', 'c']
  Cluster 7
    22-8 - 93.6 - 816.71 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x[0][1]
  Cluster 8
    22-9 - 93.6 - 802.48 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'b'
  Cluster 9
    22-10 - 93.6 - 744.47 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 3.2 First Steps Towards Programming
  Cluster 10
    22-11 - 93.6 - 707.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Of course, we can use Python for more complicated tasks than adding two and two together. For instance,
  Cluster 11
    22-12 - 93.6 - 692.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - we can write an initial sub-sequence of the Fibonacci series as follows:
  Cluster 12
    22-13 - 93.6 - 666.16 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # Fibonacci series:
  Cluster 13
    22-14 - 93.6 - 651.91 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... # the sum of two elements defines the next
  Cluster 14
    22-15 - 93.6 - 637.66 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... a, b = 0, 1
  Cluster 15
    22-16 - 93.6 - 623.41 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> while a < 10:
  Cluster 16
    22-17 - 93.6 - 609.17 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(a)
  Cluster 17
    22-18 - 93.6 - 594.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... a, b = b, a+b
  Cluster 18
    22-19 - 93.6 - 580.68 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 19
    22-20 - 93.6 - 566.44 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0
  Cluster 20
    22-21 - 93.6 - 552.19 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1
  Cluster 21
    22-22 - 93.6 - 537.94 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1
  Cluster 22
    22-23 - 93.6 - 523.69 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 2
  Cluster 23
    22-24 - 93.6 - 509.44 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 3
    22-24 - 93.6 - 495.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 5
  Cluster 24
    22-25 - 93.6 - 480.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 8
  Cluster 25
    22-26 - 93.6 - 450.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This example introduces several new features.
  Cluster 26
    22-27 - 109.42 - 428.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The ﬁrst line contains a multiple assignment: the variables a and b simultaneously get the new values
  Cluster 27
    22-28 - 125.98 - 412.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 0 and 1. On the last line this is used again, demonstrating that the expressions on the right-hand side
  Cluster 28
    22-29 - 125.98 - 397.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are all evaluated ﬁrst before any of the assignments take place. The right-hand side expressions are
  Cluster 29
    22-30 - 125.98 - 381.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - evaluated from the left to the right.
  Cluster 30
    22-31 - 109.42 - 359.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The while loop executes as long as the condition (here: a < 10) remains true. In Python, like in C,
  Cluster 31
    22-32 - 125.98 - 344.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - any non-zero integer value is true; zero is false. The condition may also be a string or list value, in
  Cluster 32
    22-33 - 125.98 - 328.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - fact any sequence; anything with a non-zero length is true, empty sequences are false. The test used
  Cluster 33
    22-34 - 125.98 - 312.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in the example is a simple comparison. The standard comparison operators are written the same as in
  Cluster 34
    22-35 - 125.98 - 297.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - C: < (less than), > (greater than), == (equal to), <= (less than or equal to), >= (greater than or equal
  Cluster 35
    22-36 - 125.98 - 281.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to) and != (not equal to).
  Cluster 36
    22-37 - 109.42 - 259.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The body of the loop is indented: indentation is Python’s way of grouping statements. At the interactive
  Cluster 37
    22-38 - 125.98 - 244.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - prompt, you have to type a tab or space(s) for each indented line. In practice you will prepare more
  Cluster 38
    22-39 - 125.98 - 228.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - complicated input for Python with a text editor; all decent text editors have an auto-indent facility.
  Cluster 39
    22-40 - 125.98 - 213.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When a compound statement is entered interactively, it must be followed by a blank line to indicate
  Cluster 40
    22-41 - 125.98 - 197.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - completion (since the parser cannot guess when you have typed the last line). Note that each line
  Cluster 41
    22-42 - 125.98 - 182.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - within a basic block must be indented by the same amount.
  Cluster 42
    22-43 - 109.42 - 160.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The print() function writes the value of the argument(s) it is given. It diﬀers from just writing
  Cluster 43
    22-44 - 125.98 - 144.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the expression you want to write (as we did earlier in the calculator examples) in the way it handles
  Cluster 44
    22-45 - 125.98 - 129.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - multiple arguments, ﬂoating point quantities, and strings. Strings are printed without quotes, and a
  Cluster 45
    22-46 - 125.98 - 113.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - space is inserted between items, so you can format things nicely, like this:
  Cluster 46
    22-47 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 16 Chapter 3. An Informal Introduction to Python
Page 23
  Cluster 0
    23-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    23-2 - 125.98 - 916.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> i = 256*256
  Cluster 2
    23-3 - 125.98 - 902.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('The value of i is', i)
  Cluster 3
    23-4 - 125.98 - 887.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - The value of i is 65536
  Cluster 4
    23-5 - 125.98 - 857.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The keyword argument end can be used to avoid the newline after the output, or end the output with
  Cluster 5
    23-6 - 125.98 - 841.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a diﬀerent string:
  Cluster 6
    23-7 - 125.98 - 815.68 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a, b = 0, 1
  Cluster 7
    23-8 - 125.98 - 801.44 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> while a < 1000:
  Cluster 8
    23-9 - 125.98 - 787.19 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(a, end=',')
  Cluster 9
    23-10 - 125.98 - 772.94 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... a, b = b, a+b
  Cluster 10
    23-11 - 125.98 - 758.69 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 11
    23-12 - 125.98 - 744.45 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,
  Cluster 12
    23-13 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 3.2. First Steps Towards Programming 17
Page 24
  Cluster 0
    24-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    24-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 18 Chapter 3. An Informal Introduction to Python
Page 25
  Cluster 0
    25-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    25-2 - 649.01 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - FOUR
  Cluster 2
    25-3 - 406.82 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - MORE CONTROL FLOW TOOLS
  Cluster 3
    25-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Besides the while statement just introduced, Python knows the usual control ﬂow statements known from
  Cluster 4
    25-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - other languages, with some twists.
  Cluster 5
    25-6 - 93.6 - 663.91 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 4.1 if Statements
  Cluster 6
    25-7 - 93.6 - 627.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Perhaps the most well-known statement type is the if statement. For example:
  Cluster 7
    25-8 - 93.6 - 601.29 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x = int(input("Please enter an integer: "))
  Cluster 8
    25-9 - 93.6 - 587.04 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Please enter an integer: 42
  Cluster 9
    25-10 - 93.6 - 572.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> if x < 0:
    25-10 - 93.6 - 558.54 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... x = 0
  Cluster 10
    25-11 - 93.6 - 544.3 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('Negative changed to zero')
  Cluster 11
    25-12 - 93.6 - 530.05 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... elif x == 0:
  Cluster 12
    25-13 - 93.6 - 515.8 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('Zero')
  Cluster 13
    25-14 - 93.6 - 501.57 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... elif x == 1:
  Cluster 14
    25-15 - 93.6 - 487.32 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('Single')
    25-15 - 93.6 - 473.07 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... else:
    25-15 - 93.6 - 458.82 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('More')
    25-15 - 93.6 - 444.57 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    25-15 - 93.6 - 430.33 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - More
  Cluster 15
    25-16 - 93.6 - 399.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There can be zero or more elif parts, and the else part is optional. The keyword ‘elif’ is short for ‘else
  Cluster 16
    25-17 - 93.6 - 384.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - if’, and is useful to avoid excessive indentation. An if … elif … elif … sequence is a substitute for the
  Cluster 17
    25-18 - 93.6 - 368.55 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - switch or case statements found in other languages.
  Cluster 18
    25-19 - 93.6 - 319.23 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 4.2 for Statements
  Cluster 19
    25-20 - 93.6 - 282.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The for statement in Python diﬀers a bit from what you may be used to in C or Pascal. Rather than always
  Cluster 20
    25-21 - 93.6 - 266.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to deﬁne
  Cluster 21
    25-22 - 93.6 - 251.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - both the iteration step and halting condition (as C), Python’s for statement iterates over the items of any
  Cluster 22
    25-23 - 93.6 - 235.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sequence (a list or a string), in the order that they appear in the sequence. For example (no pun intended):
  Cluster 23
    25-24 - 93.6 - 209.83 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # Measure some strings:
  Cluster 24
    25-25 - 93.6 - 195.59 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... words = ['cat', 'window', 'defenestrate']
  Cluster 25
    25-26 - 93.6 - 181.34 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for w in words:
  Cluster 26
    25-27 - 93.6 - 167.09 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(w, len(w))
    25-27 - 93.6 - 152.84 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 27
    25-28 - 93.6 - 138.59 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - cat 3
  Cluster 28
    25-29 - 93.6 - 124.36 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - window 6
  Cluster 29
    25-30 - 93.6 - 110.11 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - defenestrate 12
  Cluster 30
    25-31 - 687.75 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 19
Page 26
  Cluster 0
    26-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    26-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you need to modify the sequence you are iterating over while inside the loop (for example to duplicate
  Cluster 2
    26-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - selected items), it is recommended that you ﬁrst make a copy. Iterating over a sequence does not implicitly
  Cluster 3
    26-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - make a copy. The slice notation makes this especially convenient:
  Cluster 4
    26-5 - 93.6 - 865.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for w in words[:]: # Loop over a slice copy of the entire list.
  Cluster 5
    26-6 - 93.6 - 851.68 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... if len(w) > 6:
  Cluster 6
    26-7 - 93.6 - 837.43 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... words.insert(0, w)
  Cluster 7
    26-8 - 93.6 - 823.2 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 8
    26-9 - 93.6 - 808.95 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> words
  Cluster 9
    26-10 - 93.6 - 794.7 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['defenestrate', 'cat', 'window', 'defenestrate']
  Cluster 10
    26-11 - 93.6 - 764.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - With for w in words:, the example would attempt to create an inﬁnite list, inserting defenestrate over
  Cluster 11
    26-12 - 93.6 - 748.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and over again.
  Cluster 12
    26-13 - 93.6 - 699.14 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 4.3 The range() Function
  Cluster 13
    26-14 - 93.6 - 662.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy. It
  Cluster 14
    26-15 - 93.6 - 646.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - generates arithmetic progressions:
  Cluster 15
    26-16 - 93.6 - 620.83 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for i in range(5):
  Cluster 16
    26-17 - 93.6 - 606.58 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(i)
  Cluster 17
    26-18 - 93.6 - 592.33 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    26-18 - 93.6 - 578.08 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0
  Cluster 18
    26-19 - 93.6 - 563.85 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1
  Cluster 19
    26-20 - 93.6 - 549.6 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 2
    26-20 - 93.6 - 535.35 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 3
  Cluster 20
    26-21 - 93.6 - 521.11 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 4
  Cluster 21
    26-22 - 93.6 - 490.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The given end point is never part of the generated sequence; range(10) generates 10 values, the legal indices
  Cluster 22
    26-23 - 93.6 - 474.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - for items of a sequence of length 10. It is possible to let the range start at another number, or to specify a
  Cluster 23
    26-24 - 93.6 - 459.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - diﬀerent increment (even negative; sometimes this is called the ‘step’):
  Cluster 24
    26-25 - 93.6 - 433.29 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - range(5, 10)
  Cluster 25
    26-26 - 111.96 - 419.04 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 5, 6, 7, 8, 9
  Cluster 26
    26-27 - 93.6 - 390.56 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - range(0, 10, 3)
  Cluster 27
    26-28 - 111.96 - 376.31 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 0, 3, 6, 9
  Cluster 28
    26-29 - 93.6 - 347.81 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - range(-10, -100, -30)
  Cluster 29
    26-30 - 105.83 - 333.57 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - -10, -40, -70
  Cluster 30
    26-31 - 93.6 - 302.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To iterate over the indices of a sequence, you can combine range() and len() as follows:
  Cluster 31
    26-32 - 93.6 - 276.83 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a = ['Mary', 'had', 'a', 'little', 'lamb']
  Cluster 32
    26-33 - 93.6 - 262.59 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for i in range(len(a)):
  Cluster 33
    26-34 - 93.6 - 248.35 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(i, a[i])
  Cluster 34
    26-35 - 93.6 - 234.1 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 35
    26-36 - 93.6 - 219.86 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0 Mary
  Cluster 36
    26-37 - 93.6 - 205.61 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1 had
    26-37 - 93.6 - 191.36 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 2 a
  Cluster 37
    26-38 - 93.6 - 177.11 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 3 little
  Cluster 38
    26-39 - 93.6 - 162.86 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 4 lamb
  Cluster 39
    26-40 - 93.6 - 132.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In most such cases, however, it is convenient to use the enumerate() function, see Looping Techniques.
  Cluster 40
    26-41 - 93.6 - 110.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A strange thing happens if you just print a range:
  Cluster 41
    26-42 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 20 Chapter 4. More Control Flow Tools
Page 27
  Cluster 0
    27-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    27-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(range(10))
  Cluster 2
    27-3 - 93.6 - 902.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - range(0, 10)
  Cluster 3
    27-4 - 93.6 - 871.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In many ways the object returned by range() behaves as if it is a list, but in fact it isn’t. It is an object
  Cluster 4
    27-5 - 93.6 - 855.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - which returns the successive items of the desired sequence when you iterate over it, but it doesn’t really
  Cluster 5
    27-6 - 93.6 - 840.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - make the list, thus saving space.
  Cluster 6
    27-7 - 93.6 - 818.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - We say such an object is iterable, that is, suitable as a target for functions and constructs that expect
  Cluster 7
    27-8 - 93.6 - 802.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - something from which they can obtain successive items until the supply is exhausted. We have seen that
  Cluster 8
    27-9 - 93.6 - 787.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the for statement is such an iterator. The function list() is another; it creates lists from iterables:
  Cluster 9
    27-10 - 93.6 - 761.28 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> list(range(5))
  Cluster 10
    27-11 - 93.6 - 747.04 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [0, 1, 2, 3, 4]
  Cluster 11
    27-12 - 93.6 - 716.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Later we will see more functions that return iterables and take iterables as argument.
  Cluster 12
    27-13 - 93.6 - 667.02 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 4.4 break and continue Statements, and else Clauses on Loops
  Cluster 13
    27-14 - 93.6 - 630.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The break statement, like in C, breaks out of the innermost enclosing for or while loop.
  Cluster 14
    27-15 - 93.6 - 608.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Loop statements may have an else clause; it is executed when the loop terminates through exhaustion of
  Cluster 15
    27-16 - 93.6 - 592.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the list (with for) or when the condition becomes false (with while), but not when the loop is terminated
  Cluster 16
    27-17 - 93.6 - 577.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - by a break statement. This is exempliﬁed by the following loop, which searches for prime numbers:
  Cluster 17
    27-18 - 93.6 - 551.15 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for n in range(2, 10):
  Cluster 18
    27-19 - 93.6 - 536.9 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... for x in range(2, n):
  Cluster 19
    27-20 - 93.6 - 522.65 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... if n % x == 0:
  Cluster 20
    27-21 - 93.6 - 508.42 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(n, 'equals', x, '*', n//x)
  Cluster 21
    27-22 - 93.6 - 494.17 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ... break
    27-22 - 93.6 - 479.92 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... else:
    27-22 - 93.6 - 465.67 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... # loop fell through without finding a factor
    27-22 - 93.6 - 451.43 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(n, 'is a prime number')
    27-22 - 93.6 - 437.18 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 22
    27-23 - 93.6 - 422.93 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 2 is a prime number
  Cluster 23
    27-24 - 93.6 - 408.68 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 3 is a prime number
    27-24 - 93.6 - 394.43 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 4 equals 2 * 2
  Cluster 24
    27-25 - 93.6 - 380.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 5 is a prime number
  Cluster 25
    27-26 - 93.6 - 365.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 6 equals 2 * 3
    27-26 - 93.6 - 351.7 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 7 is a prime number
    27-26 - 93.6 - 337.45 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 8 equals 2 * 4
    27-26 - 93.6 - 323.21 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 9 equals 3 * 3
  Cluster 26
    27-27 - 93.6 - 292.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (Yes, this is the correct code. Look closely: the else clause belongs to the for loop, not the if statement.)
  Cluster 27
    27-28 - 93.6 - 270.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When used with a loop, the else clause has more in common with the else clause of a try statement than it
  Cluster 28
    27-29 - 93.6 - 254.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - does that of if statements: a try statement’s else clause runs when no exception occurs, and a loop’s else
  Cluster 29
    27-30 - 93.6 - 239.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - clause runs when no break occurs. For more on the try statement and exceptions, see Handling Exceptions.
  Cluster 30
    27-31 - 93.6 - 217.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The continue statement, also borrowed from C, continues with the next iteration of the loop:
  Cluster 31
    27-32 - 93.6 - 191.36 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for num in range(2, 10):
  Cluster 32
    27-33 - 93.6 - 177.11 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... if num % 2 == 0:
  Cluster 33
    27-34 - 93.6 - 162.86 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("Found an even number", num)
    27-34 - 93.6 - 148.62 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ... continue
  Cluster 34
    27-35 - 93.6 - 134.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("Found a number", num)
  Cluster 35
    27-36 - 93.6 - 120.13 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Found an even number 2
  Cluster 36
    27-37 - 583.05 - 103.67 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 37
    27-38 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 4.4. break and continue Statements, and else Clauses on Loops 21
Page 28
  Cluster 0
    28-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    28-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    28-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Found a number 3
  Cluster 3
    28-4 - 93.6 - 890.54 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Found an even number 4
  Cluster 4
    28-5 - 93.6 - 876.29 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Found a number 5
  Cluster 5
    28-6 - 93.6 - 862.04 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Found an even number 6
    28-6 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Found a number 7
  Cluster 6
    28-7 - 93.6 - 833.56 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Found an even number 8
  Cluster 7
    28-8 - 93.6 - 819.31 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Found a number 9
  Cluster 8
    28-9 - 93.6 - 761.31 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 4.5 pass Statements
  Cluster 9
    28-10 - 93.6 - 724.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The pass statement does nothing. It can be used when a statement is required syntactically but the program
  Cluster 10
    28-11 - 93.6 - 709.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - requires no action. For example:
  Cluster 11
    28-12 - 93.6 - 683.14 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> while True:
  Cluster 12
    28-13 - 93.6 - 668.89 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... pass # Busy-wait for keyboard interrupt (Ctrl+C)
  Cluster 13
    28-14 - 93.6 - 654.64 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 14
    28-15 - 93.6 - 623.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This is commonly used for creating minimal classes:
  Cluster 15
    28-16 - 93.6 - 597.92 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> class MyEmptyClass:
  Cluster 16
    28-17 - 93.6 - 583.67 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ... pass
  Cluster 17
    28-18 - 93.6 - 569.43 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 18
    28-19 - 93.6 - 538.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Another place pass can be used is as a place-holder for a function or conditional body when you are working
  Cluster 19
    28-20 - 93.6 - 523.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - on new code, allowing you to keep thinking at a more abstract level. The pass is silently ignored:
  Cluster 20
    28-21 - 93.6 - 497.16 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> def initlog(*args):
  Cluster 21
    28-22 - 93.6 - 482.91 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... pass # Remember to implement this!
    28-22 - 93.6 - 468.66 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 22
    28-23 - 93.6 - 410.66 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 4.6 Deﬁning Functions
  Cluster 23
    28-24 - 93.6 - 373.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - We can create a function that writes the Fibonacci series to an arbitrary boundary:
  Cluster 24
    28-25 - 93.6 - 347.89 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> def fib(n): # write Fibonacci series up to n
  Cluster 25
    28-26 - 93.6 - 333.64 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... """Print a Fibonacci series up to n."""
    28-26 - 93.6 - 319.4 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... a, b = 0, 1
    28-26 - 93.6 - 305.15 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... while a < n:
    28-26 - 93.6 - 290.9 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(a, end=' ')
  Cluster 26
    28-27 - 93.6 - 276.67 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... a, b = b, a+b
  Cluster 27
    28-28 - 93.6 - 262.42 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print()
  Cluster 28
    28-29 - 93.6 - 248.17 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 29
    28-30 - 93.6 - 233.92 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # Now call the function we just defined:
    28-30 - 93.6 - 219.67 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... fib(2000)
  Cluster 30
    28-31 - 93.6 - 205.43 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597
  Cluster 31
    28-32 - 93.6 - 174.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The keyword def introduces a function deﬁnition. It must be followed by the function name and the
  Cluster 32
    28-33 - 93.6 - 159.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - parenthesized list of formal parameters. The statements that form the body of the function start at the next
  Cluster 33
    28-34 - 93.6 - 143.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - line, and must be indented.
  Cluster 34
    28-35 - 93.6 - 121.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The ﬁrst statement of the function body can optionally be a string literal; this string literal is the function’s
  Cluster 35
    28-36 - 93.6 - 106.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - documentation string, or docstring. (More about docstrings can be found in the section Documentation
  Cluster 36
    28-37 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 22 Chapter 4. More Control Flow Tools
Page 29
  Cluster 0
    29-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    29-2 - 93.6 - 923.05 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - Strings.) There are tools which use docstrings to automatically produce online or printed documentation,
  Cluster 2
    29-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - or to let the user interactively browse through code; it’s good practice to include docstrings in code that you
  Cluster 3
    29-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - write, so make a habit of it.
  Cluster 4
    29-5 - 93.6 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The execution of a function introduces a new symbol table used for the local variables of the function. More
  Cluster 5
    29-6 - 93.6 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - precisely, all variable assignments in a function store the value in the local symbol table; whereas variable
  Cluster 6
    29-7 - 93.6 - 838.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - references ﬁrst look in the local symbol table, then in the local symbol tables of enclosing functions, then in
  Cluster 7
    29-8 - 93.6 - 823.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the global symbol table, and ﬁnally in the table of built-in names. Thus, global variables cannot be directly
  Cluster 8
    29-9 - 93.6 - 807.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - assigned a value within a function (unless named in a global statement), although they may be referenced.
  Cluster 9
    29-10 - 93.6 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The actual parameters (arguments) to a function call are introduced in the local symbol table of the called
  Cluster 10
    29-11 - 93.6 - 770.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - function when it is called; thus, arguments are passed using call by value (where the value is always an object
  Cluster 11
    29-12 - 309.32 - 759.38 18.58 - ff8 - 27.896 - rgb(53, 95, 124) - 1
  Cluster 12
    29-13 - 93.6 - 754.68 29.89 - ff6 - 39.852 - rgb(0, 0, 0) - reference, not the value of the object).
  Cluster 13
    29-14 - 320.81 - 754.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When a function calls another function, a new local symbol table is
  Cluster 14
    29-15 - 93.6 - 739.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - created for that call.
  Cluster 15
    29-16 - 93.6 - 717.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A function deﬁnition introduces the function name in the current symbol table. The value of the function
  Cluster 16
    29-17 - 93.6 - 701.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - name has a type that is recognized by the interpreter as a user-deﬁned function. This value can be assigned
  Cluster 17
    29-18 - 93.6 - 686.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to another name which can then also be used as a function. This serves as a general renaming mechanism:
  Cluster 18
    29-19 - 93.6 - 660.01 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fib
  Cluster 19
    29-20 - 93.6 - 645.76 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - <function fib at 10042ed0>
  Cluster 20
    29-21 - 93.6 - 631.51 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f = fib
  Cluster 21
    29-22 - 93.6 - 617.27 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f(100)
  Cluster 22
    29-23 - 93.6 - 603.02 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0 1 1 2 3 5 8 13 21 34 55 89
  Cluster 23
    29-24 - 93.6 - 572.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Coming from other languages, you might object that fib is not a function but a procedure since it doesn’t
  Cluster 24
    29-25 - 93.6 - 556.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - return a value. In fact, even functions without a return statement do return a value, albeit a rather boring
  Cluster 25
    29-26 - 93.6 - 541.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - one. This value is called None (it’s a built-in name). Writing the value None is normally suppressed by the
  Cluster 26
    29-27 - 93.6 - 525.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - interpreter if it would be the only value written. You can see it if you really want to using print():
  Cluster 27
    29-28 - 93.6 - 499.67 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fib(0)
  Cluster 28
    29-29 - 93.6 - 485.42 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(fib(0))
    29-29 - 93.6 - 471.17 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - None
  Cluster 29
    29-30 - 93.6 - 440.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is simple to write a function that returns a list of the numbers of the Fibonacci series, instead of printing
  Cluster 30
    29-31 - 93.6 - 424.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - it:
  Cluster 31
    29-32 - 93.6 - 398.9 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> def fib2(n): # return Fibonacci series up to n
  Cluster 32
    29-33 - 93.6 - 384.66 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... """Return a list containing the Fibonacci series up to n."""
    29-33 - 93.6 - 370.41 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... result = []
    29-33 - 93.6 - 356.16 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... a, b = 0, 1
    29-33 - 93.6 - 341.91 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... while a < n:
    29-33 - 93.6 - 327.67 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... result.append(a) # see below
  Cluster 33
    29-34 - 93.6 - 313.43 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... a, b = b, a+b
  Cluster 34
    29-35 - 93.6 - 299.18 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... return result
    29-35 - 93.6 - 284.93 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 35
    29-36 - 93.6 - 270.69 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f100 = fib2(100) # call it
  Cluster 36
    29-37 - 93.6 - 256.44 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f100 # write the result
    29-37 - 93.6 - 242.19 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
  Cluster 37
    29-38 - 93.6 - 211.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This example, as usual, demonstrates some new Python features:
  Cluster 38
    29-39 - 109.42 - 189.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The return statement returns with a value from a function. return without an expression argument
  Cluster 39
    29-40 - 125.98 - 173.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - returns None. Falling oﬀ the end of a function also returns None.
  Cluster 40
    29-41 - 109.42 - 151.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The statement result.append(a) calls a method of the list object result. A method is a function
  Cluster 41
    29-42 - 125.98 - 136.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that ‘belongs’ to an object and is named obj.methodname, where obj is some object (this may be an
  Cluster 42
    29-43 - 106.86 - 116.31 15.93 - ffa - 23.912 - rgb(0, 0, 0) - 1
  Cluster 43
    29-44 - 115.92 - 112.66 23.91 - ffb - 31.88 - rgb(0, 0, 0) - Actually, call by object reference would be a better description, since if a mutable object is passed, the caller will see any
  Cluster 44
    29-45 - 93.6 - 100.36 23.91 - ffb - 31.88 - rgb(0, 0, 0) - changes the callee makes to it (items inserted into a list).
  Cluster 45
    29-46 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 4.6. Deﬁning Functions 23
Page 30
  Cluster 0
    30-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    30-2 - 125.98 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - expression), and methodname is the name of a method that is deﬁned by the object’s type. Diﬀerent
  Cluster 2
    30-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - types deﬁne diﬀerent methods. Methods of diﬀerent types may have the same name without causing
  Cluster 3
    30-4 - 125.98 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ambiguity. (It is possible to deﬁne your own object types and methods, using classes, see Classes) The
  Cluster 4
    30-5 - 125.98 - 876.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - method append() shown in the example is deﬁned for list objects; it adds a new element at the end of
  Cluster 5
    30-6 - 125.98 - 860.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the list. In this example it is equivalent to result = result + [a], but more eﬃcient.
  Cluster 6
    30-7 - 93.6 - 811.55 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 4.7 More on Deﬁning Functions
  Cluster 7
    30-8 - 93.6 - 774.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is also possible to deﬁne functions with a variable number of arguments. There are three forms, which
  Cluster 8
    30-9 - 93.6 - 759.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can be combined.
  Cluster 9
    30-10 - 93.6 - 716.53 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 4.7.1 Default Argument Values
  Cluster 10
    30-11 - 93.6 - 686.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The most useful form is to specify a default value for one or more arguments. This creates a function that
  Cluster 11
    30-12 - 93.6 - 670.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can be called with fewer arguments than it is deﬁned to allow. For example:
  Cluster 12
    30-13 - 93.6 - 644.57 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def ask_ok(prompt, retries=4, reminder='Please try again!'):
  Cluster 13
    30-14 - 118.08 - 630.32 24.89 - ffd - 35.864 - rgb(0, 112, 33) - while True:
  Cluster 14
    30-15 - 142.56 - 616.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ok = input(prompt)
  Cluster 15
    30-16 - 142.56 - 601.82 24.89 - ffd - 35.864 - rgb(0, 112, 33) - if ok in ('y', 'ye', 'yes'):

    =====
    30-16 - 167.04 - 587.57 24.82 - ffd - 35.864 - rgb(0, 112, 33) - return True
  Cluster 16
    30-17 - 142.56 - 573.34 24.89 - ffd - 35.864 - rgb(0, 112, 33) - if ok in ('n', 'no', 'nop', 'nope'):
  Cluster 17
    30-18 - 142.56 - 544.84 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - retries = retries - 1

    =====
    30-18 - 167.04 - 559.09 24.82 - ffd - 35.864 - rgb(0, 112, 33) - return False
  Cluster 18
    30-19 - 142.56 - 530.6 24.89 - ffd - 35.864 - rgb(0, 112, 33) - if retries < 0:
  Cluster 19
    30-20 - 167.04 - 516.35 24.89 - ffd - 35.864 - rgb(0, 112, 33) - raise ValueError('invalid user response')
  Cluster 20
    30-21 - 142.56 - 502.1 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(reminder)
  Cluster 21
    30-22 - 93.6 - 471.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This function can be called in several ways:
  Cluster 22
    30-23 - 109.42 - 449.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • giving only the mandatory argument: ask_ok('Do you really want to quit?')
  Cluster 23
    30-24 - 109.42 - 427.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • giving one of the optional arguments: ask_ok('OK to overwrite the file?', 2)
  Cluster 24
    30-25 - 109.42 - 405.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • or even giving all arguments: ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or
  Cluster 25
    30-26 - 125.98 - 389.82 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - no!')
  Cluster 26
    30-27 - 93.6 - 367.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This example also introduces the in keyword. This tests whether or not a sequence contains a certain value.
    30-27 - 93.6 - 345.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The default values are evaluated at the point of function deﬁnition in the deﬁning scope, so that
  Cluster 27
    30-28 - 93.6 - 319.75 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - i = 5
  Cluster 28
    30-29 - 93.6 - 291.25 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def f(arg=i):
  Cluster 29
    30-30 - 118.08 - 277.0 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(arg)
  Cluster 30
    30-31 - 93.6 - 248.51 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - i = 6
  Cluster 31
    30-32 - 93.6 - 234.26 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - f()
  Cluster 32
    30-33 - 93.6 - 203.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - will print 5.
  Cluster 33
    30-34 - 93.6 - 181.56 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - Important warning: The default value is evaluated only once. This makes a diﬀerence when the default is
  Cluster 34
    30-35 - 93.6 - 166.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a mutable object such as a list, dictionary, or instances of most classes. For example, the following function
  Cluster 35
    30-36 - 93.6 - 150.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - accumulates the arguments passed to it on subsequent calls:
  Cluster 36
    30-37 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 24 Chapter 4. More Control Flow Tools
Page 31
  Cluster 0
    31-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    31-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def f(a, L=[]):
  Cluster 2
    31-3 - 118.08 - 902.2 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - L.append(a)
  Cluster 3
    31-4 - 118.08 - 887.95 24.89 - ffd - 35.864 - rgb(0, 112, 33) - return L
  Cluster 4
    31-5 - 93.6 - 859.46 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(f(1))
  Cluster 5
    31-6 - 93.6 - 845.21 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(f(2))
  Cluster 6
    31-7 - 93.6 - 830.96 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(f(3))
  Cluster 7
    31-8 - 93.6 - 800.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This will print
  Cluster 8
    31-9 - 93.6 - 774.24 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - [1]
  Cluster 9
    31-10 - 93.6 - 759.99 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - [1, 2]
  Cluster 10
    31-11 - 93.6 - 745.75 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - [1, 2, 3]
  Cluster 11
    31-12 - 93.6 - 715.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you don’t want the default to be shared between subsequent calls, you can write the function like this
  Cluster 12
    31-13 - 93.6 - 699.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - instead:
  Cluster 13
    31-14 - 93.6 - 673.48 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def f(a, L=None):
  Cluster 14
    31-15 - 118.08 - 659.23 24.89 - ffd - 35.864 - rgb(0, 112, 33) - if L is None:
  Cluster 15
    31-16 - 142.56 - 644.98 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - L = []
  Cluster 16
    31-17 - 118.08 - 630.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - L.append(a)
  Cluster 17
    31-18 - 118.08 - 616.49 24.89 - ffd - 35.864 - rgb(0, 112, 33) - return L
  Cluster 18
    31-19 - 93.6 - 565.06 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 4.7.2 Keyword Arguments
  Cluster 19
    31-20 - 93.6 - 534.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Functions can also be called using keyword arguments of the form kwarg=value. For instance, the following
  Cluster 20
    31-21 - 93.6 - 519.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - function:
  Cluster 21
    31-22 - 93.6 - 493.1 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
  Cluster 22
    31-23 - 118.08 - 478.86 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("-- This parrot wouldn't", action, end=' ')
    31-23 - 118.08 - 464.61 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("if you put", voltage, "volts through it.")
  Cluster 23
    31-24 - 118.08 - 450.36 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("-- Lovely plumage, the", type)
  Cluster 24
    31-25 - 118.08 - 436.11 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("-- It's", state, "!")
  Cluster 25
    31-26 - 93.6 - 405.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - accepts one required argument (voltage) and three optional arguments (state, action, and type). This
  Cluster 26
    31-27 - 93.6 - 389.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - function can be called in any of the following ways:
  Cluster 27
    31-28 - 93.6 - 363.84 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - parrot(1000) # 1 positional argument
  Cluster 28
    31-29 - 93.6 - 349.6 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - parrot(voltage=1000) # 1 keyword argument
    31-29 - 93.6 - 335.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - parrot(voltage=1000000, action='VOOOOOM') # 2 keyword arguments
    31-29 - 93.6 - 321.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - parrot(action='VOOOOOM', voltage=1000000) # 2 keyword arguments
  Cluster 29
    31-30 - 93.6 - 306.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - parrot('a million', 'bereft of life', 'jump') # 3 positional arguments
  Cluster 30
    31-31 - 93.6 - 292.6 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - parrot('a thousand', state='pushing up the daisies') # 1 positional, 1 keyword
  Cluster 31
    31-32 - 93.6 - 261.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - but all the following calls would be invalid:
  Cluster 32
    31-33 - 93.6 - 235.88 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - parrot() # required argument missing
  Cluster 33
    31-34 - 93.6 - 221.64 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - parrot(voltage=5.0, 'dead') # non-keyword argument after a keyword argument
    31-34 - 93.6 - 207.39 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - parrot(110, voltage=220) # duplicate value for the same argument
  Cluster 34
    31-35 - 93.6 - 193.14 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - parrot(actor='John Cleese') # unknown keyword argument
  Cluster 35
    31-36 - 93.6 - 162.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In a function call, keyword arguments must follow positional arguments. All the keyword arguments
  Cluster 36
    31-37 - 93.6 - 146.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - passed must match one of the arguments accepted by the function (e.g. actor is not a valid argument
  Cluster 37
    31-38 - 93.6 - 131.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - for the parrot function), and their order is not important. This also includes non-optional arguments (e.g.
  Cluster 38
    31-39 - 93.6 - 115.82 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - parrot(voltage=1000) is valid too). No argument may receive a value more than once. Here’s an example
  Cluster 39
    31-40 - 93.6 - 100.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that fails due to this restriction:
  Cluster 40
    31-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 4.7. More on Deﬁning Functions 25
Page 32
  Cluster 0
    32-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    32-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> def function(a):
  Cluster 2
    32-3 - 93.6 - 902.2 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ... pass
  Cluster 3
    32-4 - 93.6 - 887.95 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    32-4 - 93.6 - 873.7 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> function(0, a=0)
  Cluster 4
    32-5 - 93.6 - 859.46 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
  Cluster 5
    32-6 - 105.83 - 845.21 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
  Cluster 6
    32-7 - 93.6 - 830.96 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - TypeError: function() got multiple values for keyword argument 'a'
  Cluster 7
    32-8 - 93.6 - 800.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When a ﬁnal formal parameter of the form **name is present, it receives a dictionary (see typesmapping)
  Cluster 8
    32-9 - 93.6 - 784.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - containing all keyword arguments except for those corresponding to a formal parameter. This may be
  Cluster 9
    32-10 - 93.6 - 769.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - combined with a formal parameter of the form *name (described in the next subsection) which receives
  Cluster 10
    32-11 - 93.6 - 753.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a tuple containing the positional arguments beyond the formal parameter list. (*name must occur before
  Cluster 11
    32-12 - 93.6 - 738.1 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - **name.) For example, if we deﬁne a function like this:
  Cluster 12
    32-13 - 93.6 - 712.08 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def cheeseshop(kind, *arguments, **keywords):
  Cluster 13
    32-14 - 118.08 - 697.83 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("-- Do you have any", kind, "?")
    32-14 - 118.08 - 683.58 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("-- I'm sorry, we're all out of", kind)
  Cluster 14
    32-15 - 118.08 - 669.33 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for arg in arguments:
  Cluster 15
    32-16 - 142.56 - 655.08 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(arg)
  Cluster 16
    32-17 - 118.08 - 640.84 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("-" * 40)
  Cluster 17
    32-18 - 118.08 - 626.59 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for kw in keywords:
  Cluster 18
    32-19 - 142.56 - 612.34 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(kw, ":", keywords[kw])
  Cluster 19
    32-20 - 93.6 - 581.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It could be called like this:
  Cluster 20
    32-21 - 93.6 - 555.62 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - cheeseshop("Limburger", "It's very runny, sir.",
  Cluster 21
    32-22 - 160.91 - 541.37 24.89 - ff7 - 35.864 - rgb(64, 112, 161) - "It's really very, VERY runny, sir.",
  Cluster 22
    32-23 - 160.91 - 527.12 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - shopkeeper="Michael Palin",
  Cluster 23
    32-24 - 160.91 - 512.88 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - client="John Cleese",
  Cluster 24
    32-25 - 160.91 - 498.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - sketch="Cheese Shop Sketch")
  Cluster 25
    32-26 - 93.6 - 467.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and of course it would print:
  Cluster 26
    32-27 - 93.6 - 441.91 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - -- Do you have any Limburger ?
  Cluster 27
    32-28 - 93.6 - 427.66 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - -- I'm sorry, we're all out of Limburger
    32-28 - 93.6 - 413.41 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - It's very runny, sir.
    32-28 - 93.6 - 399.17 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - It's really very, VERY runny, sir.
  Cluster 28
    32-29 - 93.6 - 384.92 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ----------------------------------------
  Cluster 29
    32-30 - 93.6 - 370.67 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - shopkeeper : Michael Palin
    32-30 - 93.6 - 356.42 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - client : John Cleese
    32-30 - 93.6 - 342.17 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - sketch : Cheese Shop Sketch
  Cluster 30
    32-31 - 93.6 - 311.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that the order in which the keyword arguments are printed is guaranteed to match the order in which
  Cluster 31
    32-32 - 93.6 - 295.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - they were provided in the function call.
  Cluster 32
    32-33 - 93.6 - 253.19 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 4.7.3 Arbitrary Argument Lists
  Cluster 33
    32-34 - 93.6 - 222.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Finally, the least frequently used option is to specify that a function can be called with an arbitrary number
  Cluster 34
    32-35 - 93.6 - 207.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of arguments. These arguments will be wrapped up in a tuple (see Tuples and Sequences). Before the
  Cluster 35
    32-36 - 93.6 - 191.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - variable number of arguments, zero or more normal arguments may occur.
  Cluster 36
    32-37 - 93.6 - 165.69 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def write_multiple_items(file, separator, *args):
  Cluster 37
    32-38 - 118.08 - 151.44 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - file.write(separator.join(args))
  Cluster 38
    32-39 - 93.6 - 120.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Normally, these variadic arguments will be last in the list of formal parameters, because they scoop up
  Cluster 39
    32-40 - 93.6 - 105.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - all remaining input arguments that are passed to the function. Any formal parameters which occur after
  Cluster 40
    32-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 26 Chapter 4. More Control Flow Tools
Page 33
  Cluster 0
    33-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    33-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the *args parameter are ‘keyword-only’ arguments, meaning that they can only be used as keywords rather
  Cluster 2
    33-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - than positional arguments.
  Cluster 3
    33-4 - 93.6 - 881.48 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> def concat(*args, sep="/"):
  Cluster 4
    33-5 - 93.6 - 867.23 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... return sep.join(args)
  Cluster 5
    33-6 - 93.6 - 852.98 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 6
    33-7 - 93.6 - 838.73 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> concat("earth", "mars", "venus")
  Cluster 7
    33-8 - 93.6 - 824.49 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'earth/mars/venus'
  Cluster 8
    33-9 - 93.6 - 810.24 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> concat("earth", "mars", "venus", sep=".")
  Cluster 9
    33-10 - 93.6 - 795.99 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'earth.mars.venus'
  Cluster 10
    33-11 - 93.6 - 744.56 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 4.7.4 Unpacking Argument Lists
  Cluster 11
    33-12 - 93.6 - 714.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for
  Cluster 12
    33-13 - 93.6 - 698.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a function call requiring separate positional arguments. For instance, the built-in range() function expects
  Cluster 13
    33-14 - 93.6 - 683.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - separate start and stop arguments. If they are not available separately, write the function call with the
  Cluster 14
    33-15 - 93.6 - 667.55 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - *-operator to unpack the arguments out of a list or tuple:
  Cluster 15
    33-16 - 93.6 - 641.52 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> list(range(3, 6)) # normal call with separate arguments
  Cluster 16
    33-17 - 93.6 - 627.28 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [3, 4, 5]
  Cluster 17
    33-18 - 93.6 - 613.03 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> args = [3, 6]
  Cluster 18
    33-19 - 93.6 - 598.78 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> list(range(*args)) # call with arguments unpacked from a list
  Cluster 19
    33-20 - 93.6 - 584.53 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [3, 4, 5]
  Cluster 20
    33-21 - 93.6 - 553.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In the same fashion, dictionaries can deliver keyword arguments with the **-operator:
  Cluster 21
    33-22 - 93.6 - 527.81 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> def parrot(voltage, state='a stiff', action='voom'):
  Cluster 22
    33-23 - 93.6 - 513.57 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("-- This parrot wouldn't", action, end=' ')
  Cluster 23
    33-24 - 93.6 - 499.32 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("if you put", voltage, "volts through it.", end=' ')
  Cluster 24
    33-25 - 93.6 - 485.07 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("E's", state, "!")
    33-25 - 93.6 - 470.82 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 25
    33-26 - 93.6 - 456.57 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
  Cluster 26
    33-27 - 93.6 - 442.32 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> parrot(**d)
    33-27 - 93.6 - 428.08 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !
  Cluster 27
    33-28 - 93.6 - 376.65 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 4.7.5 Lambda Expressions
  Cluster 28
    33-29 - 93.6 - 346.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Small anonymous functions can be created with the lambda keyword. This function returns the sum of its
  Cluster 29
    33-30 - 93.6 - 330.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - two arguments: lambda a, b: a+b. Lambda functions can be used wherever function objects are required.
  Cluster 30
    33-31 - 93.6 - 315.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - They are syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a
  Cluster 31
    33-32 - 93.6 - 299.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - normal function deﬁnition. Like nested function deﬁnitions, lambda functions can reference variables from
  Cluster 32
    33-33 - 93.6 - 284.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the containing scope:
  Cluster 33
    33-34 - 93.6 - 258.06 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> def make_incrementor(n):
  Cluster 34
    33-35 - 93.6 - 243.81 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... return lambda x: x + n
    33-35 - 93.6 - 229.57 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 35
    33-36 - 93.6 - 215.32 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f = make_incrementor(42)
  Cluster 36
    33-37 - 93.6 - 201.08 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f(0)
  Cluster 37
    33-38 - 93.6 - 186.84 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 42
  Cluster 38
    33-39 - 93.6 - 172.59 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f(1)
  Cluster 39
    33-40 - 93.6 - 158.34 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 43
  Cluster 40
    33-41 - 93.6 - 127.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The above example uses a lambda expression to return a function. Another use is to pass a small function
  Cluster 41
    33-42 - 93.6 - 112.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as an argument:
  Cluster 42
    33-43 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 4.7. More on Deﬁning Functions 27
Page 34
  Cluster 0
    34-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    34-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
  Cluster 2
    34-3 - 93.6 - 902.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> pairs.sort(key=lambda pair: pair[1])
  Cluster 3
    34-4 - 93.6 - 887.95 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> pairs
    34-4 - 93.6 - 873.7 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
  Cluster 4
    34-5 - 93.6 - 822.55 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 4.7.6 Documentation Strings
  Cluster 5
    34-6 - 93.6 - 792.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Here are some conventions about the content and formatting of documentation strings.
  Cluster 6
    34-7 - 93.6 - 770.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The ﬁrst line should always be a short, concise summary of the object’s purpose. For brevity, it should
  Cluster 7
    34-8 - 93.6 - 754.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - not explicitly state the object’s name or type, since these are available by other means (except if the name
  Cluster 8
    34-9 - 93.6 - 739.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - happens to be a verb describing a function’s operation). This line should begin with a capital letter and end
  Cluster 9
    34-10 - 93.6 - 723.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with a period.
  Cluster 10
    34-11 - 93.6 - 701.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If there are more lines in the documentation string, the second line should be blank, visually separating the
  Cluster 11
    34-12 - 93.6 - 685.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - summary from the rest of the description. The following lines should be one or more paragraphs describing
  Cluster 12
    34-13 - 93.6 - 670.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the object’s calling conventions, its side eﬀects, etc.
  Cluster 13
    34-14 - 93.6 - 648.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The Python parser does not strip indentation from multi-line string literals in Python, so tools that process
  Cluster 14
    34-15 - 93.6 - 632.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - documentation have to strip indentation if desired. This is done using the following convention. The
  Cluster 15
    34-16 - 93.6 - 617.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁrst non-blank line after the ﬁrst line of the string determines the amount of indentation for the entire
  Cluster 16
    34-17 - 93.6 - 601.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - documentation string. (We can’t use the ﬁrst line since it is generally adjacent to the string’s opening quotes
  Cluster 17
    34-18 - 93.6 - 586.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - so its indentation is not apparent in the string literal.) Whitespace “equivalent” to this indentation is then
  Cluster 18
    34-19 - 93.6 - 570.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - stripped from the start of all lines of the string. Lines that are indented less should not occur, but if they
  Cluster 19
    34-20 - 93.6 - 555.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - occur all their leading whitespace should be stripped. Equivalence of whitespace should be tested after
  Cluster 20
    34-21 - 93.6 - 539.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - expansion of tabs (to 8 spaces, normally).
  Cluster 21
    34-22 - 93.6 - 517.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Here is an example of a multi-line docstring:
  Cluster 22
    34-23 - 93.6 - 491.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> def my_function():
  Cluster 23
    34-24 - 93.6 - 477.63 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... """Do nothing, but document it.
    34-24 - 93.6 - 463.38 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    34-24 - 93.6 - 449.14 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... No, really, it doesn't do anything.
    34-24 - 93.6 - 434.89 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... """
    34-24 - 93.6 - 420.64 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ... pass
  Cluster 24
    34-25 - 93.6 - 406.39 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 25
    34-26 - 93.6 - 392.14 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(my_function.__doc__)
    34-26 - 93.6 - 377.9 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Do nothing, but document it.
  Cluster 26
    34-27 - 118.08 - 349.41 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - No, really, it doesn't do anything.
  Cluster 27
    34-28 - 93.6 - 298.26 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 4.7.7 Function Annotations
  Cluster 28
    34-29 - 93.6 - 267.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Function annotations are completely optional metadata information about the types used by user-deﬁned
  Cluster 29
    34-30 - 93.6 - 252.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - functions (see PEP 3107 and PEP 484 for more information).
  Cluster 30
    34-31 - 93.6 - 230.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Annotations are stored in the __annotations__ attribute of the function as a dictionary and have no eﬀect
  Cluster 31
    34-32 - 93.6 - 214.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - on any other part of the function. Parameter annotations are deﬁned by a colon after the parameter name,
  Cluster 32
    34-33 - 93.6 - 199.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - followed by an expression evaluating to the value of the annotation. Return annotations are deﬁned by a
  Cluster 33
    34-34 - 93.6 - 183.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - literal ->, followed by an expression, between the parameter list and the colon denoting the end of the def
  Cluster 34
    34-35 - 93.6 - 168.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - statement. The following example has a positional argument, a keyword argument, and the return value
  Cluster 35
    34-36 - 93.6 - 152.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - annotated:
  Cluster 36
    34-37 - 93.6 - 126.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> def f(ham: str, eggs: str = 'eggs') -> str:
  Cluster 37
    34-38 - 93.6 - 112.64 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("Annotations:", f.__annotations__)
  Cluster 38
    34-39 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 39
    34-40 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 28 Chapter 4. More Control Flow Tools
Page 35
  Cluster 0
    35-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    35-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    35-3 - 93.6 - 904.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("Arguments:", ham, eggs)
  Cluster 3
    35-4 - 93.6 - 890.54 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... return ham + ' and ' + eggs
  Cluster 4
    35-5 - 93.6 - 876.29 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 5
    35-6 - 93.6 - 862.04 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f('spam')
    35-6 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}
  Cluster 6
    35-7 - 93.6 - 833.56 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Arguments: spam eggs
  Cluster 7
    35-8 - 93.6 - 819.31 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'spam and eggs'
  Cluster 8
    35-9 - 93.6 - 761.31 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 4.8 Intermezzo: Coding Style
  Cluster 9
    35-10 - 93.6 - 724.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Now that you are about to write longer, more complex pieces of Python, it is a good time to talk about
  Cluster 10
    35-11 - 93.6 - 709.03 29.89 - ff6 - 39.852 - rgb(0, 0, 0) - coding style. Most languages can be written (or more concise, formatted) in diﬀerent styles; some are more
  Cluster 11
    35-12 - 93.6 - 693.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - readable than others. Making it easy for others to read your code is always a good idea, and adopting a nice
  Cluster 12
    35-13 - 93.6 - 677.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - coding style helps tremendously for that.
  Cluster 13
    35-14 - 93.6 - 655.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For Python, PEP 8 has emerged as the style guide that most projects adhere to; it promotes a very
  Cluster 14
    35-15 - 93.6 - 640.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - readable and eye-pleasing coding style. Every Python developer should read it at some point; here are the
  Cluster 15
    35-16 - 93.6 - 624.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - most important points extracted for you:
  Cluster 16
    35-17 - 109.42 - 602.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Use 4-space indentation, and no tabs.
  Cluster 17
    35-18 - 125.98 - 580.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 4 spaces are a good compromise between small indentation (allows greater nesting depth) and large
  Cluster 18
    35-19 - 125.98 - 565.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - indentation (easier to read). Tabs introduce confusion, and are best left out.
  Cluster 19
    35-20 - 109.42 - 543.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Wrap lines so that they don’t exceed 79 characters.
  Cluster 20
    35-21 - 125.98 - 521.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This helps users with small displays and makes it possible to have several code ﬁles side-by-side on
  Cluster 21
    35-22 - 125.98 - 505.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - larger displays.
  Cluster 22
    35-23 - 109.42 - 483.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Use blank lines to separate functions and classes, and larger blocks of code inside functions.
  Cluster 23
    35-24 - 109.42 - 461.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • When possible, put comments on a line of their own.
    35-24 - 109.42 - 439.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Use docstrings.
  Cluster 24
    35-25 - 109.42 - 417.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Use spaces around operators and after commas, but not directly inside bracketing constructs: a =
  Cluster 25
    35-26 - 125.98 - 402.08 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - f(1, 2) + g(3, 4).
  Cluster 26
    35-27 - 109.42 - 380.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Name your classes and functions consistently; the convention is to use CamelCase for classes and
  Cluster 27
    35-28 - 125.98 - 364.52 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - lower_case_with_underscores for functions and methods. Always use self as the name for the ﬁrst
  Cluster 28
    35-29 - 125.98 - 348.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - method argument (see A First Look at Classes for more on classes and methods).
  Cluster 29
    35-30 - 109.42 - 326.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Don’t use fancy encodings if your code is meant to be used in international environments. Python’s
  Cluster 30
    35-31 - 125.98 - 311.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - default, UTF-8, or even plain ASCII work best in any case.
  Cluster 31
    35-32 - 109.42 - 289.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Likewise, don’t use non-ASCII characters in identiﬁers if there is only the slightest chance people
  Cluster 32
    35-33 - 125.98 - 273.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - speaking a diﬀerent language will read or maintain the code.
  Cluster 33
    35-34 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 4.8. Intermezzo: Coding Style 29
Page 36
  Cluster 0
    36-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    36-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 30 Chapter 4. More Control Flow Tools
Page 37
  Cluster 0
    37-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    37-2 - 658.79 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - FIVE
  Cluster 2
    37-3 - 513.41 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - DATA STRUCTURES
  Cluster 3
    37-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This chapter describes some things you’ve learned about already in more detail, and adds some new things
  Cluster 4
    37-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as well.
  Cluster 5
    37-6 - 93.6 - 663.91 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 5.1 More on Lists
  Cluster 6
    37-7 - 93.6 - 627.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The list data type has some more methods. Here are all of the methods of list objects:
  Cluster 7
    37-8 - 93.6 - 605.16 28.53 - ff5 - 39.852 - rgb(0, 0, 0) - list.append(x)
  Cluster 8
    37-9 - 125.98 - 589.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Add an item to the end of the list. Equivalent to a[len(a):] = [x].
  Cluster 9
    37-10 - 93.6 - 567.59 28.53 - ff5 - 39.852 - rgb(0, 0, 0) - list.extend(iterable)
  Cluster 10
    37-11 - 125.98 - 552.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable.
  Cluster 11
    37-12 - 93.6 - 530.04 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - list.insert(i, x)
  Cluster 12
    37-13 - 125.98 - 514.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Insert an item at a given position. The ﬁrst argument is the index of the element before which to
  Cluster 13
    37-14 - 125.98 - 498.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to
  Cluster 14
    37-15 - 125.98 - 483.42 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - a.append(x).
  Cluster 15
    37-16 - 93.6 - 461.4 28.53 - ff5 - 39.852 - rgb(0, 0, 0) - list.remove(x)
  Cluster 16
    37-17 - 125.98 - 445.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Remove the ﬁrst item from the list whose value is equal to x. It raises a ValueError if there is no such
  Cluster 17
    37-18 - 125.98 - 430.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - item.
  Cluster 18
    37-19 - 93.6 - 408.29 43.04 - ff5 - 39.852 - rgb(0, 0, 0) - list.pop([i ])
  Cluster 19
    37-20 - 125.98 - 392.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Remove the item at the given position in the list, and return it. If no index is speciﬁed, a.pop() removes
  Cluster 20
    37-21 - 125.98 - 377.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and returns the last item in the list. (The square brackets around the i in the method signature denote
  Cluster 21
    37-22 - 125.98 - 361.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that the parameter is optional, not that you should type square brackets at that position. You will see
  Cluster 22
    37-23 - 125.98 - 346.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - this notation frequently in the Python Library Reference.)
  Cluster 23
    37-24 - 93.6 - 324.12 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - list.clear()
  Cluster 24
    37-25 - 125.98 - 308.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Remove all items from the list. Equivalent to del a[:].
  Cluster 25
    37-26 - 93.6 - 284.3 43.04 - ff5 - 39.852 - rgb(0, 0, 0) - list.index(x[, start[, end ]])
  Cluster 26
    37-27 - 125.98 - 268.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Return zero-based index in the list of the ﬁrst item whose value is equal to x. Raises a ValueError if
  Cluster 27
    37-28 - 125.98 - 253.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - there is no such item.
  Cluster 28
    37-29 - 125.98 - 231.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The optional arguments start and end are interpreted as in the slice notation and are used to limit the
  Cluster 29
    37-30 - 125.98 - 215.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - search to a particular subsequence of the list. The returned index is computed relative to the beginning
    37-30 - 125.98 - 200.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the full sequence rather than the start argument.
  Cluster 30
    37-31 - 93.6 - 178.1 28.53 - ff5 - 39.852 - rgb(0, 0, 0) - list.count(x)
  Cluster 31
    37-32 - 125.98 - 162.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Return the number of times x appears in the list.
  Cluster 32
    37-33 - 93.6 - 140.54 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - list.sort(key=None, reverse=False)
  Cluster 33
    37-34 - 125.98 - 125.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for
  Cluster 34
    37-35 - 125.98 - 109.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - their explanation).
  Cluster 35
    37-36 - 687.75 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 31
Page 38
  Cluster 0
    38-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    38-2 - 93.6 - 923.05 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - list.reverse()
  Cluster 2
    38-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Reverse the elements of the list in place.
  Cluster 3
    38-4 - 93.6 - 885.5 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - list.copy()
  Cluster 4
    38-5 - 125.98 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Return a shallow copy of the list. Equivalent to a[:].
  Cluster 5
    38-6 - 93.6 - 847.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - An example that uses most of the list methods:
  Cluster 6
    38-7 - 93.6 - 821.9 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']
  Cluster 7
    38-8 - 93.6 - 807.65 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits.count('apple')
  Cluster 8
    38-9 - 93.6 - 793.4 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 2
  Cluster 9
    38-10 - 93.6 - 779.15 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits.count('tangerine')
  Cluster 10
    38-11 - 93.6 - 764.91 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0
  Cluster 11
    38-12 - 93.6 - 750.66 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits.index('banana')
  Cluster 12
    38-13 - 93.6 - 736.42 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 3
  Cluster 13
    38-14 - 93.6 - 722.18 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits.index('banana', 4) # Find next banana starting a position 4
  Cluster 14
    38-15 - 93.6 - 707.93 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 6
    38-15 - 93.6 - 693.68 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits.reverse()
  Cluster 15
    38-16 - 93.6 - 679.43 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits
  Cluster 16
    38-17 - 93.6 - 665.18 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']
  Cluster 17
    38-18 - 93.6 - 650.94 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits.append('grape')
  Cluster 18
    38-19 - 93.6 - 636.69 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits
  Cluster 19
    38-20 - 93.6 - 622.44 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']
  Cluster 20
    38-21 - 93.6 - 608.21 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits.sort()
  Cluster 21
    38-22 - 93.6 - 593.96 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits
    38-22 - 93.6 - 579.71 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']
  Cluster 22
    38-23 - 93.6 - 565.46 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fruits.pop()
  Cluster 23
    38-24 - 93.6 - 551.21 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'pear'
  Cluster 24
    38-25 - 93.6 - 520.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - You might have noticed that methods like insert, remove or sort that only modify the list have no return
  Cluster 25
    38-26 - 350.77 - 509.68 18.58 - ff8 - 27.896 - rgb(53, 95, 124) - 1
  Cluster 26
    38-27 - 93.6 - 504.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - value printed – they return the default None.
  Cluster 27
    38-28 - 363.39 - 504.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This is a design principle for all mutable data structures in
  Cluster 28
    38-29 - 93.6 - 489.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python.
  Cluster 29
    38-30 - 93.6 - 446.68 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 5.1.1 Using Lists as Stacks
  Cluster 30
    38-31 - 93.6 - 416.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The list methods make it very easy to use a list as a stack, where the last element added is the ﬁrst element
  Cluster 31
    38-32 - 93.6 - 400.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - retrieved (“last-in, ﬁrst-out”). To add an item to the top of the stack, use append(). To retrieve an item
  Cluster 32
    38-33 - 93.6 - 385.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - from the top of the stack, use pop() without an explicit index. For example:
  Cluster 33
    38-34 - 93.6 - 359.18 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> stack = [3, 4, 5]
  Cluster 34
    38-35 - 93.6 - 344.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> stack.append(6)
  Cluster 35
    38-36 - 93.6 - 330.68 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> stack.append(7)
    38-36 - 93.6 - 316.43 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> stack
  Cluster 36
    38-37 - 93.6 - 302.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [3, 4, 5, 6, 7]
  Cluster 37
    38-38 - 93.6 - 287.95 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> stack.pop()
    38-38 - 93.6 - 273.7 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 7
    38-38 - 93.6 - 259.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> stack
  Cluster 38
    38-39 - 93.6 - 245.21 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [3, 4, 5, 6]
  Cluster 39
    38-40 - 93.6 - 230.96 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> stack.pop()
    38-40 - 93.6 - 216.71 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 6
  Cluster 40
    38-41 - 93.6 - 202.46 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> stack.pop()
  Cluster 41
    38-42 - 93.6 - 188.21 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 5
  Cluster 42
    38-43 - 93.6 - 173.98 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> stack
  Cluster 43
    38-44 - 93.6 - 159.73 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [3, 4]
  Cluster 44
    38-45 - 106.86 - 134.22 15.93 - ffa - 23.912 - rgb(0, 0, 0) - 1
  Cluster 45
    38-46 - 115.92 - 130.57 23.91 - ffb - 31.88 - rgb(0, 0, 0) - Other languages may return the mutated object, which allows method chaining, such as
  Cluster 46
    38-47 - 93.6 - 118.26 23.91 - ffc - 31.88 - rgb(0, 0, 0) - d->insert("a")->remove("b")->sort();.
  Cluster 47
    38-48 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 32 Chapter 5. Data Structures
Page 39
  Cluster 0
    39-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    39-2 - 93.6 - 923.05 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 5.1.2 Using Lists as Queues
  Cluster 2
    39-3 - 93.6 - 892.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is also possible to use a list as a queue, where the ﬁrst element added is the ﬁrst element retrieved (“ﬁrst-in,
  Cluster 3
    39-4 - 93.6 - 877.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁrst-out”); however, lists are not eﬃcient for this purpose. While appends and pops from the end of list are
  Cluster 4
    39-5 - 93.6 - 861.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be
  Cluster 5
    39-6 - 93.6 - 846.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - shifted by one).
  Cluster 6
    39-7 - 93.6 - 824.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To implement a queue, use collections.deque which was designed to have fast appends and pops from
  Cluster 7
    39-8 - 93.6 - 808.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - both ends. For example:
  Cluster 8
    39-9 - 93.6 - 782.44 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from collections import deque
  Cluster 9
    39-10 - 93.6 - 768.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> queue = deque(["Eric", "John", "Michael"])
  Cluster 10
    39-11 - 93.6 - 753.95 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> queue.append("Terry") # Terry arrives
  Cluster 11
    39-12 - 93.6 - 739.7 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> queue.append("Graham") # Graham arrives
  Cluster 12
    39-13 - 93.6 - 725.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> queue.popleft() # The first to arrive now leaves
    39-13 - 93.6 - 711.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Eric'
  Cluster 13
    39-14 - 93.6 - 696.96 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> queue.popleft() # The second to arrive now leaves
  Cluster 14
    39-15 - 93.6 - 682.72 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'John'
  Cluster 15
    39-16 - 93.6 - 668.47 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> queue # Remaining queue in order of arrival
  Cluster 16
    39-17 - 93.6 - 654.23 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - deque(['Michael', 'Terry', 'Graham'])
  Cluster 17
    39-18 - 93.6 - 602.8 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 5.1.3 List Comprehensions
  Cluster 18
    39-19 - 93.6 - 572.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - List comprehensions provide a concise way to create lists. Common applications are to make new lists where
  Cluster 19
    39-20 - 93.6 - 556.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - each element is the result of some operations applied to each member of another sequence or iterable, or to
  Cluster 20
    39-21 - 93.6 - 541.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - create a subsequence of those elements that satisfy a certain condition.
  Cluster 21
    39-22 - 93.6 - 519.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For example, assume we want to create a list of squares, like:
  Cluster 22
    39-23 - 93.6 - 493.27 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> squares = []
  Cluster 23
    39-24 - 93.6 - 479.02 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for x in range(10):
    39-24 - 93.6 - 464.78 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... squares.append(x**2)
    39-24 - 93.6 - 450.53 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 24
    39-25 - 93.6 - 436.28 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> squares
  Cluster 25
    39-26 - 93.6 - 422.05 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
  Cluster 26
    39-27 - 93.6 - 391.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that this creates (or overwrites) a variable named x that still exists after the loop completes. We can
  Cluster 27
    39-28 - 93.6 - 375.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - calculate the list of squares without any side eﬀects using:
  Cluster 28
    39-29 - 93.6 - 349.76 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - squares = list(map(lambda x: x**2, range(10)))
  Cluster 29
    39-30 - 93.6 - 319.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - or, equivalently:
  Cluster 30
    39-31 - 93.6 - 293.05 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - squares = [x**2 for x in range(10)]
  Cluster 31
    39-32 - 93.6 - 262.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - which is more concise and readable.
  Cluster 32
    39-33 - 93.6 - 240.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A list comprehension consists of brackets containing an expression followed by a for clause, then zero or
  Cluster 33
    39-34 - 93.6 - 224.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - more for or if clauses. The result will be a new list resulting from evaluating the expression in the context
  Cluster 34
    39-35 - 93.6 - 209.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if
  Cluster 35
    39-36 - 93.6 - 193.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - they are not equal:
  Cluster 36
    39-37 - 93.6 - 167.67 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
  Cluster 37
    39-38 - 93.6 - 153.43 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
  Cluster 38
    39-39 - 93.6 - 122.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and it’s equivalent to:
  Cluster 39
    39-40 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 5.1. More on Lists 33
Page 40
  Cluster 0
    40-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    40-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> combs = []
  Cluster 2
    40-3 - 93.6 - 902.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for x in [1,2,3]:
  Cluster 3
    40-4 - 93.6 - 887.95 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... for y in [3,1,4]:
    40-4 - 93.6 - 873.7 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... if x != y:
  Cluster 4
    40-5 - 93.6 - 859.46 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... combs.append((x, y))
  Cluster 5
    40-6 - 93.6 - 845.21 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 6
    40-7 - 93.6 - 830.96 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> combs
  Cluster 7
    40-8 - 93.6 - 816.71 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
  Cluster 8
    40-9 - 93.6 - 786.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note how the order of the for and if statements is the same in both these snippets.
  Cluster 9
    40-10 - 93.6 - 764.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If the expression is a tuple (e.g. the (x, y) in the previous example), it must be parenthesized.
  Cluster 10
    40-11 - 93.6 - 739.01 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> vec = [-4, -2, 0, 2, 4]
  Cluster 11
    40-12 - 93.6 - 724.76 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # create a new list with the values doubled
  Cluster 12
    40-13 - 93.6 - 710.51 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> [x*2 for x in vec]
  Cluster 13
    40-14 - 93.6 - 696.27 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [-8, -4, 0, 4, 8]
  Cluster 14
    40-15 - 93.6 - 682.02 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # filter the list to exclude negative numbers
    40-15 - 93.6 - 667.77 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> [x for x in vec if x >= 0]
  Cluster 15
    40-16 - 93.6 - 653.52 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [0, 2, 4]
  Cluster 16
    40-17 - 93.6 - 639.29 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # apply a function to all the elements
  Cluster 17
    40-18 - 93.6 - 625.04 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> [abs(x) for x in vec]
  Cluster 18
    40-19 - 93.6 - 610.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [4, 2, 0, 2, 4]
  Cluster 19
    40-20 - 93.6 - 596.54 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # call a method on each element
  Cluster 20
    40-21 - 93.6 - 582.3 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> freshfruit = [' banana', ' loganberry ', 'passion fruit ']
  Cluster 21
    40-22 - 93.6 - 568.05 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> [weapon.strip() for weapon in freshfruit]
    40-22 - 93.6 - 553.8 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['banana', 'loganberry', 'passion fruit']
  Cluster 22
    40-23 - 93.6 - 539.55 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # create a list of 2-tuples like (number, square)
  Cluster 23
    40-24 - 93.6 - 525.3 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> [(x, x**2) for x in range(6)]
  Cluster 24
    40-25 - 93.6 - 511.07 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
  Cluster 25
    40-26 - 93.6 - 496.82 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # the tuple must be parenthesized, otherwise an error is raised
  Cluster 26
    40-27 - 93.6 - 482.57 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> [x, x**2 for x in range(6)]
  Cluster 27
    40-28 - 93.6 - 425.58 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - SyntaxError: invalid syntax
    40-28 - 93.6 - 411.33 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # flatten a list using a listcomp with two 'for'

    =====
    40-28 - 105.83 - 468.32 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - File "<stdin>", line 1, in <module>

    =====
    40-28 - 118.08 - 454.08 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [x, x**2 for x in range(6)]

    =====
    40-28 - 185.39 - 439.83 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ^
  Cluster 28
    40-29 - 93.6 - 397.08 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> vec = [[1,2,3], [4,5,6], [7,8,9]]
  Cluster 29
    40-30 - 93.6 - 382.85 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> [num for elem in vec for num in elem]
  Cluster 30
    40-31 - 93.6 - 368.6 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [1, 2, 3, 4, 5, 6, 7, 8, 9]
  Cluster 31
    40-32 - 93.6 - 337.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - List comprehensions can contain complex expressions and nested functions:
  Cluster 32
    40-33 - 93.6 - 312.91 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from math import pi
  Cluster 33
    40-34 - 93.6 - 298.66 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> [str(round(pi, i)) for i in range(1, 6)]
  Cluster 34
    40-35 - 93.6 - 284.41 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['3.1', '3.14', '3.142', '3.1416', '3.14159']
  Cluster 35
    40-36 - 93.6 - 233.88 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 5.1.4 Nested List Comprehensions
  Cluster 36
    40-37 - 93.6 - 203.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The initial expression in a list comprehension can be any arbitrary expression, including another list com-
  Cluster 37
    40-38 - 93.6 - 187.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - prehension.
  Cluster 38
    40-39 - 93.6 - 165.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4:
  Cluster 39
    40-40 - 93.6 - 140.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> matrix = [
  Cluster 40
    40-41 - 93.6 - 126.69 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... [1, 2, 3, 4],
  Cluster 41
    40-42 - 93.6 - 112.44 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... [5, 6, 7, 8],
  Cluster 42
    40-43 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 43
    40-44 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 34 Chapter 5. Data Structures
Page 41
  Cluster 0
    41-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    41-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    41-3 - 93.6 - 904.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... [9, 10, 11, 12],
  Cluster 3
    41-4 - 93.6 - 890.54 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... ]
  Cluster 4
    41-5 - 93.6 - 859.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The following list comprehension will transpose rows and columns:
  Cluster 5
    41-6 - 93.6 - 833.81 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> [[row[i] for row in matrix] for i in range(4)]
  Cluster 6
    41-7 - 93.6 - 819.57 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
  Cluster 7
    41-8 - 93.6 - 788.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - As we saw in the previous section, the nested listcomp is evaluated in the context of the for that follows it,
  Cluster 8
    41-9 - 93.6 - 773.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - so this example is equivalent to:
  Cluster 9
    41-10 - 93.6 - 747.29 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> transposed = []
  Cluster 10
    41-11 - 93.6 - 733.06 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for i in range(4):
  Cluster 11
    41-12 - 93.6 - 718.81 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... transposed.append([row[i] for row in matrix])
  Cluster 12
    41-13 - 93.6 - 704.56 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 13
    41-14 - 93.6 - 690.31 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> transposed
  Cluster 14
    41-15 - 93.6 - 676.07 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
  Cluster 15
    41-16 - 93.6 - 645.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - which, in turn, is the same as:
  Cluster 16
    41-17 - 93.6 - 619.33 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> transposed = []
  Cluster 17
    41-18 - 93.6 - 605.09 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for i in range(4):
  Cluster 18
    41-19 - 93.6 - 590.85 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... # the following 3 lines implement the nested listcomp
  Cluster 19
    41-20 - 93.6 - 576.6 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... transposed_row = []
  Cluster 20
    41-21 - 93.6 - 562.35 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... for row in matrix:
  Cluster 21
    41-22 - 93.6 - 548.11 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... transposed_row.append(row[i])
    41-22 - 93.6 - 533.86 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... transposed.append(transposed_row)
  Cluster 22
    41-23 - 93.6 - 519.61 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 23
    41-24 - 93.6 - 505.36 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> transposed
  Cluster 24
    41-25 - 93.6 - 491.11 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
  Cluster 25
    41-26 - 93.6 - 460.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In the real world, you should prefer built-in functions to complex ﬂow statements. The zip() function would
  Cluster 26
    41-27 - 93.6 - 444.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - do a great job for this use case:
  Cluster 27
    41-28 - 93.6 - 418.85 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> list(zip(*matrix))
  Cluster 28
    41-29 - 93.6 - 404.6 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]
  Cluster 29
    41-30 - 93.6 - 373.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See Unpacking Argument Lists for details on the asterisk in this line.
  Cluster 30
    41-31 - 93.6 - 324.58 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 5.2 The del statement
  Cluster 31
    41-32 - 93.6 - 287.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There is a way to remove an item from a list given its index instead of its value: the del statement. This
  Cluster 32
    41-33 - 93.6 - 272.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - diﬀers from the pop() method which returns a value. The del statement can also be used to remove slices
  Cluster 33
    41-34 - 93.6 - 256.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - from a list or clear the entire list (which we did earlier by assignment of an empty list to the slice). For
  Cluster 34
    41-35 - 93.6 - 241.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - example:
  Cluster 35
    41-36 - 93.6 - 215.19 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a = [-1, 1, 66.25, 333, 333, 1234.5]
  Cluster 36
    41-37 - 93.6 - 200.94 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> del a[0]
    41-37 - 93.6 - 186.69 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a
  Cluster 37
    41-38 - 93.6 - 172.44 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [1, 66.25, 333, 333, 1234.5]
  Cluster 38
    41-39 - 93.6 - 158.21 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> del a[2:4]
  Cluster 39
    41-40 - 93.6 - 143.96 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a
  Cluster 40
    41-41 - 93.6 - 129.71 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [1, 66.25, 1234.5]
  Cluster 41
    41-42 - 93.6 - 115.47 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> del a[:]
  Cluster 42
    41-43 - 583.05 - 99.02 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 43
    41-44 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 5.2. The del statement 35
Page 42
  Cluster 0
    42-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    42-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    42-3 - 93.6 - 904.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a
  Cluster 3
    42-4 - 93.6 - 890.54 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - []
  Cluster 4
    42-5 - 93.6 - 859.85 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - del can also be used to delete entire variables:
  Cluster 5
    42-6 - 93.6 - 834.18 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> del a
  Cluster 6
    42-7 - 93.6 - 803.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Referencing the name a hereafter is an error (at least until another value is assigned to it). We’ll ﬁnd other
  Cluster 7
    42-8 - 93.6 - 787.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - uses for del later.
  Cluster 8
    42-9 - 93.6 - 738.95 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 5.3 Tuples and Sequences
  Cluster 9
    42-10 - 93.6 - 702.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - We saw that lists and strings have many common properties, such as indexing and slicing operations. They
  Cluster 10
    42-11 - 206.39 - 686.82 28.53 - ff6 - 39.852 - rgb(0, 0, 0) - sequence
  Cluster 11
    42-12 - 93.6 - 686.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are two examples of
  Cluster 12
    42-13 - 257.84 - 686.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - data types (see typesseq). Since Python is an evolving language, other sequence
  Cluster 13
    42-14 - 93.6 - 671.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - data types may be added. There is also another standard sequence data type: the tuple.
  Cluster 14
    42-15 - 93.6 - 649.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A tuple consists of a number of values separated by commas, for instance:
  Cluster 15
    42-16 - 93.6 - 623.58 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> t = 12345, 54321, 'hello!'
  Cluster 16
    42-17 - 93.6 - 609.35 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> t[0]
  Cluster 17
    42-18 - 93.6 - 595.1 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 12345
    42-18 - 93.6 - 580.85 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> t
  Cluster 18
    42-19 - 93.6 - 566.61 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - (12345, 54321, 'hello!')
  Cluster 19
    42-20 - 93.6 - 552.36 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # Tuples may be nested:
  Cluster 20
    42-21 - 93.6 - 538.11 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... u = t, (1, 2, 3, 4, 5)
  Cluster 21
    42-22 - 93.6 - 523.86 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> u
  Cluster 22
    42-23 - 93.6 - 509.61 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
    42-23 - 93.6 - 495.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # Tuples are immutable:
  Cluster 23
    42-24 - 93.6 - 481.13 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... t[0] = 88888
  Cluster 24
    42-25 - 93.6 - 466.88 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
    42-25 - 93.6 - 438.39 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - TypeError: 'tuple' object does not support item assignment

    =====
    42-25 - 105.83 - 452.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
  Cluster 25
    42-26 - 93.6 - 424.14 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # but they can contain mutable objects:
  Cluster 26
    42-27 - 93.6 - 409.89 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... v = ([1, 2, 3], [3, 2, 1])
    42-27 - 93.6 - 395.64 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> v
    42-27 - 93.6 - 381.39 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ([1, 2, 3], [3, 2, 1])
  Cluster 27
    42-28 - 93.6 - 350.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted
  Cluster 28
    42-29 - 93.6 - 335.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - correctly; they may be input with or without surrounding parentheses, although often parentheses are
  Cluster 29
    42-30 - 93.6 - 319.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - necessary anyway (if the tuple is part of a larger expression). It is not possible to assign to the individual
  Cluster 30
    42-31 - 93.6 - 304.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - items of a tuple, however it is possible to create tuples which contain mutable objects, such as lists.
  Cluster 31
    42-32 - 93.6 - 282.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Though tuples may seem similar to lists, they are often used in diﬀerent situations and for diﬀerent purposes.
  Cluster 32
    42-33 - 93.6 - 266.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Tuples are immutable, and usually contain a heterogeneous sequence of elements that are accessed via
  Cluster 33
    42-34 - 93.6 - 250.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - unpacking (see later in this section) or indexing (or even by attribute in the case of namedtuples). Lists are
  Cluster 34
    42-35 - 93.6 - 235.43 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - mutable, and their elements are usually homogeneous and are accessed by iterating over the list.
  Cluster 35
    42-36 - 93.6 - 213.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to
  Cluster 36
    42-37 - 93.6 - 197.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is
  Cluster 37
    42-38 - 93.6 - 182.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - constructed by following a value with a comma (it is not suﬃcient to enclose a single value in parentheses).
  Cluster 38
    42-39 - 93.6 - 166.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Ugly, but eﬀective. For example:
  Cluster 39
    42-40 - 93.6 - 141.13 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> empty = ()
  Cluster 40
    42-41 - 93.6 - 126.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> singleton = 'hello', # <-- note trailing comma
  Cluster 41
    42-42 - 93.6 - 112.64 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> len(empty)
  Cluster 42
    42-43 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 43
    42-44 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 36 Chapter 5. Data Structures
Page 43
  Cluster 0
    43-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    43-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    43-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0
  Cluster 3
    43-4 - 93.6 - 890.54 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> len(singleton)
  Cluster 4
    43-5 - 93.6 - 876.29 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1
  Cluster 5
    43-6 - 93.6 - 862.04 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> singleton
    43-6 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ('hello',)
  Cluster 6
    43-7 - 93.6 - 817.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The statement t = 12345, 54321, 'hello!' is an example of tuple packing: the values 12345, 54321 and
  Cluster 7
    43-8 - 93.6 - 801.57 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - 'hello!' are packed together in a tuple. The reverse operation is also possible:
  Cluster 8
    43-9 - 93.6 - 775.53 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x, y, z = t
  Cluster 9
    43-10 - 93.6 - 744.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This is called, appropriately enough, sequence unpacking and works for any sequence on the right-hand side.
  Cluster 10
    43-11 - 93.6 - 729.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are
  Cluster 11
    43-12 - 93.6 - 713.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - elements in the sequence. Note that multiple assignment is really just a combination of tuple packing and
  Cluster 12
    43-13 - 93.6 - 698.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sequence unpacking.
  Cluster 13
    43-14 - 93.6 - 648.88 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 5.4 Sets
  Cluster 14
    43-15 - 93.6 - 612.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python also includes a data type for sets. A set is an unordered collection with no duplicate elements. Basic
  Cluster 15
    43-16 - 93.6 - 596.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - uses include membership testing and eliminating duplicate entries. Set objects also support mathematical
  Cluster 16
    43-17 - 93.6 - 580.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - operations like union, intersection, diﬀerence, and symmetric diﬀerence.
  Cluster 17
    43-18 - 93.6 - 558.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Curly braces or the set() function can be used to create sets. Note: to create an empty set you have to use
  Cluster 18
    43-19 - 93.6 - 543.36 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - set(), not {}; the latter creates an empty dictionary, a data structure that we discuss in the next section.
  Cluster 19
    43-20 - 93.6 - 521.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Here is a brief demonstration:
  Cluster 20
    43-21 - 93.6 - 495.31 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
  Cluster 21
    43-22 - 93.6 - 481.06 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(basket) # show that duplicates have been removed
  Cluster 22
    43-23 - 93.6 - 466.83 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {'orange', 'banana', 'pear', 'apple'}
  Cluster 23
    43-24 - 93.6 - 452.58 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 'orange' in basket # fast membership testing
    43-24 - 93.6 - 438.33 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - True
    43-24 - 93.6 - 424.09 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 'crabgrass' in basket
    43-24 - 93.6 - 409.84 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - False
  Cluster 24
    43-25 - 93.6 - 381.34 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # Demonstrate set operations on unique letters from two words
  Cluster 25
    43-26 - 93.6 - 367.09 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    43-26 - 93.6 - 352.85 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a = set('abracadabra')
  Cluster 26
    43-27 - 93.6 - 338.61 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> b = set('alacazam')
  Cluster 27
    43-28 - 93.6 - 324.36 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a # unique letters in a
    43-28 - 93.6 - 310.12 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {'a', 'r', 'b', 'c', 'd'}
    43-28 - 93.6 - 295.87 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a - b # letters in a but not in b
    43-28 - 93.6 - 281.62 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {'r', 'd', 'b'}
  Cluster 28
    43-29 - 93.6 - 267.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a | b # letters in a or b or both
  Cluster 29
    43-30 - 93.6 - 253.12 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
    43-30 - 93.6 - 238.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a & b # letters in both a and b
    43-30 - 93.6 - 224.63 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {'a', 'c'}
  Cluster 30
    43-31 - 93.6 - 210.39 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a ^ b # letters in a or b but not both
  Cluster 31
    43-32 - 93.6 - 196.14 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {'r', 'd', 'b', 'm', 'z', 'l'}
  Cluster 32
    43-33 - 93.6 - 165.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Similarly to list comprehensions, set comprehensions are also supported:
  Cluster 33
    43-34 - 93.6 - 139.41 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a = {x for x in 'abracadabra' if x not in 'abc'}
  Cluster 34
    43-35 - 93.6 - 125.16 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a
    43-35 - 93.6 - 110.92 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {'r', 'd'}
  Cluster 35
    43-36 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 5.4. Sets 37
Page 44
  Cluster 0
    44-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    44-2 - 93.6 - 919.68 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 5.5 Dictionaries
  Cluster 2
    44-3 - 93.6 - 882.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Another useful data type built into Python is the dictionary (see typesmapping). Dictionaries are sometimes
  Cluster 3
    44-4 - 93.6 - 866.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - found in other languages as “associative memories” or “associative arrays”. Unlike sequences, which are
  Cluster 4
    44-5 - 93.6 - 851.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings
  Cluster 5
    44-6 - 93.6 - 835.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples;
  Cluster 6
    44-7 - 93.6 - 820.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can’t use
  Cluster 7
    44-8 - 93.6 - 804.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - lists as keys, since lists can be modiﬁed in place using index assignments, slice assignments, or methods like
  Cluster 8
    44-9 - 93.6 - 789.11 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - append() and extend().
  Cluster 9
    44-10 - 93.6 - 767.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is best to think of a dictionary as a set of key: value pairs, with the requirement that the keys are unique
  Cluster 10
    44-11 - 93.6 - 751.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated
  Cluster 11
    44-12 - 93.6 - 736.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way
  Cluster 12
    44-13 - 93.6 - 720.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - dictionaries are written on output.
  Cluster 13
    44-14 - 93.6 - 698.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The main operations on a dictionary are storing a value with some key and extracting the value given the
  Cluster 14
    44-15 - 93.6 - 682.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - key. It is also possible to delete a key:value pair with del. If you store using a key that is already in use,
  Cluster 15
    44-16 - 93.6 - 667.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the old value associated with that key is forgotten. It is an error to extract a value using a non-existent key.
  Cluster 16
    44-17 - 93.6 - 645.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Performing list(d) on a dictionary returns a list of all the keys used in the dictionary, in insertion order
  Cluster 17
    44-18 - 93.6 - 629.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (if you want it sorted, just use sorted(d) instead). To check whether a single key is in the dictionary, use
  Cluster 18
    44-19 - 93.6 - 614.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the in keyword.
  Cluster 19
    44-20 - 93.6 - 592.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Here is a small example using a dictionary:
  Cluster 20
    44-21 - 93.6 - 566.22 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> tel = {'jack': 4098, 'sape': 4139}
  Cluster 21
    44-22 - 93.6 - 551.97 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> tel['guido'] = 4127
  Cluster 22
    44-23 - 93.6 - 537.73 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> tel
  Cluster 23
    44-24 - 93.6 - 523.48 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {'jack': 4098, 'sape': 4139, 'guido': 4127}
  Cluster 24
    44-25 - 93.6 - 509.24 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> tel['jack']
  Cluster 25
    44-26 - 93.6 - 494.99 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 4098
    44-26 - 93.6 - 480.74 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> del tel['sape']
    44-26 - 93.6 - 466.49 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> tel['irv'] = 4127
    44-26 - 93.6 - 452.24 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> tel
  Cluster 26
    44-27 - 93.6 - 438.0 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {'jack': 4098, 'guido': 4127, 'irv': 4127}
  Cluster 27
    44-28 - 93.6 - 423.75 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> list(tel)
  Cluster 28
    44-29 - 93.6 - 409.51 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['jack', 'guido', 'irv']
  Cluster 29
    44-30 - 93.6 - 395.26 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sorted(tel)
    44-30 - 93.6 - 381.02 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['guido', 'irv', 'jack']
    44-30 - 93.6 - 366.77 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 'guido' in tel
    44-30 - 93.6 - 352.52 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - True
    44-30 - 93.6 - 338.27 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 'jack' not in tel
  Cluster 30
    44-31 - 93.6 - 324.02 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - False
  Cluster 31
    44-32 - 93.6 - 293.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The dict() constructor builds dictionaries directly from sequences of key-value pairs:
  Cluster 32
    44-33 - 93.6 - 267.31 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
  Cluster 33
    44-34 - 93.6 - 253.06 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {'sape': 4139, 'guido': 4127, 'jack': 4098}
  Cluster 34
    44-35 - 93.6 - 222.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions:
  Cluster 35
    44-36 - 93.6 - 196.33 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> {x: x**2 for x in (2, 4, 6)}
  Cluster 36
    44-37 - 93.6 - 182.08 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {2: 4, 4: 16, 6: 36}
  Cluster 37
    44-38 - 93.6 - 151.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments:
  Cluster 38
    44-39 - 93.6 - 125.36 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> dict(sape=4139, guido=4127, jack=4098)
  Cluster 39
    44-40 - 93.6 - 111.11 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - {'sape': 4139, 'guido': 4127, 'jack': 4098}
  Cluster 40
    44-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 38 Chapter 5. Data Structures
Page 45
  Cluster 0
    45-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    45-2 - 93.6 - 919.68 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 5.6 Looping Techniques
  Cluster 2
    45-3 - 93.6 - 883.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When looping through dictionaries, the key and corresponding value can be retrieved at the same time using
  Cluster 3
    45-4 - 93.6 - 867.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the items() method.
  Cluster 4
    45-5 - 93.6 - 841.52 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
  Cluster 5
    45-6 - 93.6 - 827.27 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for k, v in knights.items():
  Cluster 6
    45-7 - 93.6 - 813.02 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(k, v)
  Cluster 7
    45-8 - 93.6 - 798.77 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 8
    45-9 - 93.6 - 784.52 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - gallahad the pure
  Cluster 9
    45-10 - 93.6 - 770.29 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - robin the brave
  Cluster 10
    45-11 - 93.6 - 739.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When looping through a sequence, the position index and corresponding value can be retrieved at the same
  Cluster 11
    45-12 - 93.6 - 724.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - time using the enumerate() function.
  Cluster 12
    45-13 - 93.6 - 698.01 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for i, v in enumerate(['tic', 'tac', 'toe']):
  Cluster 13
    45-14 - 93.6 - 683.76 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(i, v)
  Cluster 14
    45-15 - 93.6 - 669.53 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 15
    45-16 - 93.6 - 655.28 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0 tic
  Cluster 16
    45-17 - 93.6 - 641.03 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1 tac
  Cluster 17
    45-18 - 93.6 - 626.78 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 2 toe
  Cluster 18
    45-19 - 93.6 - 596.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To loop over two or more sequences at the same time, the entries can be paired with the zip() function.
  Cluster 19
    45-20 - 93.6 - 570.05 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> questions = ['name', 'quest', 'favorite color']
  Cluster 20
    45-21 - 93.6 - 555.8 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> answers = ['lancelot', 'the holy grail', 'blue']
  Cluster 21
    45-22 - 93.6 - 541.55 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for q, a in zip(questions, answers):
  Cluster 22
    45-23 - 93.6 - 527.32 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('What is your {0}? It is {1}.'.format(q, a))
  Cluster 23
    45-24 - 93.6 - 513.07 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 24
    45-25 - 93.6 - 498.82 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - What is your name? It is lancelot.
  Cluster 25
    45-26 - 93.6 - 484.57 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - What is your quest? It is the holy grail.
    45-26 - 93.6 - 470.33 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - What is your favorite color? It is blue.
  Cluster 26
    45-27 - 93.6 - 439.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To loop over a sequence in reverse, ﬁrst specify the sequence in a forward direction and then call the
  Cluster 27
    45-28 - 93.6 - 424.09 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - reversed() function.
  Cluster 28
    45-29 - 93.6 - 398.06 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for i in reversed(range(1, 10, 2)):
  Cluster 29
    45-30 - 93.6 - 383.81 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(i)
    45-30 - 93.6 - 369.56 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 30
    45-31 - 93.6 - 355.32 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 9
  Cluster 31
    45-32 - 93.6 - 341.07 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 7
    45-32 - 93.6 - 326.82 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 5
  Cluster 32
    45-33 - 93.6 - 312.58 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 3
  Cluster 33
    45-34 - 93.6 - 298.34 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1
  Cluster 34
    45-35 - 93.6 - 267.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To loop over a sequence in sorted order, use the sorted() function which returns a new sorted list while
  Cluster 35
    45-36 - 93.6 - 252.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - leaving the source unaltered.
  Cluster 36
    45-37 - 93.6 - 226.06 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
  Cluster 37
    45-38 - 93.6 - 211.82 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for f in sorted(set(basket)):
  Cluster 38
    45-39 - 93.6 - 197.57 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(f)
  Cluster 39
    45-40 - 93.6 - 183.33 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 40
    45-41 - 93.6 - 169.08 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - apple
    45-41 - 93.6 - 154.83 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - banana
  Cluster 41
    45-42 - 93.6 - 140.58 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - orange
  Cluster 42
    45-43 - 93.6 - 126.33 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - pear
  Cluster 43
    45-44 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 5.6. Looping Techniques 39
Page 46
  Cluster 0
    46-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    46-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is sometimes tempting to change a list while you are looping over it; however, it is often simpler and safer
  Cluster 2
    46-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to create a new list instead.
  Cluster 3
    46-4 - 93.6 - 881.48 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import math
  Cluster 4
    46-5 - 93.6 - 867.23 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
  Cluster 5
    46-6 - 93.6 - 852.98 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> filtered_data = []
  Cluster 6
    46-7 - 93.6 - 838.73 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for value in raw_data:
  Cluster 7
    46-8 - 93.6 - 824.49 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... if not math.isnan(value):
  Cluster 8
    46-9 - 93.6 - 810.24 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... filtered_data.append(value)
  Cluster 9
    46-10 - 93.6 - 795.99 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    46-10 - 93.6 - 781.74 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> filtered_data
  Cluster 10
    46-11 - 93.6 - 767.51 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [56.2, 51.7, 55.3, 52.5, 47.8]
  Cluster 11
    46-12 - 93.6 - 709.5 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 5.7 More on Conditions
  Cluster 12
    46-13 - 93.6 - 672.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The conditions used in while and if statements can contain any operators, not just comparisons.
  Cluster 13
    46-14 - 93.6 - 650.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The comparison operators in and not in check whether a value occurs (does not occur) in a sequence. The
  Cluster 14
    46-15 - 93.6 - 635.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - operators is and is not compare whether two objects are really the same object; this only matters for
  Cluster 15
    46-16 - 93.6 - 619.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - mutable objects like lists. All comparison operators have the same priority, which is lower than that of all
  Cluster 16
    46-17 - 93.6 - 604.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - numerical operators.
  Cluster 17
    46-18 - 93.6 - 582.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Comparisons can be chained. For example, a < b == c tests whether a is less than b and moreover b equals
  Cluster 18
    46-19 - 93.6 - 566.71 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - c.
  Cluster 19
    46-20 - 93.6 - 544.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Comparisons may be combined using the Boolean operators and and or, and the outcome of a comparison
  Cluster 20
    46-21 - 93.6 - 529.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (or of any other Boolean expression) may be negated with not. These have lower priorities than comparison
  Cluster 21
    46-22 - 93.6 - 513.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - operators; between them, not has the highest priority and or the lowest, so that A and not B or C is
  Cluster 22
    46-23 - 93.6 - 498.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - equivalent to (A and (not B)) or C. As always, parentheses can be used to express the desired composition.
  Cluster 23
    46-24 - 93.6 - 476.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The Boolean operators and and or are so-called short-circuit operators: their arguments are evaluated from
  Cluster 24
    46-25 - 93.6 - 460.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - left to right, and evaluation stops as soon as the outcome is determined. For example, if A and C are true
  Cluster 25
    46-26 - 93.6 - 444.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - but B is false, A and B and C does not evaluate the expression C. When used as a general value and not as
  Cluster 26
    46-27 - 93.6 - 429.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a Boolean, the return value of a short-circuit operator is the last evaluated argument.
  Cluster 27
    46-28 - 93.6 - 407.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is possible to assign the result of a comparison or other Boolean expression to a variable. For example,
  Cluster 28
    46-29 - 93.6 - 381.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
  Cluster 29
    46-30 - 93.6 - 367.12 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> non_null = string1 or string2 or string3
    46-30 - 93.6 - 352.87 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> non_null
  Cluster 30
    46-31 - 93.6 - 338.64 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Trondheim'
  Cluster 31
    46-32 - 93.6 - 307.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that in Python, unlike C, assignment cannot occur inside expressions. C programmers may grumble
  Cluster 32
    46-33 - 93.6 - 292.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - about this, but it avoids a common class of problems encountered in C programs: typing = in an expression
  Cluster 33
    46-34 - 93.6 - 276.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - when == was intended.
  Cluster 34
    46-35 - 93.6 - 227.53 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 5.8 Comparing Sequences and Other Types
  Cluster 35
    46-36 - 93.6 - 190.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Sequence objects may be compared to other objects with the same sequence type. The comparison uses lex-
  Cluster 36
    46-37 - 93.6 - 175.25 29.89 - ff6 - 39.852 - rgb(0, 0, 0) - icographical ordering: ﬁrst the ﬁrst two items are compared, and if they diﬀer this determines the outcome
  Cluster 37
    46-38 - 93.6 - 159.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is
  Cluster 38
    46-39 - 93.6 - 144.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical com-
  Cluster 39
    46-40 - 93.6 - 128.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - parison is carried out recursively. If all items of two sequences compare equal, the sequences are considered
  Cluster 40
    46-41 - 93.6 - 113.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser)
  Cluster 41
    46-42 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 40 Chapter 5. Data Structures
Page 47
  Cluster 0
    47-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    47-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - one. Lexicographical ordering for strings uses the Unicode code point number to order individual characters.
  Cluster 2
    47-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Some examples of comparisons between sequences of the same type:
  Cluster 3
    47-4 - 93.6 - 881.48 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - (1, 2, 3) < (1, 2, 4)
  Cluster 4
    47-5 - 93.6 - 867.23 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - [1, 2, 3] < [1, 2, 4]
  Cluster 5
    47-6 - 93.6 - 852.98 24.89 - ff7 - 35.864 - rgb(64, 112, 161) - 'ABC' < 'C' < 'Pascal' < 'Python'
  Cluster 6
    47-7 - 93.6 - 838.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - (1, 2, 3, 4) < (1, 2, 4)
  Cluster 7
    47-8 - 93.6 - 824.49 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - (1, 2) < (1, 2, -1)
  Cluster 8
    47-9 - 93.6 - 810.24 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - (1, 2, 3) == (1.0, 2.0, 3.0)
  Cluster 9
    47-10 - 93.6 - 795.99 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - (1, 2, ('aa', 'ab')) < (1, 2, ('abc', 'a'), 4)
  Cluster 10
    47-11 - 93.6 - 765.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that comparing objects of diﬀerent types with < or > is legal provided that the objects have appropriate
  Cluster 11
    47-12 - 93.6 - 749.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - comparison methods. For example, mixed numeric types are compared according to their numeric value,
  Cluster 12
    47-13 - 93.6 - 734.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - so 0 equals 0.0, etc. Otherwise, rather than providing an arbitrary ordering, the interpreter will raise a
  Cluster 13
    47-14 - 93.6 - 718.68 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - TypeError exception.
  Cluster 14
    47-15 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 5.8. Comparing Sequences and Other Types 41
Page 48
  Cluster 0
    48-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    48-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 42 Chapter 5. Data Structures
Page 49
  Cluster 0
    49-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    49-2 - 670.76 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - SIX
  Cluster 2
    49-3 - 605.7 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - MODULES
  Cluster 3
    49-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you quit from the Python interpreter and enter it again, the deﬁnitions you have made (functions and
  Cluster 4
    49-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - variables) are lost. Therefore, if you want to write a somewhat longer program, you are better oﬀ using a
  Cluster 5
    49-6 - 93.6 - 697.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - text editor to prepare the input for the interpreter and running it with that ﬁle as input instead. This is
  Cluster 6
    49-7 - 93.6 - 682.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - known as creating a script. As your program gets longer, you may want to split it into several ﬁles for easier
  Cluster 7
    49-8 - 93.6 - 666.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - maintenance. You may also want to use a handy function that you’ve written in several programs without
  Cluster 8
    49-9 - 93.6 - 651.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - copying its deﬁnition into each program.
  Cluster 9
    49-10 - 93.6 - 629.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To support this, Python has a way to put deﬁnitions in a ﬁle and use them in a script or in an interactive
  Cluster 10
    49-11 - 93.6 - 613.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - instance of the interpreter. Such a ﬁle is called a module; deﬁnitions from a module can be imported into
  Cluster 11
    49-12 - 93.6 - 597.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - other modules or into the main module (the collection of variables that you have access to in a script executed
  Cluster 12
    49-13 - 93.6 - 582.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - at the top level and in calculator mode).
  Cluster 13
    49-14 - 93.6 - 560.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A module is a ﬁle containing Python deﬁnitions and statements. The ﬁle name is the module name with
  Cluster 14
    49-15 - 93.6 - 544.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the suﬃx .py appended. Within a module, the module’s name (as a string) is available as the value of the
  Cluster 15
    49-16 - 93.6 - 529.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - global variable __name__. For instance, use your favorite text editor to create a ﬁle called fibo.py in the
  Cluster 16
    49-17 - 93.6 - 513.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - current directory with the following contents:
  Cluster 17
    49-18 - 93.6 - 487.75 24.89 - ffe - 35.864 - rgb(64, 128, 143) - # Fibonacci numbers module
  Cluster 18
    49-19 - 93.6 - 459.26 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def fib(n): # write Fibonacci series up to n
  Cluster 19
    49-20 - 118.08 - 445.02 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - a, b = 0, 1
  Cluster 20
    49-21 - 118.08 - 430.77 24.89 - ffd - 35.864 - rgb(0, 112, 33) - while a < n:
  Cluster 21
    49-22 - 118.08 - 388.02 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print()

    =====
    49-22 - 142.56 - 416.52 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(a, end=' ')
    49-22 - 142.56 - 402.27 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - a, b = b, a+b
  Cluster 22
    49-23 - 93.6 - 359.53 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def fib2(n): # return Fibonacci series up to n
  Cluster 23
    49-24 - 118.08 - 345.28 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - result = []
  Cluster 24
    49-25 - 118.08 - 331.05 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - a, b = 0, 1
  Cluster 25
    49-26 - 118.08 - 316.8 24.89 - ffd - 35.864 - rgb(0, 112, 33) - while a < n:
  Cluster 26
    49-27 - 142.56 - 302.55 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - result.append(a)
  Cluster 27
    49-28 - 118.08 - 274.05 24.89 - ffd - 35.864 - rgb(0, 112, 33) - return result

    =====
    49-28 - 142.56 - 288.3 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - a, b = b, a+b
  Cluster 28
    49-29 - 93.6 - 243.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Now enter the Python interpreter and import this module with the following command:
  Cluster 29
    49-30 - 93.6 - 217.32 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import fibo
  Cluster 30
    49-31 - 93.6 - 186.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This does not enter the names of the functions deﬁned in fibo directly in the current symbol table; it only
  Cluster 31
    49-32 - 93.6 - 171.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - enters the module name fibo there. Using the module name you can access the functions:
  Cluster 32
    49-33 - 93.6 - 145.05 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fibo.fib(1000)
  Cluster 33
    49-34 - 93.6 - 130.81 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
  Cluster 34
    49-35 - 93.6 - 116.56 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fibo.fib2(100)
  Cluster 35
    49-36 - 583.05 - 100.11 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 36
    49-37 - 687.75 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 43
Page 50
  Cluster 0
    50-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    50-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    50-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
  Cluster 3
    50-4 - 93.6 - 890.54 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fibo.__name__
  Cluster 4
    50-5 - 93.6 - 876.29 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'fibo'
  Cluster 5
    50-6 - 93.6 - 845.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you intend to use a function often you can assign it to a local name:
  Cluster 6
    50-7 - 93.6 - 819.57 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fib = fibo.fib
  Cluster 7
    50-8 - 93.6 - 805.32 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fib(500)
  Cluster 8
    50-9 - 93.6 - 791.08 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
  Cluster 9
    50-10 - 93.6 - 733.07 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 6.1 More on Modules
  Cluster 10
    50-11 - 93.6 - 696.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A module can contain executable statements as well as function deﬁnitions. These statements are intended
  Cluster 11
    50-12 - 93.6 - 680.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to initialize the module. They are executed only the ﬁrst time the module name is encountered in an import
  Cluster 12
    50-13 - 153.02 - 669.81 18.58 - ff8 - 27.896 - rgb(53, 95, 124) - 1
  Cluster 13
    50-14 - 93.6 - 665.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - statement.
  Cluster 14
    50-15 - 164.58 - 665.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (They are also run if the ﬁle is executed as a script.)
  Cluster 15
    50-16 - 93.6 - 643.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Each module has its own private symbol table, which is used as the global symbol table by all functions
  Cluster 16
    50-17 - 93.6 - 627.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - deﬁned in the module. Thus, the author of a module can use global variables in the module without
  Cluster 17
    50-18 - 93.6 - 612.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - worrying about accidental clashes with a user’s global variables. On the other hand, if you know what you
  Cluster 18
    50-19 - 93.6 - 596.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are doing you can touch a module’s global variables with the same notation used to refer to its functions,
  Cluster 19
    50-20 - 93.6 - 580.93 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - modname.itemname.
  Cluster 20
    50-21 - 93.6 - 558.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Modules can import other modules. It is customary but not required to place all import statements at the
  Cluster 21
    50-22 - 93.6 - 543.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - beginning of a module (or script, for that matter). The imported module names are placed in the importing
  Cluster 22
    50-23 - 93.6 - 527.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module’s global symbol table.
  Cluster 23
    50-24 - 93.6 - 505.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There is a variant of the import statement that imports names from a module directly into the importing
  Cluster 24
    50-25 - 93.6 - 490.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module’s symbol table. For example:
  Cluster 25
    50-26 - 93.6 - 464.23 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from fibo import fib, fib2
  Cluster 26
    50-27 - 93.6 - 449.98 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fib(500)
  Cluster 27
    50-28 - 93.6 - 435.75 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
  Cluster 28
    50-29 - 93.6 - 405.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This does not introduce the module name from which the imports are taken in the local symbol table (so in
  Cluster 29
    50-30 - 93.6 - 389.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the example, fibo is not deﬁned).
  Cluster 30
    50-31 - 93.6 - 367.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There is even a variant to import all names that a module deﬁnes:
  Cluster 31
    50-32 - 93.6 - 341.46 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from fibo import *
  Cluster 32
    50-33 - 93.6 - 327.21 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fib(500)
  Cluster 33
    50-34 - 93.6 - 312.96 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
  Cluster 34
    50-35 - 93.6 - 282.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This imports all names except those beginning with an underscore (_). In most cases Python programmers
  Cluster 35
    50-36 - 93.6 - 266.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some
  Cluster 36
    50-37 - 93.6 - 251.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - things you have already deﬁned.
  Cluster 37
    50-38 - 93.6 - 229.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that in general the practice of importing * from a module or package is frowned upon, since it often
  Cluster 38
    50-39 - 93.6 - 213.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - causes poorly readable code. However, it is okay to use it to save typing in interactive sessions.
  Cluster 39
    50-40 - 93.6 - 191.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If the module name is followed by as, then the name following as is bound directly to the imported module.
  Cluster 40
    50-41 - 93.6 - 165.57 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import fibo as fib
  Cluster 41
    50-42 - 93.6 - 151.33 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fib.fib(500)
  Cluster 42
    50-43 - 93.6 - 137.09 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
  Cluster 43
    50-44 - 106.86 - 111.58 15.93 - ffa - 23.912 - rgb(0, 0, 0) - 1
  Cluster 44
    50-45 - 115.92 - 107.93 23.91 - ffb - 31.88 - rgb(0, 0, 0) - In fact function deﬁnitions are also ‘statements’ that are ‘executed’; the execution of a module-level function deﬁnition
  Cluster 45
    50-46 - 93.6 - 95.61 23.91 - ffb - 31.88 - rgb(0, 0, 0) - enters the function name in the module’s global symbol table.
  Cluster 46
    50-47 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 44 Chapter 6. Modules
Page 51
  Cluster 0
    51-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    51-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This is eﬀectively importing the module in the same way that import fibo will do, with the only diﬀerence
  Cluster 2
    51-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of it being available as fib.
  Cluster 3
    51-4 - 93.6 - 885.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It can also be used when utilising from with similar eﬀects:
  Cluster 4
    51-5 - 93.6 - 859.46 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from fibo import fib as fibonacci
  Cluster 5
    51-6 - 93.6 - 845.21 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fibonacci(500)
  Cluster 6
    51-7 - 93.6 - 830.96 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
  Cluster 7
    51-8 - 93.6 - 784.73 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - Note: For eﬃciency reasons, each module is only imported once per interpreter session. Therefore, if
  Cluster 8
    51-9 - 93.6 - 769.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - you change your modules, you must restart the interpreter – or, if it’s just one module you want to test
  Cluster 9
    51-10 - 93.6 - 753.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - interactively, use importlib.reload(), e.g. import importlib; importlib.reload(modulename).
  Cluster 10
    51-11 - 93.6 - 695.36 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 6.1.1 Executing modules as scripts
  Cluster 11
    51-12 - 93.6 - 664.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When you run a Python module with
  Cluster 12
    51-13 - 93.6 - 638.92 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - python fibo.py <arguments>
  Cluster 13
    51-14 - 93.6 - 608.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the code in the module will be executed, just as if you imported it, but with the __name__ set to "__main__".
  Cluster 14
    51-15 - 93.6 - 592.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - That means that by adding this code at the end of your module:
  Cluster 15
    51-16 - 93.6 - 566.66 24.89 - ffd - 35.864 - rgb(0, 112, 33) - if __name__ == "__main__":
  Cluster 16
    51-17 - 118.08 - 552.41 24.82 - ffd - 35.864 - rgb(0, 112, 33) - import sys
  Cluster 17
    51-18 - 118.08 - 538.17 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - fib(int(sys.argv[1]))
  Cluster 18
    51-19 - 93.6 - 507.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - you can make the ﬁle usable as a script as well as an importable module, because the code that parses the
  Cluster 19
    51-20 - 93.6 - 491.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - command line only runs if the module is executed as the “main” ﬁle:
  Cluster 20
    51-21 - 93.6 - 465.89 24.89 - ffd - 35.864 - rgb(199, 92, 10) - $ python fibo.py 50
  Cluster 21
    51-22 - 93.6 - 451.65 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0 1 1 2 3 5 8 13 21 34
  Cluster 22
    51-23 - 93.6 - 420.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If the module is imported, the code is not run:
  Cluster 23
    51-24 - 93.6 - 394.93 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import fibo
  Cluster 24
    51-25 - 93.6 - 380.68 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - >>>
  Cluster 25
    51-26 - 93.6 - 349.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This is often used either to provide a convenient user interface to a module, or for testing purposes (running
  Cluster 26
    51-27 - 93.6 - 334.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the module as a script executes a test suite).
  Cluster 27
    51-28 - 93.6 - 291.69 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 6.1.2 The Module Search Path
  Cluster 28
    51-29 - 93.6 - 261.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When a module named spam is imported, the interpreter ﬁrst searches for a built-in module with that name.
  Cluster 29
    51-30 - 93.6 - 245.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If not found, it then searches for a ﬁle named spam.py in a list of directories given by the variable sys.path.
  Cluster 30
    51-31 - 93.6 - 230.22 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - sys.path is initialized from these locations:
  Cluster 31
    51-32 - 109.42 - 208.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The directory containing the input script (or the current directory when no ﬁle is speciﬁed).
  Cluster 32
    51-33 - 109.42 - 186.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).
  Cluster 33
    51-34 - 109.42 - 164.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The installation-dependent default.
  Cluster 34
    51-35 - 93.6 - 126.61 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - Note: On ﬁle systems which support symlinks, the directory containing the input script is calculated after
  Cluster 35
    51-36 - 93.6 - 111.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the symlink is followed. In other words the directory containing the symlink is not added to the module
  Cluster 36
    51-37 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 6.1. More on Modules 45
Page 52
  Cluster 0
    52-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    52-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - search path.
  Cluster 2
    52-3 - 93.6 - 885.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - After initialization, Python programs can modify sys.path. The directory containing the script being run
  Cluster 3
    52-4 - 93.6 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is placed at the beginning of the search path, ahead of the standard library path. This means that scripts in
  Cluster 4
    52-5 - 93.6 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that directory will be loaded instead of modules of the same name in the library directory. This is an error
  Cluster 5
    52-6 - 93.6 - 838.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - unless the replacement is intended. See section Standard Modules for more information.
  Cluster 6
    52-7 - 93.6 - 796.12 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 6.1.3 “Compiled” Python ﬁles
  Cluster 7
    52-8 - 93.6 - 765.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To speed up loading modules, Python caches the compiled version of each module in the __pycache__
  Cluster 8
    52-9 - 93.6 - 750.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - directory under the name module.version.pyc, where the version encodes the format of the compiled ﬁle;
  Cluster 9
    52-10 - 93.6 - 734.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - it generally contains the Python version number. For example, in CPython release 3.3 the compiled version of
  Cluster 10
    52-11 - 93.6 - 719.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - spam.py would be cached as __pycache__/spam.cpython-33.pyc. This naming convention allows compiled
  Cluster 11
    52-12 - 93.6 - 703.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - modules from diﬀerent releases and diﬀerent versions of Python to coexist.
  Cluster 12
    52-13 - 93.6 - 681.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python checks the modiﬁcation date of the source against the compiled version to see if it’s out of date
  Cluster 13
    52-14 - 93.6 - 666.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and needs to be recompiled. This is a completely automatic process. Also, the compiled modules are
  Cluster 14
    52-15 - 93.6 - 650.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - platform-independent, so the same library can be shared among systems with diﬀerent architectures.
  Cluster 15
    52-16 - 93.6 - 628.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python does not check the cache in two circumstances. First, it always recompiles and does not store the
  Cluster 16
    52-17 - 93.6 - 612.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - result for the module that’s loaded directly from the command line. Second, it does not check the cache if
  Cluster 17
    52-18 - 93.6 - 597.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - there is no source module. To support a non-source (compiled only) distribution, the compiled module must
  Cluster 18
    52-19 - 93.6 - 581.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - be in the source directory, and there must not be a source module.
  Cluster 19
    52-20 - 93.6 - 559.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Some tips for experts:
  Cluster 20
    52-21 - 109.42 - 537.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • You can use the -O or -OO switches on the Python command to reduce the size of a compiled module.
  Cluster 21
    52-22 - 125.98 - 522.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The -O switch removes assert statements, the -OO switch removes both assert statements and __doc__
  Cluster 22
    52-23 - 125.98 - 506.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - strings. Since some programs may rely on having these available, you should only use this option if
  Cluster 23
    52-24 - 125.98 - 491.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - you know what you’re doing. “Optimized” modules have an opt- tag and are usually smaller. Future
  Cluster 24
    52-25 - 125.98 - 475.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - releases may change the eﬀects of optimization.
  Cluster 25
    52-26 - 109.42 - 453.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • A program doesn’t run any faster when it is read from a .pyc ﬁle than when it is read from a .py ﬁle;
  Cluster 26
    52-27 - 125.98 - 438.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the only thing that’s faster about .pyc ﬁles is the speed with which they are loaded.
  Cluster 27
    52-28 - 109.42 - 416.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The module compileall can create .pyc ﬁles for all modules in a directory.
  Cluster 28
    52-29 - 109.42 - 394.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • There is more detail on this process, including a ﬂow chart of the decisions, in PEP 3147.
  Cluster 29
    52-30 - 93.6 - 344.69 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 6.2 Standard Modules
  Cluster 30
    52-31 - 93.6 - 307.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python comes with a library of standard modules, described in a separate document, the Python Library
  Cluster 31
    52-32 - 93.6 - 292.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Reference (“Library Reference” hereafter). Some modules are built into the interpreter; these provide access
  Cluster 32
    52-33 - 93.6 - 276.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to operations that are not part of the core of the language but are nevertheless built in, either for eﬃciency
  Cluster 33
    52-34 - 93.6 - 261.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - or to provide access to operating system primitives such as system calls. The set of such modules is a
  Cluster 34
    52-35 - 93.6 - 245.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - conﬁguration option which also depends on the underlying platform. For example, the winreg module is
  Cluster 35
    52-36 - 93.6 - 230.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - only provided on Windows systems. One particular module deserves some attention: sys, which is built
  Cluster 36
    52-37 - 93.6 - 214.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - into every Python interpreter. The variables sys.ps1 and sys.ps2 deﬁne the strings used as primary and
    52-37 - 93.6 - 199.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - secondary prompts:
  Cluster 37
    52-38 - 93.6 - 173.13 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import sys
  Cluster 38
    52-39 - 93.6 - 158.89 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sys.ps1
    52-39 - 93.6 - 144.64 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '>>> '
  Cluster 39
    52-40 - 93.6 - 130.39 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sys.ps2
  Cluster 40
    52-41 - 93.6 - 116.14 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '... '
  Cluster 41
    52-42 - 583.05 - 99.7 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 42
    52-43 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 46 Chapter 6. Modules
Page 53
  Cluster 0
    53-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    53-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    53-3 - 93.6 - 904.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sys.ps1 = 'C> '
  Cluster 3
    53-4 - 93.6 - 890.54 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - C> print('Yuck!')
  Cluster 4
    53-5 - 93.6 - 876.29 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Yuck!
  Cluster 5
    53-6 - 93.6 - 862.04 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - C>
  Cluster 6
    53-7 - 93.6 - 831.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - These two variables are only deﬁned if the interpreter is in interactive mode.
  Cluster 7
    53-8 - 93.6 - 809.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The variable sys.path is a list of strings that determines the interpreter’s search path for modules. It is
  Cluster 8
    53-9 - 93.6 - 793.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - initialized to a default path taken from the environment variable PYTHONPATH, or from a built-in default if
  Cluster 9
    53-10 - 93.6 - 778.26 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - PYTHONPATH is not set. You can modify it using standard list operations:
  Cluster 10
    53-11 - 93.6 - 752.22 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import sys
  Cluster 11
    53-12 - 93.6 - 737.97 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sys.path.append('/ufs/guido/lib/python')
  Cluster 12
    53-13 - 93.6 - 679.97 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 6.3 The dir() Function
  Cluster 13
    53-14 - 93.6 - 643.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The built-in function dir() is used to ﬁnd out which names a module deﬁnes. It returns a sorted list of
  Cluster 14
    53-15 - 93.6 - 627.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - strings:
  Cluster 15
    53-16 - 93.6 - 601.67 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> import fibo, sys
  Cluster 16
    53-17 - 93.6 - 587.42 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> dir(fibo)
    53-17 - 93.6 - 573.17 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['__name__', 'fib', 'fib2']
  Cluster 17
    53-18 - 93.6 - 558.92 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> dir(sys)
  Cluster 18
    53-19 - 93.6 - 544.67 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['__displayhook__', '__doc__', '__excepthook__', '__loader__', '__name__',
  Cluster 19
    53-20 - 99.72 - 530.43 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '__package__', '__stderr__', '__stdin__', '__stdout__',
  Cluster 20
    53-21 - 99.72 - 516.18 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe',
  Cluster 21
    53-22 - 99.72 - 501.93 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '_home', '_mercurial', '_xoptions', 'abiflags', 'api_version', 'argv',
  Cluster 22
    53-23 - 99.72 - 487.69 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder',
  Cluster 23
    53-24 - 99.72 - 473.45 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'call_tracing', 'callstats', 'copyright', 'displayhook',
    53-24 - 99.72 - 459.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix',
    53-24 - 99.72 - 444.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'executable', 'exit', 'flags', 'float_info', 'float_repr_style',
  Cluster 24
    53-25 - 99.72 - 430.7 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags',
  Cluster 25
    53-26 - 99.72 - 416.45 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit',
    53-26 - 99.72 - 402.21 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettotalrefcount',
    53-26 - 99.72 - 387.96 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',
    53-26 - 99.72 - 373.71 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'intern', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path',
  Cluster 26
    53-27 - 99.72 - 359.48 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',
  Cluster 27
    53-28 - 99.72 - 345.23 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit',
    53-28 - 99.72 - 330.98 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout',
    53-28 - 99.72 - 316.73 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'thread_info', 'version', 'version_info', 'warnoptions']
  Cluster 28
    53-29 - 93.6 - 286.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Without arguments, dir() lists the names you have deﬁned currently:
  Cluster 29
    53-30 - 93.6 - 260.0 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a = [1, 2, 3, 4, 5]
  Cluster 30
    53-31 - 93.6 - 245.75 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import fibo
  Cluster 31
    53-32 - 93.6 - 231.5 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fib = fibo.fib
  Cluster 32
    53-33 - 93.6 - 217.27 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> dir()
  Cluster 33
    53-34 - 93.6 - 203.02 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']
  Cluster 34
    53-35 - 93.6 - 172.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that it lists all types of names: variables, modules, functions, etc.
  Cluster 35
    53-36 - 93.6 - 150.31 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - dir() does not list the names of built-in functions and variables. If you want a list of those, they are deﬁned
  Cluster 36
    53-37 - 93.6 - 134.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in the standard module builtins:
  Cluster 37
    53-38 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 6.3. The dir() Function 47
Page 54
  Cluster 0
    54-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    54-2 - 93.6 - 916.45 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import builtins
  Cluster 2
    54-3 - 93.6 - 902.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> dir(builtins)
  Cluster 3
    54-4 - 93.6 - 887.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',

    =====
    54-4 - 99.72 - 873.7 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',
  Cluster 4
    54-5 - 99.72 - 859.46 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',
  Cluster 5
    54-6 - 99.72 - 845.21 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',
  Cluster 6
    54-7 - 99.72 - 830.96 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',
  Cluster 7
    54-8 - 99.72 - 816.71 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'FileExistsError', 'FileNotFoundError', 'FloatingPointError',
  Cluster 8
    54-9 - 99.72 - 802.48 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',
  Cluster 9
    54-10 - 99.72 - 788.23 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',
  Cluster 10
    54-11 - 99.72 - 773.98 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',
    54-11 - 99.72 - 759.73 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',
  Cluster 11
    54-12 - 99.72 - 745.49 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'NotImplementedError', 'OSError', 'OverflowError',
  Cluster 12
    54-13 - 99.72 - 731.24 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',
  Cluster 13
    54-14 - 99.72 - 716.99 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',
  Cluster 14
    54-15 - 99.72 - 702.74 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',
  Cluster 15
    54-16 - 99.72 - 688.49 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',
  Cluster 16
    54-17 - 99.72 - 674.26 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',
  Cluster 17
    54-18 - 99.72 - 660.01 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',
    54-18 - 99.72 - 645.76 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',
  Cluster 18
    54-19 - 99.72 - 631.51 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',
  Cluster 19
    54-20 - 99.72 - 617.27 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',
  Cluster 20
    54-21 - 99.72 - 603.02 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',
  Cluster 21
    54-22 - 99.72 - 588.77 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',
  Cluster 22
    54-23 - 99.72 - 574.52 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',
  Cluster 23
    54-24 - 99.72 - 560.27 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',
    54-24 - 99.72 - 546.03 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',
  Cluster 24
    54-25 - 99.72 - 531.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',
  Cluster 25
    54-26 - 99.72 - 517.54 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',
  Cluster 26
    54-27 - 99.72 - 503.3 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',
    54-27 - 99.72 - 489.05 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'zip']
  Cluster 27
    54-28 - 93.6 - 431.04 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 6.4 Packages
  Cluster 28
    54-29 - 93.6 - 394.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Packages are a way of structuring Python’s module namespace by using “dotted module names”. For example,
  Cluster 29
    54-30 - 93.6 - 378.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the module name A.B designates a submodule named B in a package named A. Just like the use of modules
  Cluster 30
    54-31 - 93.6 - 363.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - saves the authors of diﬀerent modules from having to worry about each other’s global variable names, the
  Cluster 31
    54-32 - 93.6 - 347.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - use of dotted module names saves the authors of multi-module packages like NumPy or Pillow from having
  Cluster 32
    54-33 - 93.6 - 332.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to worry about each other’s module names.
  Cluster 33
    54-34 - 93.6 - 310.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Suppose you want to design a collection of modules (a “package”) for the uniform handling of sound ﬁles and
  Cluster 34
    54-35 - 93.6 - 294.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sound data. There are many diﬀerent sound ﬁle formats (usually recognized by their extension, for example:
  Cluster 35
    54-36 - 93.6 - 279.05 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - .wav, .aiff, .au), so you may need to create and maintain a growing collection of modules for the conversion
  Cluster 36
    54-37 - 93.6 - 263.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - between the various ﬁle formats. There are also many diﬀerent operations you might want to perform on
  Cluster 37
    54-38 - 93.6 - 247.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sound data (such as mixing, adding echo, applying an equalizer function, creating an artiﬁcial stereo eﬀect),
  Cluster 38
    54-39 - 93.6 - 232.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - so in addition you will be writing a never-ending stream of modules to perform these operations. Here’s a
  Cluster 39
    54-40 - 93.6 - 216.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - possible structure for your package (expressed in terms of a hierarchical ﬁlesystem):
  Cluster 40
    54-41 - 93.6 - 190.84 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - sound/ Top-level package
  Cluster 41
    54-42 - 130.31 - 176.59 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - __init__.py Initialize the sound package
  Cluster 42
    54-43 - 130.31 - 162.34 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - formats/ Subpackage for file format conversions
  Cluster 43
    54-44 - 179.27 - 148.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - __init__.py
  Cluster 44
    54-45 - 179.27 - 133.86 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - wavread.py
  Cluster 45
    54-46 - 179.27 - 119.61 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - wavwrite.py
  Cluster 46
    54-47 - 583.05 - 103.16 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 47
    54-48 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 48 Chapter 6. Modules
Page 55
  Cluster 0
    55-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    55-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    55-3 - 179.27 - 904.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - aiffread.py
  Cluster 3
    55-4 - 179.27 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - aiffwrite.py
  Cluster 4
    55-5 - 179.27 - 876.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - auread.py
  Cluster 5
    55-6 - 179.27 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - auwrite.py
    55-6 - 179.27 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ...
  Cluster 6
    55-7 - 130.31 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - effects/ Subpackage for sound effects
  Cluster 7
    55-8 - 179.27 - 819.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - __init__.py
  Cluster 8
    55-9 - 179.27 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - echo.py
  Cluster 9
    55-10 - 179.27 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - surround.py
  Cluster 10
    55-11 - 179.27 - 776.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - reverse.py
  Cluster 11
    55-12 - 179.27 - 762.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ...
  Cluster 12
    55-13 - 130.31 - 748.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - filters/ Subpackage for filters

    =====
    55-13 - 179.27 - 733.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - __init__.py
  Cluster 13
    55-14 - 179.27 - 719.58 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - equalizer.py
  Cluster 14
    55-15 - 179.27 - 705.34 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - vocoder.py
  Cluster 15
    55-16 - 179.27 - 691.09 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - karaoke.py
  Cluster 16
    55-17 - 179.27 - 676.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ...
  Cluster 17
    55-18 - 93.6 - 646.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When importing the package, Python searches through the directories on sys.path looking for the package
  Cluster 18
    55-19 - 93.6 - 630.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - subdirectory.
  Cluster 19
    55-20 - 93.6 - 608.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The __init__.py ﬁles are required to make Python treat the directories as containing packages; this is done
  Cluster 20
    55-21 - 93.6 - 593.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to prevent directories with a common name, such as string, from unintentionally hiding valid modules that
  Cluster 21
    55-22 - 93.6 - 577.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - occur later on the module search path. In the simplest case, __init__.py can just be an empty ﬁle, but it
  Cluster 22
    55-23 - 93.6 - 561.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can also execute initialization code for the package or set the __all__ variable, described later.
  Cluster 23
    55-24 - 93.6 - 539.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Users of the package can import individual modules from the package, for example:
  Cluster 24
    55-25 - 93.6 - 513.92 24.82 - ffd - 35.864 - rgb(0, 112, 33) - import sound.effects.echo
  Cluster 25
    55-26 - 93.6 - 483.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This loads the submodule sound.effects.echo. It must be referenced with its full name.
  Cluster 26
    55-27 - 93.6 - 457.18 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)
  Cluster 27
    55-28 - 93.6 - 426.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - An alternative way of importing the submodule is:
  Cluster 28
    55-29 - 93.6 - 400.45 24.89 - ffd - 35.864 - rgb(0, 112, 33) - from sound.effects import echo
  Cluster 29
    55-30 - 93.6 - 369.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This also loads the submodule echo, and makes it available without its package preﬁx, so it can be used as
  Cluster 30
    55-31 - 93.6 - 354.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - follows:
  Cluster 31
    55-32 - 93.6 - 328.19 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - echo.echofilter(input, output, delay=0.7, atten=4)
  Cluster 32
    55-33 - 93.6 - 297.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Yet another variation is to import the desired function or variable directly:
  Cluster 33
    55-34 - 93.6 - 271.47 24.89 - ffd - 35.864 - rgb(0, 112, 33) - from sound.effects.echo import echofilter
  Cluster 34
    55-35 - 93.6 - 240.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Again, this loads the submodule echo, but this makes its function echofilter() directly available:
  Cluster 35
    55-36 - 93.6 - 214.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - echofilter(input, output, delay=0.7, atten=4)
  Cluster 36
    55-37 - 93.6 - 184.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that when using from package import item, the item can be either a submodule (or subpackage)
  Cluster 37
    55-38 - 93.6 - 168.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the package, or some other name deﬁned in the package, like a function, class or variable. The import
  Cluster 38
    55-39 - 93.6 - 152.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - statement ﬁrst tests whether the item is deﬁned in the package; if not, it assumes it is a module and attempts
  Cluster 39
    55-40 - 93.6 - 137.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to load it. If it fails to ﬁnd it, an ImportError exception is raised.
  Cluster 40
    55-41 - 93.6 - 115.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Contrarily, when using syntax like import item.subitem.subsubitem, each item except for the last must
  Cluster 41
    55-42 - 93.6 - 99.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - be a package; the last item can be a module or a package but can’t be a class or function or variable deﬁned
  Cluster 42
    55-43 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 6.4. Packages 49
Page 56
  Cluster 0
    56-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    56-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in the previous item.
  Cluster 2
    56-3 - 93.6 - 880.29 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 6.4.1 Importing * From a Package
  Cluster 3
    56-4 - 93.6 - 849.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Now what happens when the user writes from sound.effects import *? Ideally, one would hope that this
  Cluster 4
    56-5 - 93.6 - 834.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - somehow goes out to the ﬁlesystem, ﬁnds which submodules are present in the package, and imports them
  Cluster 5
    56-6 - 93.6 - 818.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - all. This could take a long time and importing sub-modules might have unwanted side-eﬀects that should
  Cluster 6
    56-7 - 93.6 - 803.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - only happen when the sub-module is explicitly imported.
  Cluster 7
    56-8 - 93.6 - 781.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The only solution is for the package author to provide an explicit index of the package. The import statement
  Cluster 8
    56-9 - 93.6 - 765.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - uses the following convention: if a package’s __init__.py code deﬁnes a list named __all__, it is taken to
  Cluster 9
    56-10 - 93.6 - 750.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - be the list of module names that should be imported when from package import * is encountered. It is up
  Cluster 10
    56-11 - 93.6 - 734.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to the package author to keep this list up-to-date when a new version of the package is released. Package
  Cluster 11
    56-12 - 93.6 - 719.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - authors may also decide not to support it, if they don’t see a use for importing * from their package. For
  Cluster 12
    56-13 - 93.6 - 703.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - example, the ﬁle sound/effects/__init__.py could contain the following code:
  Cluster 13
    56-14 - 93.6 - 677.52 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - __all__ = ["echo", "surround", "reverse"]
  Cluster 14
    56-15 - 93.6 - 646.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This would mean that from sound.effects import * would import the three named submodules of the
  Cluster 15
    56-16 - 93.6 - 631.29 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - sound package.
  Cluster 16
    56-17 - 93.6 - 609.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If __all__ is not deﬁned, the statement from sound.effects import * does not import all submodules from
  Cluster 17
    56-18 - 93.6 - 593.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the package sound.effects into the current namespace; it only ensures that the package sound.effects
  Cluster 18
    56-19 - 93.6 - 578.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - has been imported (possibly running any initialization code in __init__.py) and then imports whatever
  Cluster 19
    56-20 - 93.6 - 562.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - names are deﬁned in the package. This includes any names deﬁned (and submodules explicitly loaded) by
  Cluster 20
    56-21 - 93.6 - 547.11 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - __init__.py. It also includes any submodules of the package that were explicitly loaded by previous import
  Cluster 21
    56-22 - 93.6 - 531.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - statements. Consider this code:
  Cluster 22
    56-23 - 93.6 - 505.53 24.82 - ffd - 35.864 - rgb(0, 112, 33) - import sound.effects.echo
  Cluster 23
    56-24 - 93.6 - 491.28 24.82 - ffd - 35.864 - rgb(0, 112, 33) - import sound.effects.surround
    56-24 - 93.6 - 477.04 24.89 - ffd - 35.864 - rgb(0, 112, 33) - from sound.effects import *
  Cluster 24
    56-25 - 93.6 - 446.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In this example, the echo and surround modules are imported in the current namespace because they are
  Cluster 25
    56-26 - 93.6 - 430.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - deﬁned in the sound.effects package when the from...import statement is executed. (This also works
  Cluster 26
    56-27 - 93.6 - 415.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - when __all__ is deﬁned.)
  Cluster 27
    56-28 - 93.6 - 393.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Although certain modules are designed to export only names that follow certain patterns when you use
  Cluster 28
    56-29 - 93.6 - 377.7 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - import *, it is still considered bad practice in production code.
  Cluster 29
    56-30 - 93.6 - 355.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Remember, there is nothing wrong with using from Package import specific_submodule! In fact, this is
  Cluster 30
    56-31 - 93.6 - 340.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the recommended notation unless the importing module needs to use submodules with the same name from
  Cluster 31
    56-32 - 93.6 - 324.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - diﬀerent packages.
  Cluster 32
    56-33 - 93.6 - 281.85 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 6.4.2 Intra-package References
  Cluster 33
    56-34 - 93.6 - 251.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When packages are structured into subpackages (as with the sound package in the example), you can use
  Cluster 34
    56-35 - 93.6 - 235.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - absolute imports to refer to submodules of siblings packages. For example, if the module sound.filters.
  Cluster 35
    56-36 - 93.6 - 220.38 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - vocoder needs to use the echo module in the sound.effects package, it can use from sound.effects
  Cluster 36
    56-37 - 93.6 - 204.83 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - import echo.
  Cluster 37
    56-38 - 93.6 - 182.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - You can also write relative imports, with the from module import name form of import statement. These
  Cluster 38
    56-39 - 93.6 - 167.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - imports use leading dots to indicate the current and parent packages involved in the relative import. From
  Cluster 39
    56-40 - 93.6 - 151.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the surround module for example, you might use:
  Cluster 40
    56-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 50 Chapter 6. Modules
Page 57
  Cluster 0
    57-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    57-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(0, 112, 33) - from . import echo
  Cluster 2
    57-3 - 93.6 - 902.2 24.89 - ffd - 35.864 - rgb(0, 112, 33) - from .. import formats
  Cluster 3
    57-4 - 93.6 - 887.95 24.89 - ffd - 35.864 - rgb(0, 112, 33) - from ..filters import equalizer
  Cluster 4
    57-5 - 93.6 - 857.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that relative imports are based on the name of the current module. Since the name of the main module
  Cluster 5
    57-6 - 93.6 - 841.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is always "__main__", modules intended for use as the main module of a Python application must always
  Cluster 6
    57-7 - 93.6 - 826.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - use absolute imports.
  Cluster 7
    57-8 - 93.6 - 783.42 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 6.4.3 Packages in Multiple Directories
  Cluster 8
    57-9 - 93.6 - 753.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Packages support one more special attribute, __path__. This is initialized to be a list containing the name
  Cluster 9
    57-10 - 93.6 - 737.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the directory holding the package’s __init__.py before the code in that ﬁle is executed. This variable
    57-10 - 93.6 - 721.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can be modiﬁed; doing so aﬀects future searches for modules and subpackages contained in the package.
  Cluster 10
    57-11 - 93.6 - 699.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - While this feature is not often needed, it can be used to extend the set of modules found in a package.
  Cluster 11
    57-12 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 6.4. Packages 51
Page 58
  Cluster 0
    58-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    58-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 52 Chapter 6. Modules
Page 59
  Cluster 0
    59-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    59-2 - 638.18 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - SEVEN
  Cluster 2
    59-3 - 498.68 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - INPUT AND OUTPUT
  Cluster 3
    59-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There are several ways to present the output of a program; data can be printed in a human-readable form,
  Cluster 4
    59-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - or written to a ﬁle for future use. This chapter will discuss some of the possibilities.
  Cluster 5
    59-6 - 93.6 - 663.91 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 7.1 Fancier Output Formatting
  Cluster 6
    59-7 - 93.6 - 627.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - So far we’ve encountered two ways of writing values: expression statements and the print() function.
  Cluster 7
    59-8 - 93.6 - 611.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (A third way is using the write() method of ﬁle objects; the standard output ﬁle can be referenced as
  Cluster 8
    59-9 - 93.6 - 596.09 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - sys.stdout. See the Library Reference for more information on this.)
  Cluster 9
    59-10 - 93.6 - 574.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Often you’ll want more control over the formatting of your output than simply printing space-separated
  Cluster 10
    59-11 - 93.6 - 558.53 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - values. There are several ways to format output.
  Cluster 11
    59-12 - 109.42 - 536.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • To use formatted string literals, begin a string with f or F before the opening quotation mark or triple
  Cluster 12
    59-13 - 125.98 - 520.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - quotation mark. Inside this string, you can write a Python expression between { and } characters that
  Cluster 13
    59-14 - 125.98 - 505.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can refer to variables or literal values.
  Cluster 14
    59-15 - 125.98 - 479.4 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> year = 2016 ; event = 'Referendum'
  Cluster 15
    59-16 - 125.98 - 465.15 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f'Results of the {year} {event}'
  Cluster 16
    59-17 - 125.98 - 450.9 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Results of the 2016 Referendum'
  Cluster 17
    59-18 - 109.42 - 420.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The str.format() method of strings requires more manual eﬀort. You’ll still use { and } to mark
  Cluster 18
    59-19 - 125.98 - 404.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - where a variable will be substituted and can provide detailed formatting directives, but you’ll also need
  Cluster 19
    59-20 - 125.98 - 389.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to provide the information to be formatted.
  Cluster 20
    59-21 - 125.98 - 363.09 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> yes_votes = 42_572_654 ; no_votes = 43_132_495
  Cluster 21
    59-22 - 125.98 - 348.86 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> percentage = yes_votes/(yes_votes+no_votes)
  Cluster 22
    59-23 - 125.98 - 334.61 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> '{:-9} YES votes {:2.2%}'.format(yes_votes, percentage)
  Cluster 23
    59-24 - 125.98 - 320.36 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ' 42572654 YES votes 49.67%'
  Cluster 24
    59-25 - 109.42 - 289.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Finally, you can do all the string handling yourself by using string slicing and concatenation operations
  Cluster 25
    59-26 - 125.98 - 274.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to create any layout you can imagine. The string type has some methods that perform useful operations
  Cluster 26
    59-27 - 125.98 - 258.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - for padding strings to a given column width.
  Cluster 27
    59-28 - 93.6 - 236.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When you don’t need fancy output but just want a quick display of some variables for debugging purposes,
  Cluster 28
    59-29 - 93.6 - 221.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - you can convert any value to a string with the repr() or str() functions.
  Cluster 29
    59-30 - 93.6 - 199.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The str() function is meant to return representations of values which are fairly human-readable, while
  Cluster 30
    59-31 - 93.6 - 183.46 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - repr() is meant to generate representations which can be read by the interpreter (or will force a SyntaxError
  Cluster 31
    59-32 - 93.6 - 167.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - if there is no equivalent syntax). For objects which don’t have a particular representation for human con-
  Cluster 32
    59-33 - 93.6 - 152.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sumption, str() will return the same value as repr(). Many values, such as numbers or structures like lists
  Cluster 33
    59-34 - 93.6 - 136.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and dictionaries, have the same representation using either function. Strings, in particular, have two distinct
  Cluster 34
    59-35 - 93.6 - 121.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - representations.
  Cluster 35
    59-36 - 93.6 - 99.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Some examples:
  Cluster 36
    59-37 - 687.75 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 53
Page 60
  Cluster 0
    60-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    60-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> s = 'Hello, world.'
  Cluster 2
    60-3 - 93.6 - 902.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> str(s)
  Cluster 3
    60-4 - 93.6 - 887.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Hello, world.'
    60-4 - 93.6 - 873.7 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> repr(s)
  Cluster 4
    60-5 - 93.6 - 859.46 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - "'Hello, world.'"
  Cluster 5
    60-6 - 93.6 - 845.21 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> str(1/7)
  Cluster 6
    60-7 - 93.6 - 830.96 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '0.14285714285714285'
  Cluster 7
    60-8 - 93.6 - 816.71 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x = 10 * 3.25
  Cluster 8
    60-9 - 93.6 - 802.48 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> y = 200 * 200
  Cluster 9
    60-10 - 93.6 - 788.23 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'
  Cluster 10
    60-11 - 93.6 - 773.98 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(s)
    60-11 - 93.6 - 759.73 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - The value of x is 32.5, and y is 40000...
  Cluster 11
    60-12 - 93.6 - 745.49 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # The repr() of a string adds string quotes and backslashes:
  Cluster 12
    60-13 - 93.6 - 731.24 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... hello = 'hello, world\n'
  Cluster 13
    60-14 - 93.6 - 716.99 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> hellos = repr(hello)
  Cluster 14
    60-15 - 93.6 - 702.74 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(hellos)
  Cluster 15
    60-16 - 93.6 - 688.49 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'hello, world\n'
  Cluster 16
    60-17 - 93.6 - 674.26 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # The argument to repr() may be any Python object:
  Cluster 17
    60-18 - 93.6 - 660.01 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... repr((x, y, ('spam', 'eggs')))
    60-18 - 93.6 - 645.76 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - "(32.5, 40000, ('spam', 'eggs'))"
  Cluster 18
    60-19 - 93.6 - 615.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The string module contains a Template class that oﬀers yet another way to substitute values into strings,
  Cluster 19
    60-20 - 93.6 - 599.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - using placeholders like $x and replacing them with values from a dictionary, but oﬀers much less control of
  Cluster 20
    60-21 - 93.6 - 583.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the formatting.
  Cluster 21
    60-22 - 93.6 - 541.23 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 7.1.1 Formatted String Literals
  Cluster 22
    60-23 - 93.6 - 510.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Formatted string literals (also called f-strings for short) let you include the value of Python expressions inside
  Cluster 23
    60-24 - 93.6 - 495.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a string by preﬁxing the string with f or F and writing expressions as {expression}.
  Cluster 24
    60-25 - 93.6 - 473.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - An optional format speciﬁer can follow the expression. This allows greater control over how the value is
  Cluster 25
    60-26 - 93.6 - 457.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - formatted. The following example rounds pi to three places after the decimal:
  Cluster 26
    60-27 - 93.6 - 431.7 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import math
  Cluster 27
    60-28 - 93.6 - 417.46 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(f'The value of pi is approximately {math.pi:.3f}.')
  Cluster 28
    60-29 - 93.6 - 386.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Passing an integer after the ':' will cause that ﬁeld to be a minimum number of characters wide. This is
  Cluster 29
    60-30 - 93.6 - 371.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - useful for making columns line up.
  Cluster 30
    60-31 - 93.6 - 345.19 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
  Cluster 31
    60-32 - 93.6 - 330.94 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for name, phone in table.items():
  Cluster 32
    60-33 - 93.6 - 316.69 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(f'{name:10} ==> {phone:10d}')
  Cluster 33
    60-34 - 93.6 - 302.46 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 34
    60-35 - 93.6 - 288.21 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Sjoerd ==> 4127
  Cluster 35
    60-36 - 93.6 - 273.96 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Jack ==> 4098
    60-36 - 93.6 - 259.71 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Dcab ==> 7678
  Cluster 36
    60-37 - 93.6 - 229.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Other modiﬁers can be used to convert the value before it is formatted. '!a' applies ascii(), '!s' applies
  Cluster 37
    60-38 - 93.6 - 213.47 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - str(), and '!r' applies repr():
  Cluster 38
    60-39 - 93.6 - 187.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> animals = 'eels'
  Cluster 39
    60-40 - 93.6 - 173.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(f'My hovercraft is full of {animals}.')
  Cluster 40
    60-41 - 93.6 - 158.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - My hovercraft is full of eels.
  Cluster 41
    60-42 - 93.6 - 144.7 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('My hovercraft is full of {animals !r}.')
    60-42 - 93.6 - 130.46 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - My hovercraft is full of 'eels'.
  Cluster 42
    60-43 - 93.6 - 99.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For a reference on these format speciﬁcations, see the reference guide for the formatspec.
  Cluster 43
    60-44 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 54 Chapter 7. Input and Output
Page 61
  Cluster 0
    61-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    61-2 - 93.6 - 923.05 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 7.1.2 The String format() Method
  Cluster 2
    61-3 - 93.6 - 892.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Basic usage of the str.format() method looks like this:
  Cluster 3
    61-4 - 93.6 - 866.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('We are the {} who say "{}!"'.format('knights', 'Ni'))
  Cluster 4
    61-5 - 93.6 - 852.68 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - We are the knights who say "Ni!"
  Cluster 5
    61-6 - 93.6 - 821.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The brackets and characters within them (called format ﬁelds) are replaced with the objects passed into the
  Cluster 6
    61-7 - 93.6 - 806.44 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - str.format() method. A number in the brackets can be used to refer to the position of the object passed
  Cluster 7
    61-8 - 93.6 - 790.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - into the str.format() method.
  Cluster 8
    61-9 - 93.6 - 765.17 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('{0} and {1}'.format('spam', 'eggs'))
  Cluster 9
    61-10 - 93.6 - 750.93 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - spam and eggs
  Cluster 10
    61-11 - 93.6 - 736.68 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('{1} and {0}'.format('spam', 'eggs'))
  Cluster 11
    61-12 - 93.6 - 722.44 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - eggs and spam
  Cluster 12
    61-13 - 93.6 - 691.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If keyword arguments are used in the str.format() method, their values are referred to by using the name
  Cluster 13
    61-14 - 93.6 - 676.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the argument.
  Cluster 14
    61-15 - 93.6 - 650.47 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('This {food} is {adjective}.'.format(
  Cluster 15
    61-16 - 93.6 - 636.22 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... food='spam', adjective='absolutely horrible'))
  Cluster 16
    61-17 - 93.6 - 621.97 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - This spam is absolutely horrible.
  Cluster 17
    61-18 - 93.6 - 591.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Positional and keyword arguments can be arbitrarily combined:
  Cluster 18
    61-19 - 93.6 - 565.55 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',
  Cluster 19
    61-20 - 430.17 - 551.3 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - other='Georg'))
  Cluster 20
    61-21 - 93.6 - 537.06 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - The story of Bill, Manfred, and Georg.
  Cluster 21
    61-22 - 93.6 - 506.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you have a really long format string that you don’t want to split up, it would be nice if you could reference
  Cluster 22
    61-23 - 93.6 - 490.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the variables to be formatted by name instead of by position. This can be done by simply passing the dict
  Cluster 23
    61-24 - 93.6 - 475.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and using square brackets '[]' to access the keys
  Cluster 24
    61-25 - 93.6 - 449.55 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
  Cluster 25
    61-26 - 93.6 - 435.31 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '
    61-26 - 93.6 - 421.06 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... 'Dcab: {0[Dcab]:d}'.format(table))
    61-26 - 93.6 - 406.81 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Jack: 4098; Sjoerd: 4127; Dcab: 8637678
  Cluster 26
    61-27 - 93.6 - 376.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This could also be done by passing the table as keyword arguments with the ‘**’ notation.
  Cluster 27
    61-28 - 93.6 - 350.39 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
  Cluster 28
    61-29 - 93.6 - 336.14 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table))
  Cluster 29
    61-30 - 93.6 - 321.89 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Jack: 4098; Sjoerd: 4127; Dcab: 8637678
  Cluster 30
    61-31 - 93.6 - 291.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This is particularly useful in combination with the built-in function vars(), which returns a dictionary
  Cluster 31
    61-32 - 93.6 - 275.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - containing all local variables.
  Cluster 32
    61-33 - 93.6 - 253.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - As an example, the following lines produce a tidily-aligned set of columns giving integers and their squares
  Cluster 33
    61-34 - 93.6 - 238.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and cubes:
  Cluster 34
    61-35 - 93.6 - 212.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for x in range(1, 11):
  Cluster 35
    61-36 - 93.6 - 198.12 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))
    61-36 - 93.6 - 183.87 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 36
    61-37 - 99.72 - 169.62 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1 1 1
  Cluster 37
    61-38 - 99.72 - 155.38 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 2 4 8
  Cluster 38
    61-39 - 99.72 - 141.13 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 3 9 27
  Cluster 39
    61-40 - 99.72 - 126.88 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 4 16 64
  Cluster 40
    61-41 - 99.72 - 112.64 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 5 25 125
  Cluster 41
    61-42 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 42
    61-43 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 7.1. Fancier Output Formatting 55
Page 62
  Cluster 0
    62-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    62-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    62-3 - 99.72 - 904.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 6 36 216
  Cluster 3
    62-4 - 99.72 - 890.54 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 7 49 343
  Cluster 4
    62-5 - 99.72 - 876.29 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 8 64 512
  Cluster 5
    62-6 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 10 100 1000

    =====
    62-6 - 99.72 - 862.04 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 9 81 729
  Cluster 6
    62-7 - 93.6 - 817.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For a complete overview of string formatting with str.format(), see formatstrings.
  Cluster 7
    62-8 - 93.6 - 774.36 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 7.1.3 Manual String Formatting
  Cluster 8
    62-9 - 93.6 - 743.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Here’s the same table of squares and cubes, formatted manually:
  Cluster 9
    62-10 - 93.6 - 717.94 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for x in range(1, 11):
  Cluster 10
    62-11 - 93.6 - 703.69 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')
  Cluster 11
    62-12 - 93.6 - 689.44 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... # Note use of 'end' on previous line
    62-12 - 93.6 - 675.19 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(repr(x*x*x).rjust(4))
  Cluster 12
    62-13 - 93.6 - 660.95 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 13
    62-14 - 99.72 - 646.7 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1 1 1
  Cluster 14
    62-15 - 99.72 - 632.45 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 2 4 8
  Cluster 15
    62-16 - 99.72 - 618.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 3 9 27
  Cluster 16
    62-17 - 99.72 - 603.97 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 4 16 64
  Cluster 17
    62-18 - 99.72 - 589.72 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 5 25 125
  Cluster 18
    62-19 - 99.72 - 575.47 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 6 36 216
    62-19 - 99.72 - 561.22 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 7 49 343
  Cluster 19
    62-20 - 99.72 - 546.98 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 8 64 512
  Cluster 20
    62-21 - 99.72 - 532.73 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 9 81 729
  Cluster 21
    62-22 - 93.6 - 518.48 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 10 100 1000
  Cluster 22
    62-23 - 93.6 - 487.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (Note that the one space between each column was added by the way print() works: it always adds spaces
  Cluster 23
    62-24 - 93.6 - 472.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - between its arguments.)
  Cluster 24
    62-25 - 93.6 - 450.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The str.rjust() method of string objects right-justiﬁes a string in a ﬁeld of a given width by padding it
  Cluster 25
    62-26 - 93.6 - 434.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with spaces on the left. There are similar methods str.ljust() and str.center(). These methods do not
  Cluster 26
    62-27 - 93.6 - 419.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - write anything, they just return a new string. If the input string is too long, they don’t truncate it, but
  Cluster 27
    62-28 - 93.6 - 403.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - return it unchanged; this will mess up your column lay-out but that’s usually better than the alternative,
  Cluster 28
    62-29 - 93.6 - 388.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - which would be lying about a value. (If you really want truncation you can always add a slice operation, as
  Cluster 29
    62-30 - 93.6 - 372.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in x.ljust(n)[:n].)
  Cluster 30
    62-31 - 93.6 - 350.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There is another method, str.zfill(), which pads a numeric string on the left with zeros. It understands
  Cluster 31
    62-32 - 93.6 - 334.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - about plus and minus signs:
  Cluster 32
    62-33 - 93.6 - 308.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> '12'.zfill(5)
  Cluster 33
    62-34 - 93.6 - 294.68 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '00012'
  Cluster 34
    62-35 - 93.6 - 280.44 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> '-3.14'.zfill(7)
  Cluster 35
    62-36 - 93.6 - 266.19 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '-003.14'
    62-36 - 93.6 - 251.94 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> '3.14159265359'.zfill(5)
    62-36 - 93.6 - 237.69 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '3.14159265359'
  Cluster 36
    62-37 - 93.6 - 186.26 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 7.1.4 Old string formatting
  Cluster 37
    62-38 - 93.6 - 155.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The % operator can also be used for string formatting. It interprets the left argument much like a sprintf()-
  Cluster 38
    62-39 - 93.6 - 140.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - style format string to be applied to the right argument, and returns the string resulting from this formatting
  Cluster 39
    62-40 - 93.6 - 124.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - operation. For example:
  Cluster 40
    62-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 56 Chapter 7. Input and Output
Page 63
  Cluster 0
    63-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    63-2 - 93.6 - 916.45 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import math
  Cluster 2
    63-3 - 93.6 - 902.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print('The value of pi is approximately %5.3f.' % math.pi)
  Cluster 3
    63-4 - 93.6 - 887.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - The value of pi is approximately 3.142.
  Cluster 4
    63-5 - 93.6 - 857.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - More information can be found in the old-string-formatting section.
  Cluster 5
    63-6 - 93.6 - 807.92 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 7.2 Reading and Writing Files
  Cluster 6
    63-7 - 93.6 - 771.2 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - open() returns a ﬁle object, and is most commonly used with two arguments: open(filename, mode).
  Cluster 7
    63-8 - 93.6 - 745.16 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f = open('workfile', 'w')
  Cluster 8
    63-9 - 93.6 - 714.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The ﬁrst argument is a string containing the ﬁlename. The second argument is another string containing a
  Cluster 9
    63-10 - 93.6 - 698.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - few characters describing the way in which the ﬁle will be used. mode can be 'r' when the ﬁle will only
  Cluster 10
    63-11 - 93.6 - 683.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - be read, 'w' for only writing (an existing ﬁle with the same name will be erased), and 'a' opens the ﬁle
  Cluster 11
    63-12 - 93.6 - 667.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - for appending; any data written to the ﬁle is automatically added to the end. 'r+' opens the ﬁle for both
  Cluster 12
    63-13 - 93.6 - 652.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - reading and writing. The mode argument is optional; 'r' will be assumed if it’s omitted.
  Cluster 13
    63-14 - 93.6 - 630.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Normally, ﬁles are opened in text mode, that means, you read and write strings from and to the ﬁle, which are
  Cluster 14
    63-15 - 93.6 - 614.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - encoded in a speciﬁc encoding. If encoding is not speciﬁed, the default is platform dependent (see open()).
  Cluster 15
    63-16 - 93.6 - 599.2 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - 'b' appended to the mode opens the ﬁle in binary mode: now the data is read and written in the form of
  Cluster 16
    63-17 - 93.6 - 583.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - bytes objects. This mode should be used for all ﬁles that don’t contain text.
  Cluster 17
    63-18 - 93.6 - 561.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In text mode, the default when reading is to convert platform-speciﬁc line endings (\n on Unix, \r\n on
  Cluster 18
    63-19 - 93.6 - 546.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Windows) to just \n. When writing in text mode, the default is to convert occurrences of \n back to
  Cluster 19
    63-20 - 93.6 - 530.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - platform-speciﬁc line endings. This behind-the-scenes modiﬁcation to ﬁle data is ﬁne for text ﬁles, but will
  Cluster 20
    63-21 - 93.6 - 515.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - corrupt binary data like that in JPEG or EXE ﬁles. Be very careful to use binary mode when reading and
  Cluster 21
    63-22 - 93.6 - 499.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - writing such ﬁles.
  Cluster 22
    63-23 - 93.6 - 477.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is good practice to use the with keyword when dealing with ﬁle objects. The advantage is that the ﬁle is
  Cluster 23
    63-24 - 93.6 - 461.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - properly closed after its suite ﬁnishes, even if an exception is raised at some point. Using with is also much
  Cluster 24
    63-25 - 93.6 - 446.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - shorter than writing equivalent try-finally blocks:
  Cluster 25
    63-26 - 93.6 - 420.34 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> with open('workfile') as f:
  Cluster 26
    63-27 - 93.6 - 406.09 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... read_data = f.read()
    63-27 - 93.6 - 391.85 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.closed
    63-27 - 93.6 - 377.6 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - True
  Cluster 27
    63-28 - 93.6 - 346.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you’re not using the with keyword, then you should call f.close() to close the ﬁle and immediately
  Cluster 28
    63-29 - 93.6 - 331.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - free up any system resources used by it. If you don’t explicitly close a ﬁle, Python’s garbage collector will
  Cluster 29
    63-30 - 93.6 - 315.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - eventually destroy the object and close the open ﬁle for you, but the ﬁle may stay open for a while. Another
  Cluster 30
    63-31 - 93.6 - 300.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - risk is that diﬀerent Python implementations will do this clean-up at diﬀerent times.
  Cluster 31
    63-32 - 93.6 - 278.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - After a ﬁle object is closed, either by a with statement or by calling f.close(), attempts to use the ﬁle
  Cluster 32
    63-33 - 93.6 - 262.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object will automatically fail.
  Cluster 33
    63-34 - 93.6 - 236.69 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.close()
  Cluster 34
    63-35 - 93.6 - 222.44 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.read()
  Cluster 35
    63-36 - 93.6 - 208.19 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
  Cluster 36
    63-37 - 93.6 - 179.7 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - ValueError: I/O operation on closed file.

    =====
    63-37 - 105.83 - 193.95 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
  Cluster 37
    63-38 - 93.6 - 128.27 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 7.2.1 Methods of File Objects
  Cluster 38
    63-39 - 93.6 - 97.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The rest of the examples in this section will assume that a ﬁle object called f has already been created.
  Cluster 39
    63-40 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 7.2. Reading and Writing Files 57
Page 64
  Cluster 0
    64-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    64-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To read a ﬁle’s contents, call f.read(size), which reads some quantity of data and returns it as a string (in
  Cluster 2
    64-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - text mode) or bytes object (in binary mode). size is an optional numeric argument. When size is omitted
  Cluster 3
    64-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - or negative, the entire contents of the ﬁle will be read and returned; it’s your problem if the ﬁle is twice as
  Cluster 4
    64-5 - 93.6 - 876.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - large as your machine’s memory. Otherwise, at most size bytes are read and returned. If the end of the ﬁle
  Cluster 5
    64-6 - 93.6 - 860.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - has been reached, f.read() will return an empty string ('').
  Cluster 6
    64-7 - 93.6 - 835.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.read()
  Cluster 7
    64-8 - 93.6 - 821.12 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'This is the entire file.\n'
  Cluster 8
    64-9 - 93.6 - 806.87 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.read()
  Cluster 9
    64-10 - 93.6 - 792.62 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ''
  Cluster 10
    64-11 - 93.6 - 761.93 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - f.readline() reads a single line from the ﬁle; a newline character (\n) is left at the end of the string, and
  Cluster 11
    64-12 - 93.6 - 746.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is only omitted on the last line of the ﬁle if the ﬁle doesn’t end in a newline. This makes the return value
  Cluster 12
    64-13 - 93.6 - 730.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - unambiguous; if f.readline() returns an empty string, the end of the ﬁle has been reached, while a blank
  Cluster 13
    64-14 - 93.6 - 715.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - line is represented by '\n', a string containing only a single newline.
  Cluster 14
    64-15 - 93.6 - 689.78 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.readline()
  Cluster 15
    64-16 - 93.6 - 675.53 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'This is the first line of the file.\n'
  Cluster 16
    64-17 - 93.6 - 661.28 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.readline()
    64-17 - 93.6 - 647.04 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Second line of the file\n'
  Cluster 17
    64-18 - 93.6 - 632.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.readline()
  Cluster 18
    64-19 - 93.6 - 618.55 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ''
  Cluster 19
    64-20 - 93.6 - 587.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For reading lines from a ﬁle, you can loop over the ﬁle object. This is memory eﬃcient, fast, and leads to
  Cluster 20
    64-21 - 93.6 - 572.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - simple code:
  Cluster 21
    64-22 - 93.6 - 546.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for line in f:
  Cluster 22
    64-23 - 93.6 - 532.54 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(line, end='')
  Cluster 23
    64-24 - 93.6 - 518.3 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 24
    64-25 - 93.6 - 504.05 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - This is the first line of the file.
  Cluster 25
    64-26 - 93.6 - 489.8 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Second line of the file
  Cluster 26
    64-27 - 93.6 - 459.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you want to read all the lines of a ﬁle in a list you can also use list(f) or f.readlines().
  Cluster 27
    64-28 - 93.6 - 437.09 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - f.write(string) writes the contents of string to the ﬁle, returning the number of characters written.
  Cluster 28
    64-29 - 93.6 - 411.57 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.write('This is a test\n')
  Cluster 29
    64-30 - 93.6 - 397.32 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 15
  Cluster 30
    64-31 - 93.6 - 366.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Other types of objects need to be converted – either to a string (in text mode) or a bytes object (in binary
  Cluster 31
    64-32 - 93.6 - 351.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - mode) – before writing them:
  Cluster 32
    64-33 - 93.6 - 325.57 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> value = ('the answer', 42)
  Cluster 33
    64-34 - 93.6 - 311.32 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> s = str(value) # convert the tuple to string
    64-34 - 93.6 - 297.08 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.write(s)
  Cluster 34
    64-35 - 93.6 - 282.83 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 18
  Cluster 35
    64-36 - 93.6 - 252.13 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - f.tell() returns an integer giving the ﬁle object’s current position in the ﬁle represented as number of bytes
  Cluster 36
    64-37 - 93.6 - 236.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - from the beginning of the ﬁle when in binary mode and an opaque number when in text mode.
  Cluster 37
    64-38 - 93.6 - 214.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To change the ﬁle object’s position, use f.seek(offset, from_what). The position is computed from
  Cluster 38
    64-39 - 93.6 - 199.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - adding oﬀset to a reference point; the reference point is selected by the from_what argument. A from_what
  Cluster 39
    64-40 - 93.6 - 183.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - value of 0 measures from the beginning of the ﬁle, 1 uses the current ﬁle position, and 2 uses the end of the
  Cluster 40
    64-41 - 93.6 - 167.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁle as the reference point. from_what can be omitted and defaults to 0, using the beginning of the ﬁle as
  Cluster 41
    64-42 - 93.6 - 152.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the reference point.
  Cluster 42
    64-43 - 93.6 - 126.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f = open('workfile', 'rb+')
  Cluster 43
    64-44 - 93.6 - 112.64 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.write(b'0123456789abcdef')
  Cluster 44
    64-45 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 45
    64-46 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 58 Chapter 7. Input and Output
Page 65
  Cluster 0
    65-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    65-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    65-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 16
  Cluster 3
    65-4 - 93.6 - 890.54 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.seek(5) # Go to the 6th byte in the file
  Cluster 4
    65-5 - 93.6 - 876.29 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 5
  Cluster 5
    65-6 - 93.6 - 862.04 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.read(1)
    65-6 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - b'5'
  Cluster 6
    65-7 - 93.6 - 833.56 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.seek(-3, 2) # Go to the 3rd byte before the end
  Cluster 7
    65-8 - 93.6 - 819.31 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 13
  Cluster 8
    65-9 - 93.6 - 805.06 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> f.read(1)
  Cluster 9
    65-10 - 93.6 - 790.82 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - b'd'
  Cluster 10
    65-11 - 93.6 - 760.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In text ﬁles (those opened without a b in the mode string), only seeks relative to the beginning of the ﬁle are
  Cluster 11
    65-12 - 93.6 - 744.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - allowed (the exception being seeking to the very ﬁle end with seek(0, 2)) and the only valid oﬀset values
  Cluster 12
    65-13 - 93.6 - 729.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are those returned from the f.tell(), or zero. Any other oﬀset value produces undeﬁned behaviour.
  Cluster 13
    65-14 - 93.6 - 707.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - File objects have some additional methods, such as isatty() and truncate() which are less frequently
  Cluster 14
    65-15 - 93.6 - 691.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - used; consult the Library Reference for a complete guide to ﬁle objects.
  Cluster 15
    65-16 - 93.6 - 648.73 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 7.2.2 Saving structured data with json
  Cluster 16
    65-17 - 93.6 - 618.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Strings can easily be written to and read from a ﬁle. Numbers take a bit more eﬀort, since the read()
  Cluster 17
    65-18 - 93.6 - 602.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - method only returns strings, which will have to be passed to a function like int(), which takes a string like
  Cluster 18
    65-19 - 93.6 - 587.25 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - '123' and returns its numeric value 123. When you want to save more complex data types like nested lists
  Cluster 19
    65-20 - 93.6 - 571.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and dictionaries, parsing and serializing by hand becomes complicated.
  Cluster 20
    65-21 - 93.6 - 549.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Rather than having users constantly writing and debugging code to save complicated data types to ﬁles,
  Cluster 21
    65-22 - 93.6 - 534.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python allows you to use the popular data interchange format called JSON (JavaScript Object Notation).
  Cluster 22
    65-23 - 93.6 - 518.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The standard module called json can take Python data hierarchies, and convert them to string represen-
  Cluster 23
    65-24 - 93.6 - 503.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - tations; this process is called serializing. Reconstructing the data from the string representation is called
  Cluster 24
    65-25 - 93.6 - 487.53 29.89 - ff6 - 39.852 - rgb(0, 0, 0) - deserializing. Between serializing and deserializing, the string representing the object may have been stored
  Cluster 25
    65-26 - 93.6 - 471.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in a ﬁle or data, or sent over a network connection to some distant machine.
  Cluster 26
    65-27 - 93.6 - 434.42 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - Note: The JSON format is commonly used by modern applications to allow for data exchange. Many
  Cluster 27
    65-28 - 93.6 - 418.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - programmers are already familiar with it, which makes it a good choice for interoperability.
  Cluster 28
    65-29 - 93.6 - 381.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you have an object x, you can view its JSON string representation with a simple line of code:
  Cluster 29
    65-30 - 93.6 - 355.29 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import json
  Cluster 30
    65-31 - 93.6 - 341.04 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> json.dumps([1, 'simple', 'list'])
  Cluster 31
    65-32 - 93.6 - 326.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '[1, "simple", "list"]'
  Cluster 32
    65-33 - 93.6 - 296.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Another variant of the dumps() function, called dump(), simply serializes the object to a text ﬁle. So if f is
  Cluster 33
    65-34 - 93.6 - 280.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a text ﬁle object opened for writing, we can do this:
  Cluster 34
    65-35 - 93.6 - 254.53 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - json.dump(x, f)
  Cluster 35
    65-36 - 93.6 - 223.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To decode the object again, if f is a text ﬁle object which has been opened for reading:
  Cluster 36
    65-37 - 93.6 - 197.81 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - x = json.load(f)
  Cluster 37
    65-38 - 93.6 - 167.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This simple serialization technique can handle lists and dictionaries, but serializing arbitrary class instances
  Cluster 38
    65-39 - 93.6 - 151.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in JSON requires a bit of extra eﬀort. The reference for the json module contains an explanation of this.
  Cluster 39
    65-40 - 93.6 - 129.54 27.9 - ff3 - 39.852 - rgb(0, 0, 0) - See also:
  Cluster 40
    65-41 - 93.6 - 107.54 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - pickle - the pickle module
  Cluster 41
    65-42 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 7.2. Reading and Writing Files 59
Page 66
  Cluster 0
    66-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    66-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Contrary to JSON , pickle is a protocol which allows the serialization of arbitrarily complex Python objects.
  Cluster 2
    66-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - As such, it is speciﬁc to Python and cannot be used to communicate with applications written in other
  Cluster 3
    66-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - languages. It is also insecure by default: deserializing pickle data coming from an untrusted source can
  Cluster 4
    66-5 - 93.6 - 876.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - execute arbitrary code, if the data was crafted by a skilled attacker.
  Cluster 5
    66-6 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 60 Chapter 7. Input and Output
Page 67
  Cluster 0
    67-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    67-2 - 641.71 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - EIGHT
  Cluster 2
    67-3 - 443.4 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - ERRORS AND EXCEPTIONS
  Cluster 3
    67-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Until now error messages haven’t been more than mentioned, but if you have tried out the examples you have
  Cluster 4
    67-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - probably seen some. There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.
  Cluster 5
    67-6 - 93.6 - 663.91 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 8.1 Syntax Errors
  Cluster 6
    67-7 - 93.6 - 627.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while
  Cluster 7
    67-8 - 93.6 - 611.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - you are still learning Python:
  Cluster 8
    67-9 - 93.6 - 585.6 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> while True print('Hello world')
  Cluster 9
    67-10 - 105.83 - 571.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1
  Cluster 10
    67-11 - 118.08 - 557.1 24.89 - ffd - 35.864 - rgb(0, 112, 33) - while True print('Hello world')
  Cluster 11
    67-12 - 209.87 - 542.87 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - ^
  Cluster 12
    67-13 - 93.6 - 528.62 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - SyntaxError: invalid syntax
  Cluster 13
    67-14 - 93.6 - 497.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The parser repeats the oﬀending line and displays a little ‘arrow’ pointing at the earliest point in the line
  Cluster 14
    67-15 - 93.6 - 482.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - where the error was detected. The error is caused by (or at least detected at) the token preceding the arrow:
  Cluster 15
    67-16 - 93.6 - 466.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in the example, the error is detected at the function print(), since a colon (':') is missing before it. File
  Cluster 16
    67-17 - 93.6 - 451.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - name and line number are printed so you know where to look in case the input came from a script.
  Cluster 17
    67-18 - 93.6 - 401.97 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 8.2 Exceptions
  Cluster 18
    67-19 - 93.6 - 365.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made
  Cluster 19
    67-20 - 93.6 - 349.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal: you
  Cluster 20
    67-21 - 93.6 - 334.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - will soon learn how to handle them in Python programs. Most exceptions are not handled by programs,
    67-21 - 93.6 - 318.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - however, and result in error messages as shown here:
  Cluster 21
    67-22 - 93.6 - 292.58 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 10 * (1/0)
  Cluster 22
    67-23 - 93.6 - 278.33 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
    67-23 - 93.6 - 249.83 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - ZeroDivisionError: division by zero
    67-23 - 93.6 - 235.59 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 4 + spam*3

    =====
    67-23 - 105.83 - 264.08 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
  Cluster 23
    67-24 - 93.6 - 221.35 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
  Cluster 24
    67-25 - 105.83 - 207.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
  Cluster 25
    67-26 - 93.6 - 192.85 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - NameError: name 'spam' is not defined
  Cluster 26
    67-27 - 93.6 - 178.61 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> '2' + 2
    67-27 - 93.6 - 164.36 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
  Cluster 27
    67-28 - 105.83 - 150.11 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
  Cluster 28
    67-29 - 93.6 - 135.86 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - TypeError: Can't convert 'int' object to str implicitly
  Cluster 29
    67-30 - 687.75 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 61
Page 68
  Cluster 0
    68-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    68-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The last line of the error message indicates what happened. Exceptions come in diﬀerent types, and the
  Cluster 2
    68-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - type is printed as part of the message: the types in the example are ZeroDivisionError, NameError and
  Cluster 3
    68-4 - 93.6 - 891.97 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - TypeError. The string printed as the exception type is the name of the built-in exception that occurred.
  Cluster 4
    68-5 - 93.6 - 876.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This is true for all built-in exceptions, but need not be true for user-deﬁned exceptions (although it is a
  Cluster 5
    68-6 - 93.6 - 860.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - useful convention). Standard exception names are built-in identiﬁers (not reserved keywords).
  Cluster 6
    68-7 - 93.6 - 838.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The rest of the line provides detail based on the type of exception and what caused it.
  Cluster 7
    68-8 - 93.6 - 816.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The preceding part of the error message shows the context where the exception happened, in the form of
  Cluster 8
    68-9 - 93.6 - 801.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a stack traceback. In general it contains a stack traceback listing source lines; however, it will not display
  Cluster 9
    68-10 - 93.6 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - lines read from standard input.
  Cluster 10
    68-11 - 93.6 - 763.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - bltin-exceptions lists the built-in exceptions and their meanings.
  Cluster 11
    68-12 - 93.6 - 714.41 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 8.3 Handling Exceptions
  Cluster 12
    68-13 - 93.6 - 677.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is possible to write programs that handle selected exceptions. Look at the following example, which asks
  Cluster 13
    68-14 - 93.6 - 662.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the user for input until a valid integer has been entered, but allows the user to interrupt the program (using
  Cluster 14
    68-15 - 93.6 - 646.61 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - Control-C or whatever the operating system supports); note that a user-generated interruption is signalled
  Cluster 15
    68-16 - 93.6 - 631.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - by raising the KeyboardInterrupt exception.
  Cluster 16
    68-17 - 93.6 - 605.03 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> while True:
  Cluster 17
    68-18 - 93.6 - 590.78 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... try:
  Cluster 18
    68-19 - 93.6 - 576.54 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... x = int(input("Please enter a number: "))
  Cluster 19
    68-20 - 93.6 - 562.29 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ... break
  Cluster 20
    68-21 - 93.6 - 548.04 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... except ValueError:
  Cluster 21
    68-22 - 93.6 - 533.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("Oops! That was no valid number. Try again...")
    68-22 - 93.6 - 519.54 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 22
    68-23 - 93.6 - 488.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The try statement works as follows.
  Cluster 23
    68-24 - 109.42 - 466.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • First, the try clause (the statement(s) between the try and except keywords) is executed.
  Cluster 24
    68-25 - 109.42 - 444.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • If no exception occurs, the except clause is skipped and execution of the try statement is ﬁnished.
  Cluster 25
    68-26 - 109.42 - 422.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • If an exception occurs during execution of the try clause, the rest of the clause is skipped. Then if its
  Cluster 26
    68-27 - 125.98 - 407.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - type matches the exception named after the except keyword, the except clause is executed, and then
  Cluster 27
    68-28 - 125.98 - 391.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - execution continues after the try statement.
  Cluster 28
    68-29 - 109.42 - 369.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • If an exception occurs which does not match the exception named in the except clause, it is passed on
  Cluster 29
    68-30 - 125.98 - 354.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to outer try statements; if no handler is found, it is an unhandled exception and execution stops with
  Cluster 30
    68-31 - 125.98 - 338.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a message as shown above.
  Cluster 31
    68-32 - 93.6 - 316.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A try statement may have more than one except clause, to specify handlers for diﬀerent exceptions. At
  Cluster 32
    68-33 - 93.6 - 301.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - most one handler will be executed. Handlers only handle exceptions that occur in the corresponding try
  Cluster 33
    68-34 - 93.6 - 285.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - clause, not in other handlers of the same try statement. An except clause may name multiple exceptions as
  Cluster 34
    68-35 - 93.6 - 269.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a parenthesized tuple, for example:
  Cluster 35
    68-36 - 93.6 - 243.94 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - ... except (RuntimeError, TypeError, NameError):
  Cluster 36
    68-37 - 93.6 - 229.7 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - ... pass
  Cluster 37
    68-38 - 93.6 - 199.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A class in an except clause is compatible with an exception if it is the same class or a base class thereof (but
  Cluster 38
    68-39 - 93.6 - 183.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - not the other way around — an except clause listing a derived class is not compatible with a base class).
  Cluster 39
    68-40 - 93.6 - 167.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For example, the following code will print B, C, D in that order:
  Cluster 40
    68-41 - 93.6 - 141.88 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class B(Exception):
  Cluster 41
    68-42 - 118.08 - 127.63 24.82 - ffd - 35.864 - rgb(0, 112, 33) - pass
  Cluster 42
    68-43 - 583.05 - 96.94 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 43
    68-44 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 62 Chapter 8. Errors and Exceptions
Page 69
  Cluster 0
    69-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    69-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    69-3 - 93.6 - 904.79 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class C(B):
  Cluster 3
    69-4 - 118.08 - 890.54 24.82 - ffd - 35.864 - rgb(0, 112, 33) - pass
  Cluster 4
    69-5 - 93.6 - 862.04 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class D(C):
  Cluster 5
    69-6 - 118.08 - 847.79 24.82 - ffd - 35.864 - rgb(0, 112, 33) - pass
  Cluster 6
    69-7 - 93.6 - 819.31 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for cls in [B, C, D]:
  Cluster 7
    69-8 - 118.08 - 805.06 24.89 - ffd - 35.864 - rgb(0, 112, 33) - try:
  Cluster 8
    69-9 - 142.56 - 790.82 24.89 - ffd - 35.864 - rgb(0, 112, 33) - raise cls()
  Cluster 9
    69-10 - 118.08 - 776.57 24.89 - ffd - 35.864 - rgb(0, 112, 33) - except D:
  Cluster 10
    69-11 - 142.56 - 762.32 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("D")
  Cluster 11
    69-12 - 118.08 - 748.07 24.89 - ffd - 35.864 - rgb(0, 112, 33) - except C:

    =====
    69-12 - 142.56 - 733.82 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("C")
  Cluster 12
    69-13 - 118.08 - 719.58 24.89 - ffd - 35.864 - rgb(0, 112, 33) - except B:
  Cluster 13
    69-14 - 142.56 - 705.34 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("B")
  Cluster 14
    69-15 - 93.6 - 674.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that if the except clauses were reversed (with except B ﬁrst), it would have printed B, B, B — the
  Cluster 15
    69-16 - 93.6 - 659.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁrst matching except clause is triggered.
  Cluster 16
    69-17 - 93.6 - 637.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The last except clause may omit the exception name(s), to serve as a wildcard. Use this with extreme
  Cluster 17
    69-18 - 93.6 - 621.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - caution, since it is easy to mask a real programming error in this way! It can also be used to print an error
  Cluster 18
    69-19 - 93.6 - 606.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - message and then re-raise the exception (allowing a caller to handle the exception as well):
  Cluster 19
    69-20 - 93.6 - 579.97 24.82 - ffd - 35.864 - rgb(0, 112, 33) - import sys
  Cluster 20
    69-21 - 93.6 - 551.47 24.89 - ffd - 35.864 - rgb(0, 112, 33) - try:
  Cluster 21
    69-22 - 118.08 - 537.23 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - f = open('myfile.txt')
  Cluster 22
    69-23 - 118.08 - 522.98 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - s = f.readline()
  Cluster 23
    69-24 - 93.6 - 494.48 24.89 - ffd - 35.864 - rgb(0, 112, 33) - except OSError as err:

    =====
    69-24 - 118.08 - 508.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - i = int(s.strip())
    69-24 - 118.08 - 480.23 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("OS error: {0}".format(err))
  Cluster 24
    69-25 - 93.6 - 466.0 24.89 - ffd - 35.864 - rgb(0, 112, 33) - except ValueError:
  Cluster 25
    69-26 - 93.6 - 437.5 24.89 - ffd - 35.864 - rgb(0, 112, 33) - except:

    =====
    69-26 - 118.08 - 451.75 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("Could not convert data to an integer.")
    69-26 - 118.08 - 423.25 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("Unexpected error:", sys.exc_info()[0])
  Cluster 26
    69-27 - 118.08 - 409.01 24.82 - ffd - 35.864 - rgb(0, 112, 33) - raise
  Cluster 27
    69-28 - 93.6 - 378.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The try … except statement has an optional else clause, which, when present, must follow all except clauses.
  Cluster 28
    69-29 - 93.6 - 362.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is useful for code that must be executed if the try clause does not raise an exception. For example:
  Cluster 29
    69-30 - 93.6 - 336.74 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for arg in sys.argv[1:]:
  Cluster 30
    69-31 - 118.08 - 322.49 24.89 - ffd - 35.864 - rgb(0, 112, 33) - try:
    69-31 - 118.08 - 294.0 24.89 - ffd - 35.864 - rgb(0, 112, 33) - except OSError:
    69-31 - 118.08 - 265.5 24.89 - ffd - 35.864 - rgb(0, 112, 33) - else:

    =====
    69-31 - 142.56 - 308.24 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - f = open(arg, 'r')
    69-31 - 142.56 - 279.75 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print('cannot open', arg)
  Cluster 31
    69-32 - 142.56 - 251.26 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(arg, 'has', len(f.readlines()), 'lines')
  Cluster 32
    69-33 - 142.56 - 237.02 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - f.close()
  Cluster 33
    69-34 - 93.6 - 206.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The use of the else clause is better than adding additional code to the try clause because it avoids acciden-
  Cluster 34
    69-35 - 93.6 - 190.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - tally catching an exception that wasn’t raised by the code being protected by the try … except statement.
  Cluster 35
    69-36 - 93.6 - 168.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When an exception occurs, it may have an associated value, also known as the exception’s argument. The
  Cluster 36
    69-37 - 93.6 - 153.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - presence and type of the argument depend on the exception type.
  Cluster 37
    69-38 - 93.6 - 131.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The except clause may specify a variable after the exception name. The variable is bound to an exception
  Cluster 38
    69-39 - 93.6 - 115.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - instance with the arguments stored in instance.args. For convenience, the exception instance deﬁnes
  Cluster 39
    69-40 - 93.6 - 100.11 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - __str__() so the arguments can be printed directly without having to reference .args. One may also
  Cluster 40
    69-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 8.3. Handling Exceptions 63
Page 70
  Cluster 0
    70-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    70-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - instantiate an exception ﬁrst before raising it and add any attributes to it as desired.
  Cluster 2
    70-3 - 93.6 - 897.91 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> try:
  Cluster 3
    70-4 - 93.6 - 883.66 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... raise Exception('spam', 'eggs')
  Cluster 4
    70-5 - 93.6 - 869.41 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... except Exception as inst:
  Cluster 5
    70-6 - 93.6 - 855.17 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(type(inst)) # the exception instance
  Cluster 6
    70-7 - 93.6 - 840.92 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(inst.args) # arguments stored in .args
    70-7 - 93.6 - 826.67 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(inst) # __str__ allows args to be printed directly,
  Cluster 7
    70-8 - 93.6 - 812.42 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... # but may be overridden in exception subclasses
  Cluster 8
    70-9 - 93.6 - 798.17 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... x, y = inst.args # unpack args
  Cluster 9
    70-10 - 93.6 - 783.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('x =', x)
  Cluster 10
    70-11 - 93.6 - 769.69 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('y =', y)
  Cluster 11
    70-12 - 93.6 - 755.44 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 12
    70-13 - 93.6 - 741.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - <class 'Exception'>
  Cluster 13
    70-14 - 93.6 - 726.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ('spam', 'eggs')
    70-14 - 93.6 - 712.7 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ('spam', 'eggs')
  Cluster 14
    70-15 - 93.6 - 698.45 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - x = spam
  Cluster 15
    70-16 - 93.6 - 684.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - y = eggs
  Cluster 16
    70-17 - 93.6 - 653.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If an exception has arguments, they are printed as the last part (‘detail’) of the message for unhandled
  Cluster 17
    70-18 - 93.6 - 637.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - exceptions.
  Cluster 18
    70-19 - 93.6 - 615.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Exception handlers don’t just handle exceptions if they occur immediately in the try clause, but also if they
  Cluster 19
    70-20 - 93.6 - 600.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - occur inside functions that are called (even indirectly) in the try clause. For example:
  Cluster 20
    70-21 - 93.6 - 575.26 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> def this_fails():
  Cluster 21
    70-22 - 93.6 - 561.01 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... x = 1/0
  Cluster 22
    70-23 - 93.6 - 546.77 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 23
    70-24 - 93.6 - 532.52 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> try:
  Cluster 24
    70-25 - 93.6 - 518.28 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... this_fails()
  Cluster 25
    70-26 - 93.6 - 504.04 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... except ZeroDivisionError as err:
    70-26 - 93.6 - 489.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('Handling run-time error:', err)
    70-26 - 93.6 - 475.54 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 26
    70-27 - 93.6 - 461.29 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Handling run-time error: division by zero
  Cluster 27
    70-28 - 93.6 - 404.05 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 8.4 Raising Exceptions
  Cluster 28
    70-29 - 93.6 - 367.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The raise statement allows the programmer to force a speciﬁed exception to occur. For example:
  Cluster 29
    70-30 - 93.6 - 342.17 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> raise NameError('HiThere')
  Cluster 30
    70-31 - 93.6 - 327.93 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):

    =====
    70-31 - 105.83 - 313.68 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
  Cluster 31
    70-32 - 93.6 - 299.44 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - NameError: HiThere
  Cluster 32
    70-33 - 93.6 - 268.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The sole argument to raise indicates the exception to be raised. This must be either an exception instance or
  Cluster 33
    70-34 - 93.6 - 253.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - an exception class (a class that derives from Exception). If an exception class is passed, it will be implicitly
  Cluster 34
    70-35 - 93.6 - 237.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - instantiated by calling its constructor with no arguments:
  Cluster 35
    70-36 - 93.6 - 212.51 24.89 - ffd - 35.864 - rgb(0, 112, 33) - raise ValueError # shorthand for 'raise ValueError()'
  Cluster 36
    70-37 - 93.6 - 181.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you need to determine whether an exception was raised but don’t intend to handle it, a simpler form of
  Cluster 37
    70-38 - 93.6 - 166.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the raise statement allows you to re-raise the exception:
  Cluster 38
    70-39 - 93.6 - 141.13 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> try:
  Cluster 39
    70-40 - 93.6 - 126.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... raise NameError('HiThere')
  Cluster 40
    70-41 - 93.6 - 112.64 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... except NameError:
  Cluster 41
    70-42 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 42
    70-43 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 64 Chapter 8. Errors and Exceptions
Page 71
  Cluster 0
    71-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    71-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    71-3 - 93.6 - 904.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('An exception flew by!')
  Cluster 3
    71-4 - 93.6 - 890.54 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ... raise
  Cluster 4
    71-5 - 93.6 - 876.29 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 5
    71-6 - 93.6 - 862.04 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - An exception flew by!
    71-6 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
  Cluster 6
    71-7 - 105.83 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 2, in <module>
  Cluster 7
    71-8 - 93.6 - 819.31 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - NameError: HiThere
  Cluster 8
    71-9 - 93.6 - 761.31 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 8.5 User-deﬁned Exceptions
  Cluster 9
    71-10 - 93.6 - 723.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Programs may name their own exceptions by creating a new exception class (see Classes for more about
  Cluster 10
    71-11 - 93.6 - 708.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python classes). Exceptions should typically be derived from the Exception class, either directly or indi-
  Cluster 11
    71-12 - 93.6 - 692.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - rectly.
  Cluster 12
    71-13 - 93.6 - 670.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Exception classes can be deﬁned which do anything any other class can do, but are usually kept simple, often
  Cluster 13
    71-14 - 93.6 - 655.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - only oﬀering a number of attributes that allow information about the error to be extracted by handlers for
  Cluster 14
    71-15 - 93.6 - 639.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the exception. When creating a module that can raise several distinct errors, a common practice is to create
  Cluster 15
    71-16 - 93.6 - 624.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a base class for exceptions deﬁned by that module, and subclass that to create speciﬁc exception classes for
  Cluster 16
    71-17 - 93.6 - 608.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - diﬀerent error conditions:
  Cluster 17
    71-18 - 93.6 - 582.69 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class Error(Exception):
  Cluster 18
    71-19 - 118.08 - 568.44 24.89 - ffe - 35.864 - rgb(64, 112, 161) - """Base class for exceptions in this module."""
  Cluster 19
    71-20 - 118.08 - 554.19 24.82 - ffd - 35.864 - rgb(0, 112, 33) - pass
  Cluster 20
    71-21 - 93.6 - 525.71 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class InputError(Error):
  Cluster 21
    71-22 - 118.08 - 511.46 24.89 - ffe - 35.864 - rgb(64, 112, 161) - """Exception raised for errors in the input.
  Cluster 22
    71-23 - 118.08 - 482.96 24.89 - ffe - 35.864 - rgb(64, 112, 161) - Attributes:
  Cluster 23
    71-24 - 142.56 - 468.71 24.89 - ffe - 35.864 - rgb(64, 112, 161) - expression -- input expression in which the error occurred
  Cluster 24
    71-25 - 118.08 - 440.22 24.89 - ffe - 35.864 - rgb(64, 112, 161) - """

    =====
    71-25 - 142.56 - 454.47 24.89 - ffe - 35.864 - rgb(64, 112, 161) - message -- explanation of the error
  Cluster 25
    71-26 - 118.08 - 411.72 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __init__(self, expression, message):
  Cluster 26
    71-27 - 142.56 - 397.49 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.expression = expression
  Cluster 27
    71-28 - 142.56 - 383.24 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.message = message
  Cluster 28
    71-29 - 93.6 - 354.74 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class TransitionError(Error):
  Cluster 29
    71-30 - 118.08 - 340.5 24.89 - ffe - 35.864 - rgb(64, 112, 161) - """Raised when an operation attempts a state transition that's not
  Cluster 30
    71-31 - 118.08 - 326.25 24.89 - ffe - 35.864 - rgb(64, 112, 161) - allowed.
  Cluster 31
    71-32 - 118.08 - 297.75 24.89 - ffe - 35.864 - rgb(64, 112, 161) - Attributes:
  Cluster 32
    71-33 - 142.56 - 283.5 24.89 - ffe - 35.864 - rgb(64, 112, 161) - previous -- state at beginning of transition
  Cluster 33
    71-34 - 142.56 - 269.27 24.89 - ffe - 35.864 - rgb(64, 112, 161) - next -- attempted new state
  Cluster 34
    71-35 - 142.56 - 255.02 24.89 - ffe - 35.864 - rgb(64, 112, 161) - message -- explanation of why the specific transition is not allowed
  Cluster 35
    71-36 - 118.08 - 240.77 24.89 - ffe - 35.864 - rgb(64, 112, 161) - """
  Cluster 36
    71-37 - 118.08 - 212.28 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __init__(self, previous, next, message):
  Cluster 37
    71-38 - 142.56 - 198.03 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.previous = previous
    71-38 - 142.56 - 183.78 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.next = next
  Cluster 38
    71-39 - 142.56 - 169.53 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.message = message
  Cluster 39
    71-40 - 93.6 - 138.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Most exceptions are deﬁned with names that end in “Error,” similar to the naming of the standard exceptions.
  Cluster 40
    71-41 - 93.6 - 116.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Many standard modules deﬁne their own exceptions to report errors that may occur in functions they deﬁne.
  Cluster 41
    71-42 - 93.6 - 101.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - More information on classes is presented in chapter Classes.
  Cluster 42
    71-43 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 8.5. User-deﬁned Exceptions 65
Page 72
  Cluster 0
    72-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    72-2 - 93.6 - 919.68 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 8.6 Deﬁning Clean-up Actions
  Cluster 2
    72-3 - 93.6 - 882.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The try statement has another optional clause which is intended to deﬁne clean-up actions that must be
  Cluster 3
    72-4 - 93.6 - 867.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - executed under all circumstances. For example:
  Cluster 4
    72-5 - 93.6 - 841.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> try:
  Cluster 5
    72-6 - 93.6 - 827.12 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... raise KeyboardInterrupt
    72-6 - 93.6 - 812.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... finally:
  Cluster 6
    72-7 - 93.6 - 798.63 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('Goodbye, world!')
  Cluster 7
    72-8 - 93.6 - 784.38 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 8
    72-9 - 93.6 - 770.15 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Goodbye, world!
  Cluster 9
    72-10 - 93.6 - 755.9 24.82 - ffd - 35.864 - rgb(13, 133, 181) - KeyboardInterrupt
  Cluster 10
    72-11 - 93.6 - 741.65 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
  Cluster 11
    72-12 - 105.83 - 727.4 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 2, in <module>
  Cluster 12
    72-13 - 93.6 - 696.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A ﬁnally clause is always executed before leaving the try statement, whether an exception has occurred or
  Cluster 13
    72-14 - 93.6 - 681.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - not. When an exception has occurred in the try clause and has not been handled by an except clause (or it
  Cluster 14
    72-15 - 93.6 - 665.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - has occurred in an except or else clause), it is re-raised after the finally clause has been executed. The
  Cluster 15
    72-16 - 93.6 - 650.08 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - finally clause is also executed “on the way out” when any other clause of the try statement is left via a
  Cluster 16
    72-17 - 93.6 - 634.54 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - break, continue or return statement. A more complicated example:
  Cluster 17
    72-18 - 93.6 - 608.5 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> def divide(x, y):
  Cluster 18
    72-19 - 93.6 - 594.26 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... try:
  Cluster 19
    72-20 - 93.6 - 580.01 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... result = x / y
  Cluster 20
    72-21 - 93.6 - 565.77 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... except ZeroDivisionError:
  Cluster 21
    72-22 - 93.6 - 551.52 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("division by zero!")
  Cluster 22
    72-23 - 93.6 - 537.28 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... else:
  Cluster 23
    72-24 - 93.6 - 523.03 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("result is", result)
  Cluster 24
    72-25 - 93.6 - 508.78 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... finally:
    72-25 - 93.6 - 494.53 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print("executing finally clause")
    72-25 - 93.6 - 480.29 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 25
    72-26 - 93.6 - 466.04 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> divide(2, 1)
  Cluster 26
    72-27 - 93.6 - 451.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - result is 2.0
    72-27 - 93.6 - 437.54 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - executing finally clause
  Cluster 27
    72-28 - 93.6 - 423.31 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> divide(2, 0)
  Cluster 28
    72-29 - 93.6 - 409.06 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - division by zero!
    72-29 - 93.6 - 394.81 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - executing finally clause
    72-29 - 93.6 - 380.56 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> divide("2", "1")
    72-29 - 93.6 - 366.31 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - executing finally clause
  Cluster 29
    72-30 - 93.6 - 352.07 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
  Cluster 30
    72-31 - 93.6 - 309.32 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - TypeError: unsupported operand type(s) for /: 'str' and 'str'

    =====
    72-31 - 105.83 - 337.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
    72-31 - 105.83 - 323.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 3, in divide
  Cluster 31
    72-32 - 93.6 - 278.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - As you can see, the finally clause is executed in any event. The TypeError raised by dividing two strings
  Cluster 32
    72-33 - 93.6 - 263.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is not handled by the except clause and therefore re-raised after the finally clause has been executed.
  Cluster 33
    72-34 - 93.6 - 241.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In real world applications, the finally clause is useful for releasing external resources (such as ﬁles or
  Cluster 34
    72-35 - 93.6 - 225.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - network connections), regardless of whether the use of the resource was successful.
  Cluster 35
    72-36 - 93.6 - 176.2 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 8.7 Predeﬁned Clean-up Actions
  Cluster 36
    72-37 - 93.6 - 139.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Some objects deﬁne standard clean-up actions to be undertaken when the object is no longer needed, regard-
  Cluster 37
    72-38 - 93.6 - 123.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - less of whether or not the operation using the object succeeded or failed. Look at the following example,
  Cluster 38
    72-39 - 93.6 - 108.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - which tries to open a ﬁle and print its contents to the screen.
  Cluster 39
    72-40 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 66 Chapter 8. Errors and Exceptions
Page 73
  Cluster 0
    73-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    73-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for line in open("myfile.txt"):
  Cluster 2
    73-3 - 118.08 - 902.2 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(line, end="")
  Cluster 3
    73-4 - 93.6 - 871.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The problem with this code is that it leaves the ﬁle open for an indeterminate amount of time after this part
  Cluster 4
    73-5 - 93.6 - 855.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the code has ﬁnished executing. This is not an issue in simple scripts, but can be a problem for larger
  Cluster 5
    73-6 - 93.6 - 840.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - applications. The with statement allows objects like ﬁles to be used in a way that ensures they are always
  Cluster 6
    73-7 - 93.6 - 824.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - cleaned up promptly and correctly.
  Cluster 7
    73-8 - 93.6 - 798.85 24.89 - ffd - 35.864 - rgb(0, 112, 33) - with open("myfile.txt") as f:
  Cluster 8
    73-9 - 118.08 - 784.6 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for line in f:
  Cluster 9
    73-10 - 142.56 - 770.35 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(line, end="")
  Cluster 10
    73-11 - 93.6 - 739.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - After the statement is executed, the ﬁle f is always closed, even if a problem was encountered while pro-
  Cluster 11
    73-12 - 93.6 - 724.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - cessing the lines. Objects which, like ﬁles, provide predeﬁned clean-up actions will indicate this in their
  Cluster 12
    73-13 - 93.6 - 708.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - documentation.
  Cluster 13
    73-14 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 8.7. Predeﬁned Clean-up Actions 67
Page 74
  Cluster 0
    74-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    74-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 68 Chapter 8. Errors and Exceptions
Page 75
  Cluster 0
    75-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    75-2 - 654.72 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - NINE
  Cluster 2
    75-3 - 618.23 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - CLASSES
  Cluster 3
    75-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Classes provide a means of bundling data and functionality together. Creating a new class creates a new type
  Cluster 4
    75-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of object, allowing new instances of that type to be made. Each class instance can have attributes attached
  Cluster 5
    75-6 - 93.6 - 697.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to it for maintaining its state. Class instances can also have methods (deﬁned by its class) for modifying its
  Cluster 6
    75-7 - 93.6 - 682.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - state.
  Cluster 7
    75-8 - 93.6 - 660.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Compared with other programming languages, Python’s class mechanism adds classes with a minimum of
  Cluster 8
    75-9 - 93.6 - 644.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - new syntax and semantics. It is a mixture of the class mechanisms found in C++ and Modula-3. Python
  Cluster 9
    75-10 - 93.6 - 629.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism
  Cluster 10
    75-11 - 93.6 - 613.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - allows multiple base classes, a derived class can override any methods of its base class or classes, and a
  Cluster 11
    75-12 - 93.6 - 597.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - method can call the method of a base class with the same name. Objects can contain arbitrary amounts and
  Cluster 12
    75-13 - 93.6 - 582.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - kinds of data. As is true for modules, classes partake of the dynamic nature of Python: they are created at
    75-13 - 93.6 - 566.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - runtime, and can be modiﬁed further after creation.
  Cluster 13
    75-14 - 93.6 - 544.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In C++ terminology, normally class members (including the data members) are public (except see below
  Cluster 14
    75-15 - 93.6 - 529.32 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - Private Variables), and all member functions are virtual. As in Modula-3, there are no shorthands for
  Cluster 15
    75-16 - 93.6 - 513.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - referencing the object’s members from its methods: the method function is declared with an explicit ﬁrst
  Cluster 16
    75-17 - 93.6 - 498.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - argument representing the object, which is provided implicitly by the call. As in Smalltalk, classes themselves
  Cluster 17
    75-18 - 93.6 - 482.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are objects. This provides semantics for importing and renaming. Unlike C++ and Modula-3, built-in types
  Cluster 18
    75-19 - 93.6 - 467.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can be used as base classes for extension by the user. Also, like in C++, most built-in operators with special
  Cluster 19
    75-20 - 93.6 - 451.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - syntax (arithmetic operators, subscripting etc.) can be redeﬁned for class instances.
  Cluster 20
    75-21 - 93.6 - 429.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and
  Cluster 21
    75-22 - 93.6 - 414.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - C++ terms. I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python
  Cluster 22
    75-23 - 93.6 - 398.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - than C++, but I expect that few readers have heard of it.)
  Cluster 23
    75-24 - 93.6 - 349.19 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 9.1 A Word About Names and Objects
  Cluster 24
    75-25 - 93.6 - 311.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Objects have individuality, and multiple names (in multiple scopes) can be bound to the same object. This
  Cluster 25
    75-26 - 93.6 - 296.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is known as aliasing in other languages. This is usually not appreciated on a ﬁrst glance at Python, and
  Cluster 26
    75-27 - 93.6 - 280.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can be safely ignored when dealing with immutable basic types (numbers, strings, tuples). However, aliasing
  Cluster 27
    75-28 - 93.6 - 265.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - has a possibly surprising eﬀect on the semantics of Python code involving mutable objects such as lists,
  Cluster 28
    75-29 - 93.6 - 249.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - dictionaries, and most other types. This is usually used to the beneﬁt of the program, since aliases behave
  Cluster 29
    75-30 - 93.6 - 234.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - like pointers in some respects. For example, passing an object is cheap since only a pointer is passed by the
  Cluster 30
    75-31 - 93.6 - 218.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - implementation; and if a function modiﬁes an object passed as an argument, the caller will see the change
  Cluster 31
    75-32 - 93.6 - 203.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - — this eliminates the need for two diﬀerent argument passing mechanisms as in Pascal.
  Cluster 32
    75-33 - 93.6 - 153.75 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 9.2 Python Scopes and Namespaces
  Cluster 33
    75-34 - 93.6 - 117.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Before introducing classes, I ﬁrst have to tell you something about Python’s scope rules. Class deﬁnitions
  Cluster 34
    75-35 - 93.6 - 101.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - play some neat tricks with namespaces, and you need to know how scopes and namespaces work to fully
  Cluster 35
    75-36 - 687.75 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 69
Page 76
  Cluster 0
    76-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    76-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - understand what’s going on. Incidentally, knowledge about this subject is useful for any advanced Python
  Cluster 2
    76-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - programmer.
  Cluster 3
    76-4 - 93.6 - 885.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Let’s begin with some deﬁnitions.
  Cluster 4
    76-5 - 93.6 - 863.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A namespace is a mapping from names to objects. Most namespaces are currently implemented as Python
  Cluster 5
    76-6 - 93.6 - 847.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - dictionaries, but that’s normally not noticeable in any way (except for performance), and it may change
  Cluster 6
    76-7 - 93.6 - 832.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in the future. Examples of namespaces are: the set of built-in names (containing functions such as abs(),
  Cluster 7
    76-8 - 93.6 - 816.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and built-in exception names); the global names in a module; and the local names in a function invocation.
  Cluster 8
    76-9 - 93.6 - 801.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In a sense the set of attributes of an object also form a namespace. The important thing to know about
  Cluster 9
    76-10 - 93.6 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - namespaces is that there is absolutely no relation between names in diﬀerent namespaces; for instance, two
  Cluster 10
    76-11 - 93.6 - 770.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - diﬀerent modules may both deﬁne a function maximize without confusion — users of the modules must
  Cluster 11
    76-12 - 93.6 - 754.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - preﬁx it with the module name.
  Cluster 12
    76-13 - 93.6 - 732.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - By the way, I use the word attribute for any name following a dot — for example, in the expression z.
  Cluster 13
    76-14 - 93.6 - 717.12 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - real, real is an attribute of the object z. Strictly speaking, references to names in modules are attribute
  Cluster 14
    76-15 - 93.6 - 701.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - references: in the expression modname.funcname, modname is a module object and funcname is an attribute
  Cluster 15
    76-16 - 93.6 - 686.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of it. In this case there happens to be a straightforward mapping between the module’s attributes and the
  Cluster 16
    76-17 - 486.03 - 675.19 18.58 - ff8 - 27.896 - rgb(53, 95, 124) - 1
  Cluster 17
    76-18 - 93.6 - 670.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - global names deﬁned in the module: they share the same namespace!
  Cluster 18
    76-19 - 93.6 - 648.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Attributes may be read-only or writable. In the latter case, assignment to attributes is possible. Module
  Cluster 19
    76-20 - 93.6 - 632.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - attributes are writable: you can write modname.the_answer = 42. Writable attributes may also be deleted
  Cluster 20
    76-21 - 93.6 - 617.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with the del statement. For example, del modname.the_answer will remove the attribute the_answer from
  Cluster 21
    76-22 - 93.6 - 601.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the object named by modname.
  Cluster 22
    76-23 - 93.6 - 579.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Namespaces are created at diﬀerent moments and have diﬀerent lifetimes. The namespace containing the
  Cluster 23
    76-24 - 93.6 - 564.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - built-in names is created when the Python interpreter starts up, and is never deleted. The global namespace
  Cluster 24
    76-25 - 93.6 - 548.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - for a module is created when the module deﬁnition is read in; normally, module namespaces also last until
  Cluster 25
    76-26 - 93.6 - 533.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the interpreter quits. The statements executed by the top-level invocation of the interpreter, either read
  Cluster 26
    76-27 - 93.6 - 517.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - from a script ﬁle or interactively, are considered part of a module called __main__, so they have their own
  Cluster 27
    76-28 - 93.6 - 502.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - global namespace. (The built-in names actually also live in a module; this is called builtins.)
  Cluster 28
    76-29 - 93.6 - 480.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The local namespace for a function is created when the function is called, and deleted when the function
  Cluster 29
    76-30 - 93.6 - 464.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - returns or raises an exception that is not handled within the function. (Actually, forgetting would be a
    76-30 - 93.6 - 449.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - better way to describe what actually happens.) Of course, recursive invocations each have their own local
  Cluster 30
    76-31 - 93.6 - 433.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - namespace.
  Cluster 31
    76-32 - 93.6 - 411.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A scope is a textual region of a Python program where a namespace is directly accessible. “Directly accessible”
  Cluster 32
    76-33 - 93.6 - 395.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - here means that an unqualiﬁed reference to a name attempts to ﬁnd the name in the namespace.
  Cluster 33
    76-34 - 93.6 - 373.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Although scopes are determined statically, they are used dynamically. At any time during execution, there
  Cluster 34
    76-35 - 93.6 - 358.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are at least three nested scopes whose namespaces are directly accessible:
  Cluster 35
    76-36 - 109.42 - 336.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • the innermost scope, which is searched ﬁrst, contains the local names
    76-36 - 109.42 - 314.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope,
  Cluster 36
    76-37 - 125.98 - 298.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - contains non-local, but also non-global names
  Cluster 37
    76-38 - 109.42 - 276.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • the next-to-last scope contains the current module’s global names
  Cluster 38
    76-39 - 109.42 - 254.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • the outermost scope (searched last) is the namespace containing built-in names
  Cluster 39
    76-40 - 93.6 - 232.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If a name is declared global, then all references and assignments go directly to the middle scope containing the
  Cluster 40
    76-41 - 93.6 - 217.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module’s global names. To rebind variables found outside of the innermost scope, the nonlocal statement
  Cluster 41
    76-42 - 93.6 - 201.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can be used; if not declared nonlocal, those variables are read-only (an attempt to write to such a variable
  Cluster 42
    76-43 - 93.6 - 186.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - will simply create a new local variable in the innermost scope, leaving the identically named outer variable
  Cluster 43
    76-44 - 93.6 - 170.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - unchanged).
  Cluster 44
    76-45 - 106.86 - 150.51 15.93 - ffa - 23.912 - rgb(0, 0, 0) - 1
  Cluster 45
    76-46 - 115.92 - 146.85 23.91 - ffb - 31.88 - rgb(0, 0, 0) - Except for one thing. Module objects have a secret read-only attribute called __dict__ which returns the dictionary used
  Cluster 46
    76-47 - 93.6 - 134.55 23.91 - ffb - 31.88 - rgb(0, 0, 0) - to implement the module’s namespace; the name __dict__ is an attribute but not a global name. Obviously, using this violates
  Cluster 47
    76-48 - 93.6 - 122.24 23.91 - ffb - 31.88 - rgb(0, 0, 0) - the abstraction of namespace implementation, and should be restricted to things like post-mortem debuggers.
  Cluster 48
    76-49 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 70 Chapter 9. Classes
Page 77
  Cluster 0
    77-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    77-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Usually, the local scope references the local names of the (textually) current function. Outside functions, the
  Cluster 2
    77-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - local scope references the same namespace as the global scope: the module’s namespace. Class deﬁnitions
  Cluster 3
    77-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - place yet another namespace in the local scope.
  Cluster 4
    77-5 - 93.6 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is important to realize that scopes are determined textually: the global scope of a function deﬁned in a
  Cluster 5
    77-6 - 93.6 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module is that module’s namespace, no matter from where or by what alias the function is called. On the
  Cluster 6
    77-7 - 93.6 - 838.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - other hand, the actual search for names is done dynamically, at run time — however, the language deﬁnition
  Cluster 7
    77-8 - 93.6 - 823.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is evolving towards static name resolution, at “compile” time, so don’t rely on dynamic name resolution! (In
  Cluster 8
    77-9 - 93.6 - 807.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - fact, local variables are already determined statically.)
  Cluster 9
    77-10 - 93.6 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A special quirk of Python is that – if no global statement is in eﬀect – assignments to names always go into
  Cluster 10
    77-11 - 93.6 - 770.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the innermost scope. Assignments do not copy data — they just bind names to objects. The same is true for
  Cluster 11
    77-12 - 93.6 - 754.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - deletions: the statement del x removes the binding of x from the namespace referenced by the local scope.
  Cluster 12
    77-13 - 93.6 - 739.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In fact, all operations that introduce new names use the local scope: in particular, import statements and
  Cluster 13
    77-14 - 93.6 - 723.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - function deﬁnitions bind the module or function name in the local scope.
  Cluster 14
    77-15 - 93.6 - 701.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The global statement can be used to indicate that particular variables live in the global scope and should
  Cluster 15
    77-16 - 93.6 - 686.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - be rebound there; the nonlocal statement indicates that particular variables live in an enclosing scope and
  Cluster 16
    77-17 - 93.6 - 670.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - should be rebound there.
  Cluster 17
    77-18 - 93.6 - 627.74 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 9.2.1 Scopes and Namespaces Example
  Cluster 18
    77-19 - 93.6 - 597.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This is an example demonstrating how to reference the diﬀerent scopes and namespaces, and how global
  Cluster 19
    77-20 - 93.6 - 581.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and nonlocal aﬀect variable binding:
  Cluster 20
    77-21 - 93.6 - 555.78 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def scope_test():
  Cluster 21
    77-22 - 118.08 - 541.54 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def do_local():
  Cluster 22
    77-23 - 142.56 - 527.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - spam = "local spam"
  Cluster 23
    77-24 - 118.08 - 498.8 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def do_nonlocal():
  Cluster 24
    77-25 - 142.56 - 484.55 24.89 - ffd - 35.864 - rgb(0, 112, 33) - nonlocal spam
  Cluster 25
    77-26 - 142.56 - 470.3 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - spam = "nonlocal spam"
  Cluster 26
    77-27 - 118.08 - 441.81 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def do_global():
  Cluster 27
    77-28 - 142.56 - 427.56 24.89 - ffd - 35.864 - rgb(0, 112, 33) - global spam
  Cluster 28
    77-29 - 142.56 - 413.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - spam = "global spam"
  Cluster 29
    77-30 - 118.08 - 384.83 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - spam = "test spam"
  Cluster 30
    77-31 - 118.08 - 370.58 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - do_local()
  Cluster 31
    77-32 - 118.08 - 356.33 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("After local assignment:", spam)
    77-32 - 118.08 - 342.08 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - do_nonlocal()
    77-32 - 118.08 - 327.83 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("After nonlocal assignment:", spam)
    77-32 - 118.08 - 313.59 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - do_global()
    77-32 - 118.08 - 299.34 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("After global assignment:", spam)
  Cluster 32
    77-33 - 93.6 - 270.86 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - scope_test()
  Cluster 33
    77-34 - 93.6 - 256.61 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print("In global scope:", spam)
  Cluster 34
    77-35 - 93.6 - 225.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The output of the example code is:
  Cluster 35
    77-36 - 93.6 - 199.88 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - After local assignment: test spam
  Cluster 36
    77-37 - 93.6 - 185.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - After nonlocal assignment: nonlocal spam
  Cluster 37
    77-38 - 93.6 - 171.38 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - After global assignment: nonlocal spam
  Cluster 38
    77-39 - 93.6 - 157.13 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - In global scope: global spam
  Cluster 39
    77-40 - 93.6 - 126.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note how the local assignment (which is default) didn’t change scope_test’s binding of spam. The nonlocal
  Cluster 40
    77-41 - 93.6 - 110.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - assignment changed scope_test’s binding of spam, and the global assignment changed the module-level
  Cluster 41
    77-42 - 93.6 - 95.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - binding.
  Cluster 42
    77-43 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 9.2. Python Scopes and Namespaces 71
Page 78
  Cluster 0
    78-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    78-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - You can also see that there was no previous binding for spam before the global assignment.
  Cluster 2
    78-3 - 93.6 - 873.72 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 9.3 A First Look at Classes
  Cluster 3
    78-4 - 93.6 - 836.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Classes introduce a little bit of new syntax, three new object types, and some new semantics.
  Cluster 4
    78-5 - 93.6 - 794.24 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 9.3.1 Class Deﬁnition Syntax
  Cluster 5
    78-6 - 93.6 - 763.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The simplest form of class deﬁnition looks like this:
  Cluster 6
    78-7 - 93.6 - 737.82 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class ClassName:
  Cluster 7
    78-8 - 118.08 - 723.57 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - <statement-1>
    78-8 - 118.08 - 709.32 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - .
  Cluster 8
    78-9 - 118.08 - 695.07 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - .
  Cluster 9
    78-10 - 118.08 - 680.84 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - .
  Cluster 10
    78-11 - 118.08 - 666.59 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - <statement-N>
  Cluster 11
    78-12 - 93.6 - 635.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Class deﬁnitions, like function deﬁnitions (def statements) must be executed before they have any eﬀect.
  Cluster 12
    78-13 - 93.6 - 620.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (You could conceivably place a class deﬁnition in a branch of an if statement, or inside a function.)
  Cluster 13
    78-14 - 93.6 - 598.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In practice, the statements inside a class deﬁnition will usually be function deﬁnitions, but other statements
  Cluster 14
    78-15 - 93.6 - 582.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are allowed, and sometimes useful — we’ll come back to this later. The function deﬁnitions inside a class
  Cluster 15
    78-16 - 93.6 - 567.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - normally have a peculiar form of argument list, dictated by the calling conventions for methods — again,
  Cluster 16
    78-17 - 93.6 - 551.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - this is explained later.
  Cluster 17
    78-18 - 93.6 - 529.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When a class deﬁnition is entered, a new namespace is created, and used as the local scope — thus, all
  Cluster 18
    78-19 - 93.6 - 514.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - assignments to local variables go into this new namespace. In particular, function deﬁnitions bind the name
  Cluster 19
    78-20 - 93.6 - 498.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the new function here.
  Cluster 20
    78-21 - 93.6 - 476.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When a class deﬁnition is left normally (via the end), a class object is created. This is basically a wrapper
  Cluster 21
    78-22 - 93.6 - 461.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - around the contents of the namespace created by the class deﬁnition; we’ll learn more about class objects
  Cluster 22
    78-23 - 93.6 - 445.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in the next section. The original local scope (the one in eﬀect just before the class deﬁnition was entered)
  Cluster 23
    78-24 - 93.6 - 429.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is reinstated, and the class object is bound here to the class name given in the class deﬁnition header
  Cluster 24
    78-25 - 93.6 - 414.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (ClassName in the example).
  Cluster 25
    78-26 - 93.6 - 371.67 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 9.3.2 Class Objects
  Cluster 26
    78-27 - 93.6 - 341.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Class objects support two kinds of operations: attribute references and instantiation.
  Cluster 27
    78-28 - 93.6 - 319.27 29.89 - ff6 - 39.852 - rgb(0, 0, 0) - Attribute references use the standard syntax used for all attribute references in Python: obj.name. Valid
  Cluster 28
    78-29 - 93.6 - 303.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - attribute names are all the names that were in the class’s namespace when the class object was created. So,
  Cluster 29
    78-30 - 93.6 - 288.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - if the class deﬁnition looked like this:
  Cluster 30
    78-31 - 93.6 - 262.14 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class MyClass:
  Cluster 31
    78-32 - 118.08 - 247.9 24.89 - ffe - 35.864 - rgb(64, 112, 161) - """A simple example class"""
    78-32 - 118.08 - 233.65 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - i = 12345
  Cluster 32
    78-33 - 118.08 - 205.17 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def f(self):
  Cluster 33
    78-34 - 142.56 - 190.92 24.89 - ffd - 35.864 - rgb(0, 112, 33) - return 'hello world'
  Cluster 34
    78-35 - 93.6 - 160.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - then MyClass.i and MyClass.f are valid attribute references, returning an integer and a function object,
  Cluster 35
    78-36 - 93.6 - 144.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - respectively. Class attributes can also be assigned to, so you can change the value of MyClass.i by assign-
  Cluster 36
    78-37 - 93.6 - 129.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ment. __doc__ is also a valid attribute, returning the docstring belonging to the class: "A simple example
  Cluster 37
    78-38 - 93.6 - 113.59 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - class".
  Cluster 38
    78-39 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 72 Chapter 9. Classes
Page 79
  Cluster 0
    79-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    79-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Class instantiation uses function notation. Just pretend that the class object is a parameterless function
  Cluster 2
    79-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that returns a new instance of the class. For example (assuming the above class):
  Cluster 3
    79-4 - 93.6 - 881.48 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - x = MyClass()
  Cluster 4
    79-5 - 93.6 - 850.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - creates a new instance of the class and assigns this object to the local variable x.
  Cluster 5
    79-6 - 93.6 - 828.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The instantiation operation (“calling” a class object) creates an empty object. Many classes like to create
  Cluster 6
    79-7 - 93.6 - 813.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - objects with instances customized to a speciﬁc initial state. Therefore a class may deﬁne a special method
  Cluster 7
    79-8 - 93.6 - 797.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - named __init__(), like this:
  Cluster 8
    79-9 - 93.6 - 771.64 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __init__(self):
  Cluster 9
    79-10 - 118.08 - 757.41 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.data = []
  Cluster 10
    79-11 - 93.6 - 726.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When a class deﬁnes an __init__() method, class instantiation automatically invokes __init__() for the
  Cluster 11
    79-12 - 93.6 - 711.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - newly-created class instance. So in this example, a new, initialized instance can be obtained by:
  Cluster 12
    79-13 - 93.6 - 685.13 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - x = MyClass()
  Cluster 13
    79-14 - 93.6 - 654.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Of course, the __init__() method may have arguments for greater ﬂexibility. In that case, arguments given
  Cluster 14
    79-15 - 93.6 - 638.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to the class instantiation operator are passed on to __init__(). For example,
  Cluster 15
    79-16 - 93.6 - 612.86 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> class Complex:
  Cluster 16
    79-17 - 93.6 - 598.61 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... def __init__(self, realpart, imagpart):
  Cluster 17
    79-18 - 93.6 - 584.36 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... self.r = realpart
  Cluster 18
    79-19 - 93.6 - 570.13 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... self.i = imagpart
  Cluster 19
    79-20 - 93.6 - 555.88 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    79-20 - 93.6 - 541.63 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x = Complex(3.0, -4.5)
  Cluster 20
    79-21 - 93.6 - 527.38 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x.r, x.i
  Cluster 21
    79-22 - 93.6 - 513.14 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - (3.0, -4.5)
  Cluster 22
    79-23 - 93.6 - 461.71 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 9.3.3 Instance Objects
  Cluster 23
    79-24 - 93.6 - 431.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Now what can we do with instance objects? The only operations understood by instance objects are attribute
  Cluster 24
    79-25 - 93.6 - 415.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - references. There are two kinds of valid attribute names, data attributes and methods.
  Cluster 25
    79-26 - 93.6 - 393.76 29.89 - ff6 - 39.852 - rgb(0, 0, 0) - data attributes correspond to “instance variables” in Smalltalk, and to “data members” in C++. Data
  Cluster 26
    79-27 - 93.6 - 378.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - attributes need not be declared; like local variables, they spring into existence when they are ﬁrst assigned
  Cluster 27
    79-28 - 93.6 - 362.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to. For example, if x is the instance of MyClass created above, the following piece of code will print the
  Cluster 28
    79-29 - 93.6 - 347.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - value 16, without leaving a trace:
  Cluster 29
    79-30 - 93.6 - 321.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - x.counter = 1
  Cluster 30
    79-31 - 93.6 - 306.85 24.89 - ffd - 35.864 - rgb(0, 112, 33) - while x.counter < 10:
  Cluster 31
    79-32 - 93.6 - 278.36 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(x.counter)

    =====
    79-32 - 118.08 - 292.6 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - x.counter = x.counter * 2
  Cluster 32
    79-33 - 93.6 - 264.12 24.89 - ffd - 35.864 - rgb(0, 112, 33) - del x.counter
  Cluster 33
    79-34 - 93.6 - 233.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The other kind of instance attribute reference is a method. A method is a function that “belongs to” an
  Cluster 34
    79-35 - 93.6 - 217.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object. (In Python, the term method is not unique to class instances: other object types can have methods
  Cluster 35
    79-36 - 93.6 - 202.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as well. For example, list objects have methods called append, insert, remove, sort, and so on. However, in
  Cluster 36
    79-37 - 93.6 - 186.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the following discussion, we’ll use the term method exclusively to mean methods of class instance objects,
  Cluster 37
    79-38 - 93.6 - 171.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - unless explicitly stated otherwise.)
  Cluster 38
    79-39 - 93.6 - 149.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Valid method names of an instance object depend on its class. By deﬁnition, all attributes of a class that
  Cluster 39
    79-40 - 93.6 - 133.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are function objects deﬁne corresponding methods of its instances. So in our example, x.f is a valid method
  Cluster 40
    79-41 - 93.6 - 118.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - reference, since MyClass.f is a function, but x.i is not, since MyClass.i is not. But x.f is not the same
  Cluster 41
    79-42 - 93.6 - 102.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - thing as MyClass.f — it is a method object, not a function object.
  Cluster 42
    79-43 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 9.3. A First Look at Classes 73
Page 80
  Cluster 0
    80-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    80-2 - 93.6 - 923.05 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 9.3.4 Method Objects
  Cluster 2
    80-3 - 93.6 - 892.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Usually, a method is called right after it is bound:
  Cluster 3
    80-4 - 93.6 - 866.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - x.f()
  Cluster 4
    80-5 - 93.6 - 835.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In the MyClass example, this will return the string 'hello world'. However, it is not necessary to call a
  Cluster 5
    80-6 - 93.6 - 820.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - method right away: x.f is a method object, and can be stored away and called at a later time. For example:
  Cluster 6
    80-7 - 93.6 - 794.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - xf = x.f
  Cluster 7
    80-8 - 93.6 - 780.1 24.89 - ffd - 35.864 - rgb(0, 112, 33) - while True:
  Cluster 8
    80-9 - 118.08 - 765.87 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(xf())
  Cluster 9
    80-10 - 93.6 - 735.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - will continue to print hello world until the end of time.
  Cluster 10
    80-11 - 93.6 - 713.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - What exactly happens when a method is called? You may have noticed that x.f() was called without an
  Cluster 11
    80-12 - 93.6 - 697.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - argument above, even though the function deﬁnition for f() speciﬁed an argument. What happened to the
  Cluster 12
    80-13 - 93.6 - 682.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - argument? Surely Python raises an exception when a function that requires an argument is called without
  Cluster 13
    80-14 - 93.6 - 666.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - any — even if the argument isn’t actually used…
  Cluster 14
    80-15 - 93.6 - 644.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Actually, you may have guessed the answer: the special thing about methods is that the instance object is
  Cluster 15
    80-16 - 93.6 - 628.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - passed as the ﬁrst argument of the function. In our example, the call x.f() is exactly equivalent to MyClass.
  Cluster 16
    80-17 - 93.6 - 613.43 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - f(x). In general, calling a method with a list of n arguments is equivalent to calling the corresponding
  Cluster 17
    80-18 - 93.6 - 597.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - function with an argument list that is created by inserting the method’s instance object before the ﬁrst
  Cluster 18
    80-19 - 93.6 - 582.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - argument.
  Cluster 19
    80-20 - 93.6 - 560.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you still don’t understand how methods work, a look at the implementation can perhaps clarify matters.
  Cluster 20
    80-21 - 93.6 - 544.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When a non-data attribute of an instance is referenced, the instance’s class is searched. If the name denotes
  Cluster 21
    80-22 - 93.6 - 529.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a valid class attribute that is a function object, a method object is created by packing (pointers to) the
  Cluster 22
    80-23 - 93.6 - 513.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - instance object and the function object just found together in an abstract object: this is the method object.
  Cluster 23
    80-24 - 93.6 - 498.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When the method object is called with an argument list, a new argument list is constructed from the instance
  Cluster 24
    80-25 - 93.6 - 482.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object and the argument list, and the function object is called with this new argument list.
  Cluster 25
    80-26 - 93.6 - 439.87 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 9.3.5 Class and Instance Variables
  Cluster 26
    80-27 - 93.6 - 409.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Generally speaking, instance variables are for data unique to each instance and class variables are for at-
  Cluster 27
    80-28 - 93.6 - 393.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - tributes and methods shared by all instances of the class:
  Cluster 28
    80-29 - 93.6 - 367.9 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class Dog:
  Cluster 29
    80-30 - 118.08 - 339.4 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - kind = 'canine' # class variable shared by all instances
  Cluster 30
    80-31 - 118.08 - 310.92 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __init__(self, name):
  Cluster 31
    80-32 - 142.56 - 296.67 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.name = name # instance variable unique to each instance
  Cluster 32
    80-33 - 93.6 - 268.18 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> d = Dog('Fido')
  Cluster 33
    80-34 - 93.6 - 253.93 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> e = Dog('Buddy')
  Cluster 34
    80-35 - 93.6 - 239.68 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> d.kind # shared by all dogs
  Cluster 35
    80-36 - 93.6 - 225.43 24.89 - ff7 - 35.864 - rgb(64, 112, 161) - 'canine'
  Cluster 36
    80-37 - 93.6 - 211.19 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> e.kind # shared by all dogs
    80-37 - 93.6 - 196.94 24.89 - ff7 - 35.864 - rgb(64, 112, 161) - 'canine'
  Cluster 37
    80-38 - 93.6 - 182.7 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> d.name # unique to d
  Cluster 38
    80-39 - 93.6 - 168.45 24.89 - ff7 - 35.864 - rgb(64, 112, 161) - 'Fido'
  Cluster 39
    80-40 - 93.6 - 154.21 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> e.name # unique to e
  Cluster 40
    80-41 - 93.6 - 139.96 24.89 - ff7 - 35.864 - rgb(64, 112, 161) - 'Buddy'
  Cluster 41
    80-42 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 74 Chapter 9. Classes
Page 81
  Cluster 0
    81-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    81-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - As discussed in A Word About Names and Objects, shared data can have possibly surprising eﬀects with
  Cluster 2
    81-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - involving mutable objects such as lists and dictionaries. For example, the tricks list in the following code
  Cluster 3
    81-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - should not be used as a class variable because just a single list would be shared by all Dog instances:
  Cluster 4
    81-5 - 93.6 - 865.93 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class Dog:
  Cluster 5
    81-6 - 118.08 - 837.43 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - tricks = [] # mistaken use of a class variable
  Cluster 6
    81-7 - 118.08 - 808.95 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __init__(self, name):
  Cluster 7
    81-8 - 142.56 - 794.7 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.name = name
  Cluster 8
    81-9 - 118.08 - 766.21 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def add_trick(self, trick):
  Cluster 9
    81-10 - 142.56 - 751.96 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.tricks.append(trick)
  Cluster 10
    81-11 - 93.6 - 723.46 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> d = Dog('Fido')
  Cluster 11
    81-12 - 93.6 - 709.22 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> e = Dog('Buddy')
  Cluster 12
    81-13 - 93.6 - 694.98 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> d.add_trick('roll over')
  Cluster 13
    81-14 - 93.6 - 680.73 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> e.add_trick('play dead')
  Cluster 14
    81-15 - 93.6 - 666.48 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> d.tricks # unexpectedly shared by all dogs
  Cluster 15
    81-16 - 93.6 - 652.24 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ['roll over', 'play dead']
  Cluster 16
    81-17 - 93.6 - 621.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Correct design of the class should use an instance variable instead:
  Cluster 17
    81-18 - 93.6 - 595.5 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class Dog:
  Cluster 18
    81-19 - 118.08 - 567.01 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __init__(self, name):
  Cluster 19
    81-20 - 142.56 - 552.77 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.name = name
  Cluster 20
    81-21 - 142.56 - 538.52 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.tricks = [] # creates a new empty list for each dog
  Cluster 21
    81-22 - 118.08 - 510.03 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def add_trick(self, trick):
  Cluster 22
    81-23 - 142.56 - 495.78 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.tricks.append(trick)
  Cluster 23
    81-24 - 93.6 - 467.29 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> d = Dog('Fido')
  Cluster 24
    81-25 - 93.6 - 453.04 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> e = Dog('Buddy')
  Cluster 25
    81-26 - 93.6 - 438.79 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> d.add_trick('roll over')
  Cluster 26
    81-27 - 93.6 - 424.55 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> e.add_trick('play dead')
  Cluster 27
    81-28 - 93.6 - 410.31 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> d.tricks
    81-28 - 93.6 - 396.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ['roll over']
    81-28 - 93.6 - 381.81 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - >>> e.tricks
    81-28 - 93.6 - 367.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ['play dead']
  Cluster 28
    81-29 - 93.6 - 309.56 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 9.4 Random Remarks
  Cluster 29
    81-30 - 93.6 - 272.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Data attributes override method attributes with the same name; to avoid accidental name conﬂicts, which
  Cluster 30
    81-31 - 93.6 - 257.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - may cause hard-to-ﬁnd bugs in large programs, it is wise to use some kind of convention that minimizes the
  Cluster 31
    81-32 - 93.6 - 241.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - chance of conﬂicts. Possible conventions include capitalizing method names, preﬁxing data attribute names
  Cluster 32
    81-33 - 93.6 - 226.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with a small unique string (perhaps just an underscore), or using verbs for methods and nouns for data
  Cluster 33
    81-34 - 93.6 - 210.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - attributes.
  Cluster 34
    81-35 - 93.6 - 188.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Data attributes may be referenced by methods as well as by ordinary users (“clients”) of an object. In
  Cluster 35
    81-36 - 93.6 - 173.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - other words, classes are not usable to implement pure abstract data types. In fact, nothing in Python
  Cluster 36
    81-37 - 93.6 - 157.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - makes it possible to enforce data hiding — it is all based upon convention. (On the other hand, the Python
  Cluster 37
    81-38 - 93.6 - 142.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - implementation, written in C, can completely hide implementation details and control access to an object if
  Cluster 38
    81-39 - 93.6 - 126.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - necessary; this can be used by extensions to Python written in C.)
  Cluster 39
    81-40 - 93.6 - 104.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Clients should use data attributes with care — clients may mess up invariants maintained by the methods
  Cluster 40
    81-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 9.4. Random Remarks 75
Page 82
  Cluster 0
    82-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    82-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - by stamping on their data attributes. Note that clients may add data attributes of their own to an instance
  Cluster 2
    82-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object without aﬀecting the validity of the methods, as long as name conﬂicts are avoided — again, a naming
  Cluster 3
    82-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - convention can save a lot of headaches here.
  Cluster 4
    82-5 - 93.6 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There is no shorthand for referencing data attributes (or other methods!) from within methods. I ﬁnd that
  Cluster 5
    82-6 - 93.6 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - this actually increases the readability of methods: there is no chance of confusing local variables and instance
  Cluster 6
    82-7 - 93.6 - 838.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - variables when glancing through a method.
  Cluster 7
    82-8 - 93.6 - 816.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Often, the ﬁrst argument of a method is called self. This is nothing more than a convention: the name
  Cluster 8
    82-9 - 93.6 - 801.31 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - self has absolutely no special meaning to Python. Note, however, that by not following the convention
  Cluster 9
    82-10 - 93.6 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - your code may be less readable to other Python programmers, and it is also conceivable that a class browser
  Cluster 10
    82-11 - 93.6 - 770.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - program might be written that relies upon such a convention.
  Cluster 11
    82-12 - 93.6 - 748.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Any function object that is a class attribute deﬁnes a method for instances of that class. It is not necessary
  Cluster 12
    82-13 - 93.6 - 732.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that the function deﬁnition is textually enclosed in the class deﬁnition: assigning a function object to a local
  Cluster 13
    82-14 - 93.6 - 717.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - variable in the class is also ok. For example:
  Cluster 14
    82-15 - 93.6 - 691.09 24.89 - ffe - 35.864 - rgb(64, 128, 143) - # Function defined outside the class
  Cluster 15
    82-16 - 93.6 - 676.85 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def f1(self, x, y):
  Cluster 16
    82-17 - 118.08 - 662.6 24.89 - ffd - 35.864 - rgb(0, 112, 33) - return min(x, x+y)
  Cluster 17
    82-18 - 93.6 - 634.1 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class C:
  Cluster 18
    82-19 - 118.08 - 619.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - f = f1
  Cluster 19
    82-20 - 118.08 - 591.36 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def g(self):
  Cluster 20
    82-21 - 142.56 - 577.12 24.89 - ffd - 35.864 - rgb(0, 112, 33) - return 'hello world'
  Cluster 21
    82-22 - 118.08 - 548.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - h = g
  Cluster 22
    82-23 - 93.6 - 517.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Now f, g and h are all attributes of class C that refer to function objects, and consequently they are all
  Cluster 23
    82-24 - 93.6 - 502.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - methods of instances of C — h being exactly equivalent to g. Note that this practice usually only serves to
  Cluster 24
    82-25 - 93.6 - 486.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - confuse the reader of a program.
  Cluster 25
    82-26 - 93.6 - 464.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Methods may call other methods by using method attributes of the self argument:
  Cluster 26
    82-27 - 93.6 - 438.79 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class Bag:
  Cluster 27
    82-28 - 118.08 - 424.55 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __init__(self):
  Cluster 28
    82-29 - 142.56 - 410.31 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.data = []
  Cluster 29
    82-30 - 118.08 - 381.81 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def add(self, x):
  Cluster 30
    82-31 - 142.56 - 367.56 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.data.append(x)
  Cluster 31
    82-32 - 118.08 - 339.07 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def addtwice(self, x):
  Cluster 32
    82-33 - 142.56 - 324.82 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.add(x)
    82-33 - 142.56 - 310.57 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.add(x)
  Cluster 33
    82-34 - 93.6 - 279.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Methods may reference global names in the same way as ordinary functions. The global scope associated
  Cluster 34
    82-35 - 93.6 - 264.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with a method is the module containing its deﬁnition. (A class is never used as a global scope.) While one
  Cluster 35
    82-36 - 93.6 - 248.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - rarely encounters a good reason for using global data in a method, there are many legitimate uses of the
  Cluster 36
    82-37 - 93.6 - 233.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - global scope: for one thing, functions and modules imported into the global scope can be used by methods,
  Cluster 37
    82-38 - 93.6 - 217.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as well as functions and classes deﬁned in it. Usually, the class containing the method is itself deﬁned in this
  Cluster 38
    82-39 - 93.6 - 202.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - global scope, and in the next section we’ll ﬁnd some good reasons why a method would want to reference its
  Cluster 39
    82-40 - 93.6 - 186.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - own class.
  Cluster 40
    82-41 - 93.6 - 164.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Each value is an object, and therefore has a class (also called its type). It is stored as object.__class__.
  Cluster 41
    82-42 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 76 Chapter 9. Classes
Page 83
  Cluster 0
    83-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    83-2 - 93.6 - 919.68 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 9.5 Inheritance
  Cluster 2
    83-3 - 93.6 - 882.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Of course, a language feature would not be worthy of the name “class” without supporting inheritance. The
  Cluster 3
    83-4 - 93.6 - 867.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - syntax for a derived class deﬁnition looks like this:
  Cluster 4
    83-5 - 93.6 - 841.37 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class DerivedClassName(BaseClassName):
  Cluster 5
    83-6 - 118.08 - 827.12 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - <statement-1>
    83-6 - 118.08 - 812.88 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - .
  Cluster 6
    83-7 - 118.08 - 798.63 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - .
  Cluster 7
    83-8 - 118.08 - 784.38 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - .
  Cluster 8
    83-9 - 118.08 - 770.15 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - <statement-N>
  Cluster 9
    83-10 - 93.6 - 739.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The name BaseClassName must be deﬁned in a scope containing the derived class deﬁnition. In place of
  Cluster 10
    83-11 - 93.6 - 723.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a base class name, other arbitrary expressions are also allowed. This can be useful, for example, when the
  Cluster 11
    83-12 - 93.6 - 708.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - base class is deﬁned in another module:
  Cluster 12
    83-13 - 93.6 - 682.33 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class DerivedClassName(modname.BaseClassName):
  Cluster 13
    83-14 - 93.6 - 651.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Execution of a derived class deﬁnition proceeds the same as for a base class. When the class object is
  Cluster 14
    83-15 - 93.6 - 636.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - constructed, the base class is remembered. This is used for resolving attribute references: if a requested
  Cluster 15
    83-16 - 93.6 - 620.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - attribute is not found in the class, the search proceeds to look in the base class. This rule is applied
  Cluster 16
    83-17 - 93.6 - 605.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - recursively if the base class itself is derived from some other class.
  Cluster 17
    83-18 - 93.6 - 583.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There’s nothing special about instantiation of derived classes: DerivedClassName() creates a new instance of
  Cluster 18
    83-19 - 93.6 - 567.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the class. Method references are resolved as follows: the corresponding class attribute is searched, descending
    83-19 - 93.6 - 551.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - down the chain of base classes if necessary, and the method reference is valid if this yields a function object.
  Cluster 19
    83-20 - 93.6 - 529.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Derived classes may override methods of their base classes. Because methods have no special privileges when
  Cluster 20
    83-21 - 93.6 - 514.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - calling other methods of the same object, a method of a base class that calls another method deﬁned in the
  Cluster 21
    83-22 - 93.6 - 498.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - same base class may end up calling a method of a derived class that overrides it. (For C++ programmers:
  Cluster 22
    83-23 - 93.6 - 483.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - all methods in Python are eﬀectively virtual.)
  Cluster 23
    83-24 - 93.6 - 461.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - An overriding method in a derived class may in fact want to extend rather than simply replace the base
  Cluster 24
    83-25 - 93.6 - 445.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - class method of the same name. There is a simple way to call the base class method directly: just call
  Cluster 25
    83-26 - 93.6 - 430.17 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - BaseClassName.methodname(self, arguments). This is occasionally useful to clients as well. (Note that
  Cluster 26
    83-27 - 93.6 - 414.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - this only works if the base class is accessible as BaseClassName in the global scope.)
  Cluster 27
    83-28 - 93.6 - 392.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python has two built-in functions that work with inheritance:
  Cluster 28
    83-29 - 109.42 - 370.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Use isinstance() to check an instance’s type: isinstance(obj, int) will be True only if obj.
  Cluster 29
    83-30 - 125.98 - 355.04 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - __class__ is int or some class derived from int.
  Cluster 30
    83-31 - 109.42 - 333.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is a subclass
  Cluster 31
    83-32 - 125.98 - 317.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of int. However, issubclass(float, int) is False since float is not a subclass of int.
  Cluster 32
    83-33 - 93.6 - 274.74 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 9.5.1 Multiple Inheritance
  Cluster 33
    83-34 - 93.6 - 244.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python supports a form of multiple inheritance as well. A class deﬁnition with multiple base classes looks
  Cluster 34
    83-35 - 93.6 - 228.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - like this:
  Cluster 35
    83-36 - 93.6 - 202.77 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class DerivedClassName(Base1, Base2, Base3):
  Cluster 36
    83-37 - 118.08 - 188.53 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - <statement-1>
  Cluster 37
    83-38 - 118.08 - 174.28 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - .
  Cluster 38
    83-39 - 118.08 - 160.03 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - .
    83-39 - 118.08 - 145.78 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - .
  Cluster 39
    83-40 - 118.08 - 131.55 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - <statement-N>
  Cluster 40
    83-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 9.5. Inheritance 77
Page 84
  Cluster 0
    84-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    84-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For most purposes, in the simplest cases, you can think of the search for attributes inherited from a parent
  Cluster 2
    84-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - class as depth-ﬁrst, left-to-right, not searching twice in the same class where there is an overlap in the hier-
  Cluster 3
    84-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - archy. Thus, if an attribute is not found in DerivedClassName, it is searched for in Base1, then (recursively)
  Cluster 4
    84-5 - 93.6 - 876.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in the base classes of Base1, and if it was not found there, it was searched for in Base2, and so on.
  Cluster 5
    84-6 - 93.6 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In fact, it is slightly more complex than that; the method resolution order changes dynamically to support
  Cluster 6
    84-7 - 93.6 - 838.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - cooperative calls to super(). This approach is known in some other multiple-inheritance languages as
  Cluster 7
    84-8 - 93.6 - 823.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - call-next-method and is more powerful than the super call found in single-inheritance languages.
  Cluster 8
    84-9 - 93.6 - 801.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Dynamic ordering is necessary because all cases of multiple inheritance exhibit one or more diamond re-
  Cluster 9
    84-10 - 93.6 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - lationships (where at least one of the parent classes can be accessed through multiple paths from the
  Cluster 10
    84-11 - 93.6 - 770.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - bottommost class). For example, all classes inherit from object, so any case of multiple inheritance
  Cluster 11
    84-12 - 93.6 - 754.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - provides more than one path to reach object. To keep the base classes from being accessed more than
  Cluster 12
    84-13 - 93.6 - 739.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - once, the dynamic algorithm linearizes the search order in a way that preserves the left-to-right order-
  Cluster 13
    84-14 - 93.6 - 723.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ing speciﬁed in each class, that calls each parent only once, and that is monotonic (meaning that a class
  Cluster 14
    84-15 - 93.6 - 708.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can be subclassed without aﬀecting the precedence order of its parents). Taken together, these properties
  Cluster 15
    84-16 - 93.6 - 692.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - make it possible to design reliable and extensible classes with multiple inheritance. For more detail, see
  Cluster 16
    84-17 - 93.6 - 676.98 29.89 - ff4 - 39.852 - rgb(55, 112, 99) - https://www.python.org/download/releases/2.3/mro/.
  Cluster 17
    84-18 - 93.6 - 628.13 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 9.6 Private Variables
  Cluster 18
    84-19 - 93.6 - 591.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - “Private” instance variables that cannot be accessed except from inside an object don’t exist in Python.
  Cluster 19
    84-20 - 93.6 - 575.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - However, there is a convention that is followed by most Python code: a name preﬁxed with an underscore
  Cluster 20
    84-21 - 93.6 - 560.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data
  Cluster 21
    84-22 - 93.6 - 544.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - member). It should be considered an implementation detail and subject to change without notice.
  Cluster 22
    84-23 - 93.6 - 522.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names
  Cluster 23
    84-24 - 93.6 - 507.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - deﬁned by subclasses), there is limited support for such a mechanism, called name mangling. Any identiﬁer
  Cluster 24
    84-25 - 93.6 - 491.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced
  Cluster 25
    84-26 - 93.6 - 476.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with _classname__spam, where classname is the current class name with leading underscore(s) stripped.
  Cluster 26
    84-27 - 93.6 - 460.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This mangling is done without regard to the syntactic position of the identiﬁer, as long as it occurs within
  Cluster 27
    84-28 - 93.6 - 445.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the deﬁnition of a class.
  Cluster 28
    84-29 - 93.6 - 423.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Name mangling is helpful for letting subclasses override methods without breaking intraclass method calls.
  Cluster 29
    84-30 - 93.6 - 407.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For example:
  Cluster 30
    84-31 - 93.6 - 382.03 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class Mapping:
  Cluster 31
    84-32 - 118.08 - 367.78 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __init__(self, iterable):

    =====
    84-32 - 142.56 - 353.54 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.items_list = []
  Cluster 32
    84-33 - 142.56 - 339.29 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.__update(iterable)
  Cluster 33
    84-34 - 118.08 - 310.79 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def update(self, iterable):
  Cluster 34
    84-35 - 142.56 - 296.54 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for item in iterable:
  Cluster 35
    84-36 - 167.04 - 282.31 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.items_list.append(item)
  Cluster 36
    84-37 - 118.08 - 253.81 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - __update = update # private copy of original update() method
  Cluster 37
    84-38 - 93.6 - 225.32 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class MappingSubclass(Mapping):
  Cluster 38
    84-39 - 118.08 - 196.82 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def update(self, keys, values):
  Cluster 39
    84-40 - 142.56 - 182.57 24.89 - ffe - 35.864 - rgb(64, 128, 143) - # provides new signature for update()
    84-40 - 142.56 - 168.32 24.89 - ffe - 35.864 - rgb(64, 128, 143) - # but does not break __init__()
  Cluster 40
    84-41 - 142.56 - 154.09 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for item in zip(keys, values):
  Cluster 41
    84-42 - 167.04 - 139.84 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.items_list.append(item)
  Cluster 42
    84-43 - 93.6 - 109.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that the mangling rules are designed mostly to avoid accidents; it still is possible to access or modify a
  Cluster 43
    84-44 - 93.6 - 93.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - variable that is considered private. This can even be useful in special circumstances, such as in the debugger.
  Cluster 44
    84-45 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 78 Chapter 9. Classes
Page 85
  Cluster 0
    85-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    85-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Notice that code passed to exec() or eval() does not consider the classname of the invoking class to be the
  Cluster 2
    85-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - current class; this is similar to the eﬀect of the global statement, the eﬀect of which is likewise restricted to
  Cluster 3
    85-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - code that is byte-compiled together. The same restriction applies to getattr(), setattr() and delattr(),
  Cluster 4
    85-5 - 93.6 - 876.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as well as when referencing __dict__ directly.
  Cluster 5
    85-6 - 93.6 - 827.1 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 9.7 Odds and Ends
  Cluster 6
    85-7 - 93.6 - 790.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Sometimes it is useful to have a data type similar to the Pascal “record” or C “struct”, bundling together a
  Cluster 7
    85-8 - 93.6 - 774.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - few named data items. An empty class deﬁnition will do nicely:
  Cluster 8
    85-9 - 93.6 - 748.79 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class Employee:
  Cluster 9
    85-10 - 118.08 - 734.54 24.82 - ffd - 35.864 - rgb(0, 112, 33) - pass
  Cluster 10
    85-11 - 93.6 - 706.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - john = Employee() # Create an empty employee record
  Cluster 11
    85-12 - 93.6 - 677.56 24.89 - ffe - 35.864 - rgb(64, 128, 143) - # Fill the fields of the record
  Cluster 12
    85-13 - 93.6 - 663.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - john.name = 'John Doe'
  Cluster 13
    85-14 - 93.6 - 649.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - john.dept = 'computer lab'
  Cluster 14
    85-15 - 93.6 - 634.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - john.salary = 1000
  Cluster 15
    85-16 - 93.6 - 604.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A piece of Python code that expects a particular abstract data type can often be passed a class that emulates
  Cluster 16
    85-17 - 93.6 - 588.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the methods of that data type instead. For instance, if you have a function that formats some data from
  Cluster 17
    85-18 - 93.6 - 573.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a ﬁle object, you can deﬁne a class with methods read() and readline() that get the data from a string
  Cluster 18
    85-19 - 93.6 - 557.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - buﬀer instead, and pass it as an argument.
  Cluster 19
    85-20 - 93.6 - 535.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Instance method objects have attributes, too: m.__self__ is the instance object with the method m(), and
  Cluster 20
    85-21 - 93.6 - 519.93 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - m.__func__ is the function object corresponding to the method.
  Cluster 21
    85-22 - 93.6 - 470.61 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 9.8 Iterators
  Cluster 22
    85-23 - 93.6 - 434.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - By now you have probably noticed that most container objects can be looped over using a for statement:
  Cluster 23
    85-24 - 93.6 - 407.99 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for element in [1, 2, 3]:
  Cluster 24
    85-25 - 118.08 - 393.74 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(element)
  Cluster 25
    85-26 - 93.6 - 379.5 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for element in (1, 2, 3):
  Cluster 26
    85-27 - 93.6 - 351.0 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for key in {'one':1, 'two':2}:
    85-27 - 93.6 - 322.5 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for char in "123":

    =====
    85-27 - 118.08 - 365.25 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(element)
    85-27 - 118.08 - 336.75 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(key)
  Cluster 27
    85-28 - 118.08 - 308.26 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(char)
  Cluster 28
    85-29 - 93.6 - 294.02 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for line in open("myfile.txt"):
  Cluster 29
    85-30 - 118.08 - 279.77 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(line, end='')
  Cluster 30
    85-31 - 93.6 - 249.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This style of access is clear, concise, and convenient. The use of iterators pervades and uniﬁes Python.
  Cluster 31
    85-32 - 93.6 - 233.53 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Behind the scenes, the for statement calls iter() on the container object. The function returns an iterator
  Cluster 32
    85-33 - 93.6 - 218.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object that deﬁnes the method __next__() which accesses elements in the container one at a time. When
  Cluster 33
    85-34 - 93.6 - 202.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - there are no more elements, __next__() raises a StopIteration exception which tells the for loop to
    85-34 - 93.6 - 186.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - terminate. You can call the __next__() method using the next() built-in function; this example shows how
  Cluster 34
    85-35 - 93.6 - 171.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - it all works:
  Cluster 35
    85-36 - 93.6 - 145.33 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> s = 'abc'
  Cluster 36
    85-37 - 93.6 - 131.09 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> it = iter(s)
  Cluster 37
    85-38 - 93.6 - 116.84 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> it
  Cluster 38
    85-39 - 583.05 - 100.39 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 39
    85-40 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 9.7. Odds and Ends 79
Page 86
  Cluster 0
    86-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    86-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    86-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - <iterator object at 0x00A1DB50>
  Cluster 3
    86-4 - 93.6 - 890.54 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> next(it)
  Cluster 4
    86-5 - 93.6 - 876.29 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'a'
  Cluster 5
    86-6 - 93.6 - 862.04 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> next(it)
    86-6 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'b'
  Cluster 6
    86-7 - 93.6 - 833.56 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> next(it)
  Cluster 7
    86-8 - 93.6 - 819.31 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'c'
  Cluster 8
    86-9 - 93.6 - 805.06 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> next(it)
  Cluster 9
    86-10 - 93.6 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
  Cluster 10
    86-11 - 105.83 - 776.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
  Cluster 11
    86-12 - 118.08 - 762.32 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - next(it)
  Cluster 12
    86-13 - 93.6 - 748.07 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - StopIteration
  Cluster 13
    86-14 - 93.6 - 717.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Having seen the mechanics behind the iterator protocol, it is easy to add iterator behavior to your classes.
  Cluster 14
    86-15 - 93.6 - 701.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Deﬁne an __iter__() method which returns an object with a __next__() method. If the class deﬁnes
  Cluster 15
    86-16 - 93.6 - 686.3 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - __next__(), then __iter__() can just return self:
  Cluster 16
    86-17 - 93.6 - 660.27 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class Reverse:
  Cluster 17
    86-18 - 118.08 - 646.02 24.89 - ffe - 35.864 - rgb(64, 112, 161) - """Iterator for looping over a sequence backwards."""
  Cluster 18
    86-19 - 118.08 - 631.77 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __init__(self, data):

    =====
    86-19 - 142.56 - 617.53 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.data = data
  Cluster 19
    86-20 - 142.56 - 603.28 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.index = len(data)
  Cluster 20
    86-21 - 118.08 - 574.78 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __iter__(self):
  Cluster 21
    86-22 - 142.56 - 560.53 24.89 - ffd - 35.864 - rgb(0, 112, 33) - return self
  Cluster 22
    86-23 - 118.08 - 532.05 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __next__(self):
  Cluster 23
    86-24 - 142.56 - 517.8 24.89 - ffd - 35.864 - rgb(0, 112, 33) - if self.index == 0:
  Cluster 24
    86-25 - 142.56 - 489.31 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.index = self.index - 1
    86-25 - 142.56 - 475.06 24.89 - ffd - 35.864 - rgb(0, 112, 33) - return self.data[self.index]

    =====
    86-25 - 167.04 - 503.56 24.89 - ffd - 35.864 - rgb(0, 112, 33) - raise StopIteration
  Cluster 25
    86-26 - 93.6 - 440.35 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> rev = Reverse('spam')
  Cluster 26
    86-27 - 93.6 - 426.1 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> iter(rev)
    86-27 - 93.6 - 411.85 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - <__main__.Reverse object at 0x00A1DB50>
    86-27 - 93.6 - 397.61 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for char in rev:
    86-27 - 93.6 - 383.36 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(char)
  Cluster 27
    86-28 - 93.6 - 369.12 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 28
    86-29 - 93.6 - 354.87 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - m
  Cluster 29
    86-30 - 93.6 - 340.63 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - a
  Cluster 30
    86-31 - 93.6 - 326.38 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - p
    86-31 - 93.6 - 312.13 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - s
  Cluster 31
    86-32 - 93.6 - 254.12 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 9.9 Generators
  Cluster 32
    86-33 - 93.6 - 217.39 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - Generators are a simple and powerful tool for creating iterators. They are written like regular functions but
  Cluster 33
    86-34 - 93.6 - 201.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - use the yield statement whenever they want to return data. Each time next() is called on it, the generator
  Cluster 34
    86-35 - 93.6 - 186.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - resumes where it left oﬀ (it remembers all the data values and which statement was last executed). An
  Cluster 35
    86-36 - 93.6 - 170.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - example shows that generators can be trivially easy to create:
  Cluster 36
    86-37 - 93.6 - 144.73 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def reverse(data):
  Cluster 37
    86-38 - 118.08 - 130.49 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for index in range(len(data)-1, -1, -1):
  Cluster 38
    86-39 - 142.56 - 116.25 24.89 - ffd - 35.864 - rgb(0, 112, 33) - yield data[index]
  Cluster 39
    86-40 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 80 Chapter 9. Classes
Page 87
  Cluster 0
    87-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    87-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for char in reverse('golf'):
  Cluster 2
    87-3 - 93.6 - 902.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(char)
  Cluster 3
    87-4 - 93.6 - 887.95 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    87-4 - 93.6 - 873.7 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - f
  Cluster 4
    87-5 - 93.6 - 859.46 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - l
  Cluster 5
    87-6 - 93.6 - 845.21 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - o
  Cluster 6
    87-7 - 93.6 - 830.96 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - g
  Cluster 7
    87-8 - 93.6 - 800.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Anything that can be done with generators can also be done with class-based iterators as described in the
  Cluster 8
    87-9 - 93.6 - 784.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - previous section. What makes generators so compact is that the __iter__() and __next__() methods are
  Cluster 9
    87-10 - 93.6 - 769.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - created automatically.
  Cluster 10
    87-11 - 93.6 - 747.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Another key feature is that the local variables and execution state are automatically saved between calls.
  Cluster 11
    87-12 - 93.6 - 731.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This made the function easier to write and much more clear than an approach using instance variables like
  Cluster 12
    87-13 - 93.6 - 716.08 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - self.index and self.data.
  Cluster 13
    87-14 - 93.6 - 694.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In addition to automatic method creation and saving program state, when generators terminate, they au-
  Cluster 14
    87-15 - 93.6 - 678.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - tomatically raise StopIteration. In combination, these features make it easy to create iterators with no
  Cluster 15
    87-16 - 93.6 - 662.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - more eﬀort than writing a regular function.
  Cluster 16
    87-17 - 93.6 - 613.65 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 9.10 Generator Expressions
  Cluster 17
    87-18 - 93.6 - 576.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Some simple generators can be coded succinctly as expressions using a syntax similar to list comprehensions
  Cluster 18
    87-19 - 93.6 - 561.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - but with parentheses instead of square brackets. These expressions are designed for situations where the gen-
  Cluster 19
    87-20 - 93.6 - 545.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - erator is used right away by an enclosing function. Generator expressions are more compact but less versatile
  Cluster 20
    87-21 - 93.6 - 530.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - than full generator deﬁnitions and tend to be more memory friendly than equivalent list comprehensions.
  Cluster 21
    87-22 - 93.6 - 508.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Examples:
  Cluster 22
    87-23 - 93.6 - 482.25 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sum(i*i for i in range(10)) # sum of squares
  Cluster 23
    87-24 - 93.6 - 468.0 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 285
  Cluster 24
    87-25 - 93.6 - 439.5 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> xvec = [10, 20, 30]
  Cluster 25
    87-26 - 93.6 - 425.27 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> yvec = [7, 5, 3]
  Cluster 26
    87-27 - 93.6 - 411.02 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sum(x*y for x,y in zip(xvec, yvec)) # dot product
    87-27 - 93.6 - 396.77 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 260
  Cluster 27
    87-28 - 93.6 - 368.28 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from math import pi, sin
  Cluster 28
    87-29 - 93.6 - 354.03 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sine_table = {x: sin(x*pi/180) for x in range(0, 91)}
  Cluster 29
    87-30 - 93.6 - 325.53 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> unique_words = set(word for line in page for word in line.split())
  Cluster 30
    87-31 - 93.6 - 297.05 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> valedictorian = max((student.gpa, student.name) for student in graduates)
  Cluster 31
    87-32 - 93.6 - 268.55 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> data = 'golf'
  Cluster 32
    87-33 - 93.6 - 254.31 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> list(data[i] for i in range(len(data)-1, -1, -1))
  Cluster 33
    87-34 - 93.6 - 240.06 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['f', 'l', 'o', 'g']
  Cluster 34
    87-35 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 9.10. Generator Expressions 81
Page 88
  Cluster 0
    88-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    88-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 82 Chapter 9. Classes
Page 89
  Cluster 0
    89-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    89-2 - 661.54 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - TEN
  Cluster 2
    89-3 - 297.08 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - BRIEF TOUR OF THE STANDARD LIBRARY
  Cluster 3
    89-4 - 93.6 - 721.01 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.1 Operating System Interface
  Cluster 4
    89-5 - 93.6 - 684.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The os module provides dozens of functions for interacting with the operating system:
  Cluster 5
    89-6 - 93.6 - 658.24 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import os
  Cluster 6
    89-7 - 93.6 - 643.99 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> os.getcwd() # Return the current working directory
  Cluster 7
    89-8 - 93.6 - 629.75 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'C:\\Python37'
  Cluster 8
    89-9 - 93.6 - 615.5 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> os.chdir('/server/accesslogs') # Change current working directory
  Cluster 9
    89-10 - 93.6 - 601.25 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> os.system('mkdir today') # Run the command mkdir in the system shell
    89-10 - 93.6 - 587.0 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0
  Cluster 10
    89-11 - 93.6 - 556.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Be sure to use the import os style instead of from os import *. This will keep os.open() from shadowing
  Cluster 11
    89-12 - 93.6 - 540.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the built-in open() function which operates much diﬀerently.
  Cluster 12
    89-13 - 93.6 - 518.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The built-in dir() and help() functions are useful as interactive aids for working with large modules like
  Cluster 13
    89-14 - 93.6 - 503.22 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - os:
  Cluster 14
    89-15 - 93.6 - 477.18 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import os
  Cluster 15
    89-16 - 93.6 - 462.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> dir(os)
    89-16 - 93.6 - 448.68 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - <returns a list of all module functions>
    89-16 - 93.6 - 434.43 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> help(os)
  Cluster 16
    89-17 - 93.6 - 420.19 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - <returns an extensive manual page created from the module's docstrings>
  Cluster 17
    89-18 - 93.6 - 389.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For daily ﬁle and directory management tasks, the shutil module provides a higher level interface that is
  Cluster 18
    89-19 - 93.6 - 373.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - easier to use:
  Cluster 19
    89-20 - 93.6 - 347.92 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import shutil
  Cluster 20
    89-21 - 93.6 - 333.67 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> shutil.copyfile('data.db', 'archive.db')
  Cluster 21
    89-22 - 93.6 - 319.44 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'archive.db'
  Cluster 22
    89-23 - 93.6 - 305.19 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> shutil.move('/build/executables', 'installdir')
    89-23 - 93.6 - 290.94 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'installdir'
  Cluster 23
    89-24 - 93.6 - 232.93 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.2 File Wildcards
  Cluster 24
    89-25 - 93.6 - 196.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The glob module provides a function for making ﬁle lists from directory wildcard searches:
  Cluster 25
    89-26 - 93.6 - 170.17 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import glob
  Cluster 26
    89-27 - 93.6 - 155.92 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> glob.glob('*.py')
    89-27 - 93.6 - 141.67 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['primes.py', 'random.py', 'quote.py']
  Cluster 27
    89-28 - 687.75 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 83
Page 90
  Cluster 0
    90-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    90-2 - 93.6 - 919.68 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.3 Command Line Arguments
  Cluster 2
    90-3 - 93.6 - 882.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Common utility scripts often need to process command line arguments. These arguments are stored in the
  Cluster 3
    90-4 - 93.6 - 867.4 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - sys module’s argv attribute as a list. For instance the following output results from running python demo.py
  Cluster 4
    90-5 - 93.6 - 851.86 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - one two three at the command line:
  Cluster 5
    90-6 - 93.6 - 825.83 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import sys
  Cluster 6
    90-7 - 93.6 - 811.59 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(sys.argv)
  Cluster 7
    90-8 - 93.6 - 797.34 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['demo.py', 'one', 'two', 'three']
  Cluster 8
    90-9 - 93.6 - 766.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The getopt module processes sys.argv using the conventions of the Unix getopt() function. More powerful
  Cluster 9
    90-10 - 93.6 - 751.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and ﬂexible command line processing is provided by the argparse module.
  Cluster 10
    90-11 - 93.6 - 701.78 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.4 Error Output Redirection and Program Termination
  Cluster 11
    90-12 - 93.6 - 665.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The sys module also has attributes for stdin, stdout, and stderr. The latter is useful for emitting warnings
  Cluster 12
    90-13 - 93.6 - 649.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and error messages to make them visible even when stdout has been redirected:
  Cluster 13
    90-14 - 93.6 - 623.47 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sys.stderr.write('Warning, log file not found starting a new one\n')
  Cluster 14
    90-15 - 93.6 - 609.22 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Warning, log file not found starting a new one
  Cluster 15
    90-16 - 93.6 - 578.53 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The most direct way to terminate a script is to use sys.exit().
  Cluster 16
    90-17 - 93.6 - 529.2 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.5 String Pattern Matching
  Cluster 17
    90-18 - 93.6 - 492.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The re module provides regular expression tools for advanced string processing. For complex matching and
  Cluster 18
    90-19 - 93.6 - 476.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - manipulation, regular expressions oﬀer succinct, optimized solutions:
  Cluster 19
    90-20 - 93.6 - 450.89 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import re
  Cluster 20
    90-21 - 93.6 - 436.64 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
    90-21 - 93.6 - 422.4 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['foot', 'fell', 'fastest']
    90-21 - 93.6 - 408.15 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')
  Cluster 21
    90-22 - 93.6 - 393.9 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'cat in the hat'
  Cluster 22
    90-23 - 93.6 - 363.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When only simple capabilities are needed, string methods are preferred because they are easier to read and
  Cluster 23
    90-24 - 93.6 - 347.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - debug:
  Cluster 24
    90-25 - 93.6 - 321.63 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 'tea for too'.replace('too', 'two')
  Cluster 25
    90-26 - 93.6 - 307.38 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'tea for two'
  Cluster 26
    90-27 - 93.6 - 249.39 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.6 Mathematics
  Cluster 27
    90-28 - 93.6 - 212.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The math module gives access to the underlying C library functions for ﬂoating point math:
  Cluster 28
    90-29 - 93.6 - 186.62 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import math
  Cluster 29
    90-30 - 93.6 - 172.38 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> math.cos(math.pi / 4)
  Cluster 30
    90-31 - 93.6 - 158.13 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0.70710678118654757
  Cluster 31
    90-32 - 93.6 - 143.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> math.log(1024, 2)
  Cluster 32
    90-33 - 93.6 - 129.64 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 10.0
  Cluster 33
    90-34 - 93.6 - 98.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The random module provides tools for making random selections:
  Cluster 34
    90-35 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 84 Chapter 10. Brief Tour of the Standard Library
Page 91
  Cluster 0
    91-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    91-2 - 93.6 - 916.45 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import random
  Cluster 2
    91-3 - 93.6 - 902.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> random.choice(['apple', 'pear', 'banana'])
  Cluster 3
    91-4 - 93.6 - 887.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'apple'
    91-4 - 93.6 - 873.7 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> random.sample(range(100), 10) # sampling without replacement
  Cluster 4
    91-5 - 93.6 - 859.46 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [30, 83, 16, 4, 8, 81, 41, 50, 18, 33]
  Cluster 5
    91-6 - 93.6 - 845.21 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> random.random() # random float
  Cluster 6
    91-7 - 93.6 - 830.96 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0.17970987693706186
  Cluster 7
    91-8 - 93.6 - 816.71 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> random.randrange(6) # random integer chosen from range(6)
  Cluster 8
    91-9 - 93.6 - 802.48 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 4
  Cluster 9
    91-10 - 93.6 - 771.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The statistics module calculates basic statistical properties (the mean, median, variance, etc.) of numeric
  Cluster 10
    91-11 - 93.6 - 756.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - data:
  Cluster 11
    91-12 - 93.6 - 730.2 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import statistics
  Cluster 12
    91-13 - 93.6 - 715.95 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]
  Cluster 13
    91-14 - 93.6 - 701.71 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> statistics.mean(data)
  Cluster 14
    91-15 - 93.6 - 687.47 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1.6071428571428572
    91-15 - 93.6 - 673.22 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> statistics.median(data)
  Cluster 15
    91-16 - 93.6 - 658.97 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1.25
  Cluster 16
    91-17 - 93.6 - 644.72 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> statistics.variance(data)
  Cluster 17
    91-18 - 93.6 - 630.47 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1.3720238095238095
  Cluster 18
    91-19 - 93.6 - 599.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The SciPy project <https://scipy.org> has many other modules for numerical computations.
  Cluster 19
    91-20 - 93.6 - 550.46 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.7 Internet Access
  Cluster 20
    91-21 - 93.6 - 513.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There are a number of modules for accessing the internet and processing internet protocols. Two of the
  Cluster 21
    91-22 - 93.6 - 498.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - simplest are urllib.request for retrieving data from URLs and smtplib for sending mail:
  Cluster 22
    91-23 - 93.6 - 472.15 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from urllib.request import urlopen
  Cluster 23
    91-24 - 93.6 - 457.9 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> with urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl') as response:
    91-24 - 93.6 - 443.65 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... for line in response:
    91-24 - 93.6 - 429.4 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... line = line.decode('utf-8') # Decoding the binary data to text.
  Cluster 24
    91-25 - 93.6 - 415.15 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... if 'EST' in line or 'EDT' in line: # look for Eastern Time
  Cluster 25
    91-26 - 93.6 - 400.92 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print(line)
  Cluster 26
    91-27 - 93.6 - 372.42 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - <BR>Nov. 25, 09:43:32 PM EST
  Cluster 27
    91-28 - 93.6 - 343.93 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import smtplib
  Cluster 28
    91-29 - 93.6 - 329.68 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> server = smtplib.SMTP('localhost')
    91-29 - 93.6 - 315.43 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',
    91-29 - 93.6 - 301.18 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... """To: jcaesar@example.org
  Cluster 29
    91-30 - 93.6 - 286.94 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... From: soothsayer@example.org
  Cluster 30
    91-31 - 93.6 - 272.7 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
  Cluster 31
    91-32 - 93.6 - 258.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... Beware the Ides of March.
  Cluster 32
    91-33 - 93.6 - 244.21 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... """)
  Cluster 33
    91-34 - 93.6 - 229.96 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> server.quit()
  Cluster 34
    91-35 - 93.6 - 199.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (Note that the second example needs a mailserver running on localhost.)
  Cluster 35
    91-36 - 93.6 - 149.93 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.8 Dates and Times
  Cluster 36
    91-37 - 93.6 - 113.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The datetime module supplies classes for manipulating dates and times in both simple and complex ways.
  Cluster 37
    91-38 - 93.6 - 97.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - While date and time arithmetic is supported, the focus of the implementation is on eﬃcient member extrac-
  Cluster 38
    91-39 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 10.7. Internet Access 85
Page 92
  Cluster 0
    92-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    92-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - tion for output formatting and manipulation. The module also supports objects that are timezone aware.
  Cluster 2
    92-3 - 93.6 - 897.01 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # dates are easily constructed and formatted
  Cluster 3
    92-4 - 93.6 - 882.76 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from datetime import date
  Cluster 4
    92-5 - 93.6 - 868.52 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> now = date.today()
  Cluster 5
    92-6 - 93.6 - 854.28 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> now
  Cluster 6
    92-7 - 93.6 - 840.03 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - datetime.date(2003, 12, 2)
    92-7 - 93.6 - 825.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")
  Cluster 7
    92-8 - 93.6 - 811.54 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'
  Cluster 8
    92-9 - 93.6 - 783.04 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> # dates support calendar arithmetic
  Cluster 9
    92-10 - 93.6 - 768.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> birthday = date(1964, 7, 31)
  Cluster 10
    92-11 - 93.6 - 754.55 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> age = now - birthday
  Cluster 11
    92-12 - 93.6 - 740.3 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> age.days
  Cluster 12
    92-13 - 93.6 - 726.06 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 14368
  Cluster 13
    92-14 - 93.6 - 668.06 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.9 Data Compression
  Cluster 14
    92-15 - 93.6 - 631.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Common data archiving and compression formats are directly supported by modules including: zlib, gzip,
  Cluster 15
    92-16 - 93.6 - 615.78 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - bz2, lzma, zipfile and tarfile.
  Cluster 16
    92-17 - 93.6 - 589.75 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import zlib
  Cluster 17
    92-18 - 93.6 - 575.5 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> s = b'witch which has which witches wrist watch'
  Cluster 18
    92-19 - 93.6 - 561.25 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> len(s)
  Cluster 19
    92-20 - 93.6 - 547.0 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 41
  Cluster 20
    92-21 - 93.6 - 532.77 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> t = zlib.compress(s)
  Cluster 21
    92-22 - 93.6 - 518.52 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> len(t)
  Cluster 22
    92-23 - 93.6 - 504.27 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 37
  Cluster 23
    92-24 - 93.6 - 490.02 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> zlib.decompress(t)
    92-24 - 93.6 - 475.77 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - b'witch which has which witches wrist watch'
    92-24 - 93.6 - 461.53 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> zlib.crc32(s)
    92-24 - 93.6 - 447.28 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 226805979
  Cluster 24
    92-25 - 93.6 - 389.27 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.10 Performance Measurement
  Cluster 25
    92-26 - 93.6 - 352.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Some Python users develop a deep interest in knowing the relative performance of diﬀerent approaches to
  Cluster 26
    92-27 - 93.6 - 337.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the same problem. Python provides a measurement tool that answers those questions immediately.
  Cluster 27
    92-28 - 93.6 - 314.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For example, it may be tempting to use the tuple packing and unpacking feature instead of the tradi-
  Cluster 28
    92-29 - 93.6 - 299.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - tional approach to swapping arguments. The timeit module quickly demonstrates a modest performance
    92-29 - 93.6 - 283.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - advantage:
  Cluster 29
    92-30 - 93.6 - 257.87 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from timeit import Timer
  Cluster 30
    92-31 - 93.6 - 243.62 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
    92-31 - 93.6 - 229.37 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0.57535828626024577
  Cluster 31
    92-32 - 93.6 - 215.12 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> Timer('a,b = b,a', 'a=1; b=2').timeit()
  Cluster 32
    92-33 - 93.6 - 200.88 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0.54962537085770791
  Cluster 33
    92-34 - 93.6 - 170.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In contrast to timeit’s ﬁne level of granularity, the profile and pstats modules provide tools for identifying
  Cluster 34
    92-35 - 93.6 - 154.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - time critical sections in larger blocks of code.
  Cluster 35
    92-36 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 86 Chapter 10. Brief Tour of the Standard Library
Page 93
  Cluster 0
    93-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    93-2 - 93.6 - 919.68 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.11 Quality Control
  Cluster 2
    93-3 - 93.6 - 882.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - One approach for developing high quality software is to write tests for each function as it is developed and
  Cluster 3
    93-4 - 93.6 - 867.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to run those tests frequently during the development process.
  Cluster 4
    93-5 - 93.6 - 845.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The doctest module provides a tool for scanning a module and validating tests embedded in a program’s
  Cluster 5
    93-6 - 93.6 - 829.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - docstrings. Test construction is as simple as cutting-and-pasting a typical call along with its results into
  Cluster 6
    93-7 - 93.6 - 814.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the docstring. This improves the documentation by providing the user with an example and it allows the
  Cluster 7
    93-8 - 93.6 - 798.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - doctest module to make sure the code remains true to the documentation:
  Cluster 8
    93-9 - 93.6 - 772.73 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def average(values):
  Cluster 9
    93-10 - 118.08 - 758.49 24.89 - ffe - 35.864 - rgb(64, 112, 161) - """Computes the arithmetic mean of a list of numbers.
  Cluster 10
    93-11 - 118.08 - 729.99 24.89 - ffe - 35.864 - rgb(64, 112, 161) - >>> print(average([20, 30, 70]))
  Cluster 11
    93-12 - 118.08 - 715.74 24.89 - ffe - 35.864 - rgb(64, 112, 161) - 40.0
  Cluster 12
    93-13 - 118.08 - 701.49 24.89 - ffe - 35.864 - rgb(64, 112, 161) - """
  Cluster 13
    93-14 - 118.08 - 687.25 24.89 - ffd - 35.864 - rgb(0, 112, 33) - return sum(values) / len(values)
  Cluster 14
    93-15 - 93.6 - 658.76 24.82 - ffd - 35.864 - rgb(0, 112, 33) - import doctest
  Cluster 15
    93-16 - 93.6 - 644.51 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - doctest.testmod() # automatically validate the embedded tests
  Cluster 16
    93-17 - 93.6 - 613.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The unittest module is not as eﬀortless as the doctest module, but it allows a more comprehensive set of
  Cluster 17
    93-18 - 93.6 - 598.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - tests to be maintained in a separate ﬁle:
  Cluster 18
    93-19 - 93.6 - 572.25 24.82 - ffd - 35.864 - rgb(0, 112, 33) - import unittest
  Cluster 19
    93-20 - 93.6 - 543.75 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class TestStatisticalFunctions(unittest.TestCase):
  Cluster 20
    93-21 - 118.08 - 515.25 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def test_average(self):
  Cluster 21
    93-22 - 142.56 - 501.01 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.assertEqual(average([20, 30, 70]), 40.0)
    93-22 - 142.56 - 486.76 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.assertEqual(round(average([1, 5, 7]), 1), 4.3)
    93-22 - 142.56 - 472.51 24.89 - ffd - 35.864 - rgb(0, 112, 33) - with self.assertRaises(ZeroDivisionError):
  Cluster 22
    93-23 - 167.04 - 458.28 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - average([])
  Cluster 23
    93-24 - 142.56 - 444.03 24.89 - ffd - 35.864 - rgb(0, 112, 33) - with self.assertRaises(TypeError):
  Cluster 24
    93-25 - 167.04 - 429.78 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - average(20, 30, 70)
  Cluster 25
    93-26 - 93.6 - 401.28 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - unittest.main() # Calling from the command line invokes all tests
  Cluster 26
    93-27 - 93.6 - 343.28 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 10.12 Batteries Included
  Cluster 27
    93-28 - 93.6 - 306.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python has a “batteries included” philosophy. This is best seen through the sophisticated and robust
  Cluster 28
    93-29 - 93.6 - 291.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - capabilities of its larger packages. For example:
  Cluster 29
    93-30 - 109.42 - 269.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The xmlrpc.client and xmlrpc.server modules make implementing remote procedure calls into an
  Cluster 30
    93-31 - 125.98 - 253.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - almost trivial task. Despite the modules names, no direct knowledge or handling of XML is needed.
  Cluster 31
    93-32 - 109.42 - 231.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The email package is a library for managing email messages, including MIME and other RFC 2822-
  Cluster 32
    93-33 - 125.98 - 216.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - based message documents. Unlike smtplib and poplib which actually send and receive messages, the
  Cluster 33
    93-34 - 125.98 - 200.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - email package has a complete toolset for building or decoding complex message structures (including
  Cluster 34
    93-35 - 125.98 - 184.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - attachments) and for implementing internet encoding and header protocols.
  Cluster 35
    93-36 - 109.42 - 162.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The json package provides robust support for parsing this popular data interchange format. The csv
  Cluster 36
    93-37 - 125.98 - 147.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module supports direct reading and writing of ﬁles in Comma-Separated Value format, commonly sup-
  Cluster 37
    93-38 - 125.98 - 131.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ported by databases and spreadsheets. XML processing is supported by the xml.etree.ElementTree,
  Cluster 38
    93-39 - 125.98 - 116.3 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - xml.dom and xml.sax packages. Together, these modules and packages greatly simplify data inter-
  Cluster 39
    93-40 - 125.98 - 100.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - change between Python applications and other tools.
  Cluster 40
    93-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 10.11. Quality Control 87
Page 94
  Cluster 0
    94-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    94-2 - 109.42 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • The sqlite3 module is a wrapper for the SQLite database library, providing a persistent database
  Cluster 2
    94-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that can be updated and accessed using slightly nonstandard SQL syntax.
  Cluster 3
    94-4 - 109.42 - 885.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Internationalization is supported by a number of modules including gettext, locale, and the codecs
  Cluster 4
    94-5 - 125.98 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - package.
  Cluster 5
    94-6 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 88 Chapter 10. Brief Tour of the Standard Library
Page 95
  Cluster 0
    95-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    95-2 - 626.77 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - ELEVEN
  Cluster 2
    95-3 - 191.26 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - BRIEF TOUR OF THE STANDARD LIBRARY — PART II
  Cluster 3
    95-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This second tour covers more advanced modules that support professional programming needs. These mod-
  Cluster 4
    95-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ules rarely occur in small scripts.
  Cluster 5
    95-6 - 93.6 - 663.91 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 11.1 Output Formatting
  Cluster 6
    95-7 - 93.6 - 627.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The reprlib module provides a version of repr() customized for abbreviated displays of large or deeply
  Cluster 7
    95-8 - 93.6 - 611.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - nested containers:
  Cluster 8
    95-9 - 93.6 - 585.6 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import reprlib
  Cluster 9
    95-10 - 93.6 - 571.35 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> reprlib.repr(set('supercalifragilisticexpialidocious'))
  Cluster 10
    95-11 - 93.6 - 557.1 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - "{'a', 'c', 'd', 'e', 'f', 'g', ...}"
  Cluster 11
    95-12 - 93.6 - 526.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The pprint module oﬀers more sophisticated control over printing both built-in and user deﬁned objects in
  Cluster 12
    95-13 - 93.6 - 510.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a way that is readable by the interpreter. When the result is longer than one line, the “pretty printer” adds
  Cluster 13
    95-14 - 93.6 - 495.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - line breaks and indentation to more clearly reveal data structure:
  Cluster 14
    95-15 - 93.6 - 469.3 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import pprint
  Cluster 15
    95-16 - 93.6 - 455.05 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',
  Cluster 16
    95-17 - 93.6 - 440.8 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... 'yellow'], 'blue']]]
  Cluster 17
    95-18 - 93.6 - 426.56 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    95-18 - 93.6 - 412.31 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> pprint.pprint(t, width=30)
    95-18 - 93.6 - 398.06 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [[[['black', 'cyan'],

    =====
    95-18 - 111.96 - 383.81 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'white',
  Cluster 18
    95-19 - 111.96 - 369.58 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - ['green', 'red']],
  Cluster 19
    95-20 - 105.83 - 355.33 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [['magenta', 'yellow'],

    =====
    95-20 - 111.96 - 341.08 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'blue']]]
  Cluster 20
    95-21 - 93.6 - 310.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The textwrap module formats paragraphs of text to ﬁt a given screen width:
  Cluster 21
    95-22 - 93.6 - 284.35 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import textwrap
  Cluster 22
    95-23 - 93.6 - 270.1 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> doc = """The wrap() method is just like fill() except that it returns
    95-23 - 93.6 - 255.85 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... a list of strings instead of one big string with newlines to separate
  Cluster 23
    95-24 - 93.6 - 241.62 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... the wrapped lines."""
  Cluster 24
    95-25 - 93.6 - 227.37 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    95-25 - 93.6 - 213.12 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print(textwrap.fill(doc, width=40))
  Cluster 25
    95-26 - 93.6 - 198.87 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - The wrap() method is just like fill()
  Cluster 26
    95-27 - 93.6 - 184.63 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - except that it returns a list of strings
  Cluster 27
    95-28 - 93.6 - 170.38 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - instead of one big string with newlines
  Cluster 28
    95-29 - 93.6 - 156.13 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - to separate the wrapped lines.
  Cluster 29
    95-30 - 93.6 - 125.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The locale module accesses a database of culture speciﬁc data formats. The grouping attribute of locale’s
  Cluster 30
    95-31 - 93.6 - 109.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - format function provides a direct way of formatting numbers with group separators:
  Cluster 31
    95-32 - 687.75 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 89
Page 96
  Cluster 0
    96-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    96-2 - 93.6 - 916.45 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import locale
  Cluster 2
    96-3 - 93.6 - 902.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> locale.setlocale(locale.LC_ALL, 'English_United States.1252')
  Cluster 3
    96-4 - 93.6 - 887.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'English_United States.1252'
    96-4 - 93.6 - 873.7 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> conv = locale.localeconv() # get a mapping of conventions
  Cluster 4
    96-5 - 93.6 - 859.46 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x = 1234567.8
  Cluster 5
    96-6 - 93.6 - 845.21 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> locale.format("%d", x, grouping=True)
  Cluster 6
    96-7 - 93.6 - 830.96 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '1,234,567'
  Cluster 7
    96-8 - 93.6 - 816.71 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> locale.format_string("%s%.*f", (conv['currency_symbol'],
  Cluster 8
    96-9 - 93.6 - 802.48 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... conv['frac_digits'], x), grouping=True)
  Cluster 9
    96-10 - 93.6 - 788.23 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '$1,234,567.80'
  Cluster 10
    96-11 - 93.6 - 731.12 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 11.2 Templating
  Cluster 11
    96-12 - 93.6 - 694.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The string module includes a versatile Template class with a simpliﬁed syntax suitable for editing by
  Cluster 12
    96-13 - 93.6 - 678.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - end-users. This allows users to customize their applications without having to alter the application.
  Cluster 13
    96-14 - 93.6 - 656.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The format uses placeholder names formed by $ with valid Python identiﬁers (alphanumeric characters and
  Cluster 14
    96-15 - 93.6 - 641.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - underscores). Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters
  Cluster 15
    96-16 - 93.6 - 625.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with no intervening spaces. Writing $$ creates a single escaped $:
  Cluster 16
    96-17 - 93.6 - 600.74 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from string import Template
  Cluster 17
    96-18 - 93.6 - 586.5 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> t = Template('${village}folk send $$10 to $cause.')
    96-18 - 93.6 - 572.25 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> t.substitute(village='Nottingham', cause='the ditch fund')
  Cluster 18
    96-19 - 93.6 - 558.0 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Nottinghamfolk send $10 to the ditch fund.'
  Cluster 19
    96-20 - 93.6 - 527.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The substitute() method raises a KeyError when a placeholder is not supplied in a dictionary or a
  Cluster 20
    96-21 - 93.6 - 511.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - keyword argument. For mail-merge style applications, user supplied data may be incomplete and the
  Cluster 21
    96-22 - 93.6 - 496.22 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - safe_substitute() method may be more appropriate — it will leave placeholders unchanged if data is
    96-22 - 93.6 - 480.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - missing:
  Cluster 22
    96-23 - 93.6 - 455.69 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> t = Template('Return the $item to $owner.')
  Cluster 23
    96-24 - 93.6 - 441.44 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> d = dict(item='unladen swallow')
  Cluster 24
    96-25 - 93.6 - 427.19 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> t.substitute(d)
    96-25 - 93.6 - 412.94 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
    96-25 - 93.6 - 384.45 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - KeyError: 'owner'
    96-25 - 93.6 - 370.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> t.safe_substitute(d)

    =====
    96-25 - 105.83 - 398.7 24.89 - ffe - 35.864 - rgb(64, 128, 143) - ...
  Cluster 25
    96-26 - 93.6 - 355.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'Return the unladen swallow to $owner.'
  Cluster 26
    96-27 - 93.6 - 325.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Template subclasses can specify a custom delimiter. For example, a batch renaming utility for a photo
  Cluster 27
    96-28 - 93.6 - 309.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - browser may elect to use percent signs for placeholders such as the current date, image sequence number, or
  Cluster 28
    96-29 - 93.6 - 294.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁle format:
  Cluster 29
    96-30 - 93.6 - 269.19 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> import time, os.path
  Cluster 30
    96-31 - 93.6 - 254.94 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']
  Cluster 31
    96-32 - 93.6 - 240.69 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> class BatchRename(Template):
  Cluster 32
    96-33 - 93.6 - 226.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... delimiter = '%'
    96-33 - 93.6 - 212.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format): ')
  Cluster 33
    96-34 - 93.6 - 197.95 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Enter rename style (%d-date %n-seqnum %f-format): Ashley_%n%f
  Cluster 34
    96-35 - 93.6 - 169.46 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> t = BatchRename(fmt)
  Cluster 35
    96-36 - 93.6 - 155.21 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> date = time.strftime('%d%b%y')
  Cluster 36
    96-37 - 93.6 - 140.96 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> for i, filename in enumerate(photofiles):
  Cluster 37
    96-38 - 93.6 - 126.72 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... base, ext = os.path.splitext(filename)
  Cluster 38
    96-39 - 93.6 - 112.48 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... newname = t.substitute(d=date, n=i, f=ext)
  Cluster 39
    96-40 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 40
    96-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 90 Chapter 11. Brief Tour of the Standard Library — Part II
Page 97
  Cluster 0
    97-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    97-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    97-3 - 93.6 - 904.79 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... print('{0} --> {1}'.format(filename, newname))
  Cluster 3
    97-4 - 93.6 - 876.29 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - img_1074.jpg --> Ashley_0.jpg
  Cluster 4
    97-5 - 93.6 - 862.04 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - img_1076.jpg --> Ashley_1.jpg
    97-5 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - img_1077.jpg --> Ashley_2.jpg
  Cluster 5
    97-6 - 93.6 - 817.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Another application for templating is separating program logic from the details of multiple output formats.
  Cluster 6
    97-7 - 93.6 - 801.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This makes it possible to substitute custom templates for XML ﬁles, plain text reports, and HTML web
  Cluster 7
    97-8 - 93.6 - 786.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - reports.
  Cluster 8
    97-9 - 93.6 - 737.26 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 11.3 Working with Binary Data Record Layouts
  Cluster 9
    97-10 - 93.6 - 700.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The struct module provides pack() and unpack() functions for working with variable length binary record
  Cluster 10
    97-11 - 93.6 - 684.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - formats. The following example shows how to loop through header information in a ZIP ﬁle without using
  Cluster 11
    97-12 - 93.6 - 669.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the zipfile module. Pack codes "H" and "I" represent two and four byte unsigned numbers respectively.
  Cluster 12
    97-13 - 93.6 - 653.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The "<" indicates that they are standard size and in little-endian byte order:
  Cluster 13
    97-14 - 93.6 - 628.51 24.82 - ffd - 35.864 - rgb(0, 112, 33) - import struct
  Cluster 14
    97-15 - 93.6 - 600.01 24.89 - ffd - 35.864 - rgb(0, 112, 33) - with open('myfile.zip', 'rb') as f:
  Cluster 15
    97-16 - 118.08 - 585.78 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - data = f.read()
  Cluster 16
    97-17 - 93.6 - 557.28 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - start = 0
  Cluster 17
    97-18 - 93.6 - 543.04 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for i in range(3): # show the first 3 file headers
  Cluster 18
    97-19 - 118.08 - 528.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - start += 14
  Cluster 19
    97-20 - 118.08 - 514.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - fields = struct.unpack('<IIIHH', data[start:start+16])
  Cluster 20
    97-21 - 118.08 - 500.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - crc32, comp_size, uncomp_size, filenamesize, extra_size = fields
  Cluster 21
    97-22 - 118.08 - 471.8 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - start += 16
  Cluster 22
    97-23 - 118.08 - 457.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - filename = data[start:start+filenamesize]
  Cluster 23
    97-24 - 118.08 - 443.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - start += filenamesize
    97-24 - 118.08 - 429.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - extra = data[start:start+extra_size]
    97-24 - 118.08 - 414.82 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(filename, hex(crc32), comp_size, uncomp_size)
  Cluster 24
    97-25 - 118.08 - 386.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - start += extra_size + comp_size # skip to the next header
  Cluster 25
    97-26 - 93.6 - 328.87 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 11.4 Multi-threading
  Cluster 26
    97-27 - 93.6 - 292.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Threading is a technique for decoupling tasks which are not sequentially dependent. Threads can be used to
  Cluster 27
    97-28 - 93.6 - 276.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - improve the responsiveness of applications that accept user input while other tasks run in the background.
  Cluster 28
    97-29 - 93.6 - 261.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A related use case is running I/O in parallel with computations in another thread.
  Cluster 29
    97-30 - 93.6 - 239.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The following code shows how the high level threading module can run tasks in background while the main
  Cluster 30
    97-31 - 93.6 - 223.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - program continues to run:
  Cluster 31
    97-32 - 93.6 - 198.12 24.89 - ffd - 35.864 - rgb(0, 112, 33) - import threading, zipfile
  Cluster 32
    97-33 - 93.6 - 169.62 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class AsyncZip(threading.Thread):
  Cluster 33
    97-34 - 118.08 - 155.38 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def __init__(self, infile, outfile):
  Cluster 34
    97-35 - 142.56 - 141.13 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - threading.Thread.__init__(self)
  Cluster 35
    97-36 - 142.56 - 126.88 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.infile = infile
  Cluster 36
    97-37 - 142.56 - 112.64 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - self.outfile = outfile
  Cluster 37
    97-38 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 38
    97-39 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 11.3. Working with Binary Data Record Layouts 91
Page 98
  Cluster 0
    98-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    98-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    98-3 - 118.08 - 890.54 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def run(self):
  Cluster 3
    98-4 - 142.56 - 876.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)
  Cluster 4
    98-5 - 142.56 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - f.write(self.infile)
    98-5 - 142.56 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - f.close()
  Cluster 5
    98-6 - 142.56 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print('Finished background zip of:', self.infile)
  Cluster 6
    98-7 - 93.6 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - background = AsyncZip('mydata.txt', 'myarchive.zip')
  Cluster 7
    98-8 - 93.6 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - background.start()
  Cluster 8
    98-9 - 93.6 - 776.57 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print('The main program continues to run in foreground.')
  Cluster 9
    98-10 - 93.6 - 748.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - background.join() # Wait for the background task to finish
  Cluster 10
    98-11 - 93.6 - 733.82 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print('Main program waited until background was done.')
  Cluster 11
    98-12 - 93.6 - 703.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The principal challenge of multi-threaded applications is coordinating threads that share data or other
  Cluster 12
    98-13 - 93.6 - 687.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - resources. To that end, the threading module provides a number of synchronization primitives including
  Cluster 13
    98-14 - 93.6 - 672.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - locks, events, condition variables, and semaphores.
  Cluster 14
    98-15 - 93.6 - 650.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - While those tools are powerful, minor design errors can result in problems that are diﬃcult to reproduce.
  Cluster 15
    98-16 - 93.6 - 634.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - So, the preferred approach to task coordination is to concentrate all access to a resource in a single thread
  Cluster 16
    98-17 - 93.6 - 618.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and then use the queue module to feed that thread with requests from other threads. Applications using
  Cluster 17
    98-18 - 93.6 - 603.41 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - Queue objects for inter-thread communication and coordination are easier to design, more readable, and
  Cluster 18
    98-19 - 93.6 - 587.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - more reliable.
  Cluster 19
    98-20 - 93.6 - 538.54 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 11.5 Logging
  Cluster 20
    98-21 - 93.6 - 501.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The logging module oﬀers a full featured and ﬂexible logging system. At its simplest, log messages are sent
  Cluster 21
    98-22 - 93.6 - 486.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to a ﬁle or to sys.stderr:
  Cluster 22
    98-23 - 93.6 - 460.08 24.82 - ffd - 35.864 - rgb(0, 112, 33) - import logging
  Cluster 23
    98-24 - 93.6 - 445.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - logging.debug('Debugging information')
  Cluster 24
    98-25 - 93.6 - 431.6 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - logging.info('Informational message')
  Cluster 25
    98-26 - 93.6 - 417.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - logging.warning('Warning:config file %s not found', 'server.conf')
  Cluster 26
    98-27 - 93.6 - 403.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - logging.error('Error occurred')
    98-27 - 93.6 - 388.86 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - logging.critical('Critical error -- shutting down')
  Cluster 27
    98-28 - 93.6 - 358.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This produces the following output:
  Cluster 28
    98-29 - 93.6 - 332.12 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - WARNING:root:Warning:config file server.conf not found
  Cluster 29
    98-30 - 93.6 - 317.89 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ERROR:root:Error occurred
  Cluster 30
    98-31 - 93.6 - 303.64 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - CRITICAL:root:Critical error -- shutting down
  Cluster 31
    98-32 - 93.6 - 272.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - By default, informational and debugging messages are suppressed and the output is sent to standard er-
  Cluster 32
    98-33 - 93.6 - 257.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ror. Other output options include routing messages through email, datagrams, sockets, or to an HTTP
  Cluster 33
    98-34 - 93.6 - 241.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Server. New ﬁlters can select diﬀerent routing based on message priority: DEBUG, INFO, WARNING, ERROR, and
  Cluster 34
    98-35 - 93.6 - 226.32 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - CRITICAL.
  Cluster 35
    98-36 - 93.6 - 204.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The logging system can be conﬁgured directly from Python or can be loaded from a user editable conﬁguration
  Cluster 36
    98-37 - 93.6 - 188.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁle for customized logging without altering the application.
  Cluster 37
    98-38 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 92 Chapter 11. Brief Tour of the Standard Library — Part II
Page 99
  Cluster 0
    99-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    99-2 - 93.6 - 919.68 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 11.6 Weak References
  Cluster 2
    99-3 - 93.6 - 882.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python does automatic memory management (reference counting for most objects and garbage collection to
  Cluster 3
    99-4 - 93.6 - 866.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - eliminate cycles). The memory is freed shortly after the last reference to it has been eliminated.
  Cluster 4
    99-5 - 93.6 - 844.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This approach works ﬁne for most applications but occasionally there is a need to track objects only as long
  Cluster 5
    99-6 - 93.6 - 829.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as they are being used by something else. Unfortunately, just tracking them creates a reference that makes
  Cluster 6
    99-7 - 93.6 - 813.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - them permanent. The weakref module provides tools for tracking objects without creating a reference.
  Cluster 7
    99-8 - 93.6 - 798.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When the object is no longer needed, it is automatically removed from a weakref table and a callback is
  Cluster 8
    99-9 - 93.6 - 782.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - triggered for weakref objects. Typical applications include caching objects that are expensive to create:
  Cluster 9
    99-10 - 93.6 - 756.6 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> import weakref, gc
  Cluster 10
    99-11 - 93.6 - 742.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> class A:
  Cluster 11
    99-12 - 93.6 - 728.12 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... def __init__(self, value):
  Cluster 12
    99-13 - 93.6 - 713.87 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... self.value = value
  Cluster 13
    99-14 - 93.6 - 699.62 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... def __repr__(self):
  Cluster 14
    99-15 - 93.6 - 685.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... return str(self.value)
  Cluster 15
    99-16 - 93.6 - 671.12 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    99-16 - 93.6 - 656.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a = A(10) # create a reference
  Cluster 16
    99-17 - 93.6 - 642.63 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> d = weakref.WeakValueDictionary()
  Cluster 17
    99-18 - 93.6 - 628.38 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> d['primary'] = a # does not create a reference
  Cluster 18
    99-19 - 93.6 - 614.15 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> d['primary'] # fetch the object if it is still alive
  Cluster 19
    99-20 - 93.6 - 599.9 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 10
  Cluster 20
    99-21 - 93.6 - 585.65 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> del a # remove the one reference
  Cluster 21
    99-22 - 93.6 - 571.4 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> gc.collect() # run garbage collection right away
  Cluster 22
    99-23 - 93.6 - 557.15 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0
    99-23 - 93.6 - 542.91 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> d['primary'] # entry was automatically removed
  Cluster 23
    99-24 - 93.6 - 528.66 24.89 - ff7 - 35.864 - rgb(0, 69, 222) - Traceback (most recent call last):
  Cluster 24
    99-25 - 105.83 - 514.41 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "<stdin>", line 1, in <module>
  Cluster 25
    99-26 - 118.08 - 500.16 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - d['primary'] # entry was automatically removed
  Cluster 26
    99-27 - 105.83 - 485.93 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - File "C:/python37/lib/weakref.py", line 46, in __getitem__
  Cluster 27
    99-28 - 118.08 - 471.68 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - o = self.data[key]()
  Cluster 28
    99-29 - 93.6 - 457.43 24.89 - ff7 - 35.864 - rgb(255, 0, 0) - KeyError: 'primary'
  Cluster 29
    99-30 - 93.6 - 399.43 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 11.7 Tools for Working with Lists
  Cluster 30
    99-31 - 93.6 - 362.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Many data structure needs can be met with the built-in list type. However, sometimes there is a need for
  Cluster 31
    99-32 - 93.6 - 347.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - alternative implementations with diﬀerent performance trade-oﬀs.
  Cluster 32
    99-33 - 93.6 - 325.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The array module provides an array() object that is like a list that stores only homogeneous data and stores
  Cluster 33
    99-34 - 93.6 - 309.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - it more compactly. The following example shows an array of numbers stored as two byte unsigned binary
  Cluster 34
    99-35 - 93.6 - 294.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - numbers (typecode "H") rather than the usual 16 bytes per entry for regular lists of Python int objects:
  Cluster 35
    99-36 - 93.6 - 268.02 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from array import array
  Cluster 36
    99-37 - 93.6 - 253.77 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a = array('H', [4000, 10, 700, 22222])
  Cluster 37
    99-38 - 93.6 - 239.53 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sum(a)
  Cluster 38
    99-39 - 93.6 - 225.28 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 26932
  Cluster 39
    99-40 - 93.6 - 211.03 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> a[1:3]
    99-40 - 93.6 - 196.78 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - array('H', [10, 700])
  Cluster 40
    99-41 - 93.6 - 166.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The collections module provides a deque() object that is like a list with faster appends and pops from
  Cluster 41
    99-42 - 93.6 - 150.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the left side but slower lookups in the middle. These objects are well suited for implementing queues and
  Cluster 42
    99-43 - 93.6 - 135.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - breadth ﬁrst tree searches:
  Cluster 43
    99-44 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 11.6. Weak References 93
Page 100
  Cluster 0
    100-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    100-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from collections import deque
  Cluster 2
    100-3 - 93.6 - 902.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> d = deque(["task1", "task2", "task3"])
  Cluster 3
    100-4 - 93.6 - 887.95 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> d.append("task4")
    100-4 - 93.6 - 873.7 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> print("Handling", d.popleft())
  Cluster 4
    100-5 - 93.6 - 859.46 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Handling task1
  Cluster 5
    100-6 - 93.6 - 824.75 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - unsearched = deque([starting_node])
  Cluster 6
    100-7 - 93.6 - 810.5 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def breadth_first_search(unsearched):
  Cluster 7
    100-8 - 118.08 - 796.25 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - node = unsearched.popleft()
    100-8 - 118.08 - 782.0 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for m in gen_moves(node):
  Cluster 8
    100-9 - 142.56 - 767.77 24.89 - ffd - 35.864 - rgb(0, 112, 33) - if is_goal(m):
  Cluster 9
    100-10 - 142.56 - 739.27 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - unsearched.append(m)

    =====
    100-10 - 167.04 - 753.52 24.89 - ffd - 35.864 - rgb(0, 112, 33) - return m
  Cluster 10
    100-11 - 93.6 - 708.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In addition to alternative list implementations, the library also oﬀers other tools such as the bisect module
  Cluster 11
    100-12 - 93.6 - 693.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with functions for manipulating sorted lists:
  Cluster 12
    100-13 - 93.6 - 667.0 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import bisect
  Cluster 13
    100-14 - 93.6 - 652.76 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]
  Cluster 14
    100-15 - 93.6 - 638.51 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> bisect.insort(scores, (300, 'ruby'))
  Cluster 15
    100-16 - 93.6 - 624.26 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> scores
    100-16 - 93.6 - 610.01 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]
  Cluster 16
    100-17 - 93.6 - 579.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The heapq module provides functions for implementing heaps based on regular lists. The lowest valued entry
  Cluster 17
    100-18 - 93.6 - 563.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is always kept at position zero. This is useful for applications which repeatedly access the smallest element
  Cluster 18
    100-19 - 93.6 - 548.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - but do not want to run a full list sort:
  Cluster 19
    100-20 - 93.6 - 522.2 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from heapq import heapify, heappop, heappush
  Cluster 20
    100-21 - 93.6 - 507.95 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
  Cluster 21
    100-22 - 93.6 - 493.71 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> heapify(data) # rearrange the list into heap order
  Cluster 22
    100-23 - 93.6 - 479.47 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> heappush(data, -5) # add a new entry
    100-23 - 93.6 - 465.22 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> [heappop(data) for i in range(3)] # fetch the three smallest entries
    100-23 - 93.6 - 450.97 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - [-5, 0, 1]
  Cluster 23
    100-24 - 93.6 - 392.96 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 11.8 Decimal Floating Point Arithmetic
  Cluster 24
    100-25 - 93.6 - 356.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The decimal module oﬀers a Decimal datatype for decimal ﬂoating point arithmetic. Compared to the
  Cluster 25
    100-26 - 93.6 - 340.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - built-in float implementation of binary ﬂoating point, the class is especially helpful for
  Cluster 26
    100-27 - 109.42 - 318.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • ﬁnancial applications and other uses which require exact decimal representation,
  Cluster 27
    100-28 - 109.42 - 296.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • control over precision,
  Cluster 28
    100-29 - 109.42 - 274.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • control over rounding to meet legal or regulatory requirements,
  Cluster 29
    100-30 - 109.42 - 252.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • tracking of signiﬁcant decimal places, or
  Cluster 30
    100-31 - 109.42 - 230.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • applications where the user expects the results to match calculations done by hand.
  Cluster 31
    100-32 - 93.6 - 208.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For example, calculating a 5% tax on a 70 cent phone charge gives diﬀerent results in decimal ﬂoating point
  Cluster 32
    100-33 - 93.6 - 193.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and binary ﬂoating point. The diﬀerence becomes signiﬁcant if the results are rounded to the nearest cent:
  Cluster 33
    100-34 - 93.6 - 167.01 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from decimal import *
  Cluster 34
    100-35 - 93.6 - 152.76 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> round(Decimal('0.70') * Decimal('1.05'), 2)
  Cluster 35
    100-36 - 93.6 - 138.51 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Decimal('0.74')
  Cluster 36
    100-37 - 93.6 - 124.27 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> round(.70 * 1.05, 2)
    100-37 - 93.6 - 110.02 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0.73
  Cluster 37
    100-38 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 94 Chapter 11. Brief Tour of the Standard Library — Part II
Page 101
  Cluster 0
    101-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    101-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The Decimal result keeps a trailing zero, automatically inferring four place signiﬁcance from multiplicands
  Cluster 2
    101-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with two place signiﬁcance. Decimal reproduces mathematics as done by hand and avoids issues that can
  Cluster 3
    101-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - arise when binary ﬂoating point cannot exactly represent decimal quantities.
  Cluster 4
    101-5 - 93.6 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Exact representation enables the Decimal class to perform modulo calculations and equality tests that are
  Cluster 5
    101-6 - 93.6 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - unsuitable for binary ﬂoating point:
  Cluster 6
    101-7 - 93.6 - 828.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> Decimal('1.00') % Decimal('.10')
  Cluster 7
    101-8 - 93.6 - 814.12 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Decimal('0.00')
    101-8 - 93.6 - 799.88 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 1.00 % 0.10
  Cluster 8
    101-9 - 93.6 - 785.63 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0.09999999999999995
  Cluster 9
    101-10 - 93.6 - 757.15 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sum([Decimal('0.1')]*10) == Decimal('1.0')
  Cluster 10
    101-11 - 93.6 - 742.9 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - True
  Cluster 11
    101-12 - 93.6 - 728.65 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sum([0.1]*10) == 1.0
  Cluster 12
    101-13 - 93.6 - 714.4 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - False
  Cluster 13
    101-14 - 93.6 - 683.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The decimal module provides arithmetic with as much precision as needed:
  Cluster 14
    101-15 - 93.6 - 657.67 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> getcontext().prec = 36
  Cluster 15
    101-16 - 93.6 - 643.42 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> Decimal(1) / Decimal(7)
  Cluster 16
    101-17 - 93.6 - 629.19 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Decimal('0.142857142857142857142857142857142857')
  Cluster 17
    101-18 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 11.8. Decimal Floating Point Arithmetic 95
Page 102
  Cluster 0
    102-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    102-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 96 Chapter 11. Brief Tour of the Standard Library — Part II
Page 103
  Cluster 0
    103-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    103-2 - 622.78 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - TWELVE
  Cluster 2
    103-3 - 291.38 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - VIRTUAL ENVIRONMENTS AND PACKAGES
  Cluster 3
    103-4 - 93.6 - 721.01 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 12.1 Introduction
  Cluster 4
    103-5 - 93.6 - 684.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python applications will often use packages and modules that don’t come as part of the standard library.
  Cluster 5
    103-6 - 93.6 - 668.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Applications will sometimes need a speciﬁc version of a library, because the application may require that a
  Cluster 6
    103-7 - 93.6 - 653.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - particular bug has been ﬁxed or the application may be written using an obsolete version of the library’s
  Cluster 7
    103-8 - 93.6 - 637.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - interface.
  Cluster 8
    103-9 - 93.6 - 615.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This means it may not be possible for one Python installation to meet the requirements of every application.
  Cluster 9
    103-10 - 93.6 - 600.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If application A needs version 1.0 of a particular module but application B needs version 2.0, then the
  Cluster 10
    103-11 - 93.6 - 584.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - requirements are in conﬂict and installing either version 1.0 or 2.0 will leave one application unable to run.
  Cluster 11
    103-12 - 93.6 - 562.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The solution for this problem is to create a virtual environment, a self-contained directory tree that contains
  Cluster 12
    103-13 - 93.6 - 546.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a Python installation for a particular version of Python, plus a number of additional packages.
  Cluster 13
    103-14 - 93.6 - 524.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Diﬀerent applications can then use diﬀerent virtual environments. To resolve the earlier example of conﬂicting
  Cluster 14
    103-15 - 93.6 - 509.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - requirements, application A can have its own virtual environment with version 1.0 installed while application
  Cluster 15
    103-16 - 93.6 - 493.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - B has another virtual environment with version 2.0. If application B requires a library be upgraded to version
  Cluster 16
    103-17 - 93.6 - 478.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 3.0, this will not aﬀect application A’s environment.
  Cluster 17
    103-18 - 93.6 - 429.01 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 12.2 Creating Virtual Environments
  Cluster 18
    103-19 - 93.6 - 392.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The module used to create and manage virtual environments is called venv. venv will usually install the
  Cluster 19
    103-20 - 93.6 - 376.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - most recent version of Python that you have available. If you have multiple versions of Python on your
  Cluster 20
    103-21 - 93.6 - 361.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - system, you can select a speciﬁc Python version by running python3 or whichever version you want.
  Cluster 21
    103-22 - 93.6 - 339.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - To create a virtual environment, decide upon a directory where you want to place it, and run the venv
  Cluster 22
    103-23 - 93.6 - 323.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module as a script with the directory path:
  Cluster 23
    103-24 - 93.6 - 297.75 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - python3 -m venv tutorial-env
  Cluster 24
    103-25 - 93.6 - 267.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This will create the tutorial-env directory if it doesn’t exist, and also create directories inside it containing
  Cluster 25
    103-26 - 93.6 - 251.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a copy of the Python interpreter, the standard library, and various supporting ﬁles.
  Cluster 26
    103-27 - 93.6 - 229.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Once you’ve created a virtual environment, you may activate it.
  Cluster 27
    103-28 - 93.6 - 207.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - On Windows, run:
  Cluster 28
    103-29 - 93.6 - 181.45 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - tutorial-env\Scripts\activate.bat
  Cluster 29
    103-30 - 93.6 - 150.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - On Unix or MacOS, run:
  Cluster 30
    103-31 - 93.6 - 124.72 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - source tutorial-env/bin/activate
  Cluster 31
    103-32 - 687.75 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 97
Page 104
  Cluster 0
    104-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    104-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (This script is written for the bash shell. If you use the csh or fish shells, there are alternate activate.csh
  Cluster 2
    104-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and activate.fish scripts you should use instead.)
  Cluster 3
    104-4 - 93.6 - 885.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Activating the virtual environment will change your shell’s prompt to show what virtual environment you’re
  Cluster 4
    104-5 - 93.6 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - using, and modify the environment so that running python will get you that particular version and instal-
  Cluster 5
    104-6 - 93.6 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - lation of Python. For example:
  Cluster 6
    104-7 - 93.6 - 828.37 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - $ source ~/envs/tutorial-env/bin/activate
  Cluster 7
    104-8 - 93.6 - 814.12 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - (tutorial-env) $ python
    104-8 - 93.6 - 799.88 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Python 3.5.1 (default, May 6 2016, 10:59:36)
  Cluster 8
    104-9 - 105.83 - 785.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ...
  Cluster 9
    104-10 - 93.6 - 771.38 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - >>> import sys
  Cluster 10
    104-11 - 93.6 - 757.15 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - >>> sys.path
  Cluster 11
    104-12 - 93.6 - 742.9 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - ['', '/usr/local/lib/python35.zip', ...,
  Cluster 12
    104-13 - 93.6 - 728.65 24.89 - ff7 - 35.864 - rgb(64, 112, 161) - '~/envs/tutorial-env/lib/python3.5/site-packages']
  Cluster 13
    104-14 - 93.6 - 714.4 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - >>>
  Cluster 14
    104-15 - 93.6 - 656.4 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 12.3 Managing Packages with pip
  Cluster 15
    104-16 - 93.6 - 619.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - You can install, upgrade, and remove packages using a program called pip. By default pip will install
  Cluster 16
    104-17 - 93.6 - 604.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - packages from the Python Package Index, <https://pypi.org>. You can browse the Python Package Index
  Cluster 17
    104-18 - 93.6 - 588.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - by going to it in your web browser, or you can use pip’s limited search feature:
  Cluster 18
    104-19 - 93.6 - 562.55 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - (tutorial-env) $ pip search astronomy
  Cluster 19
    104-20 - 93.6 - 548.3 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - skyfield - Elegant astronomy for Python
  Cluster 20
    104-21 - 93.6 - 534.05 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - gary - Galactic astronomy and gravitational dynamics.
    104-21 - 93.6 - 519.8 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - novas - The United States Naval Observatory NOVAS astronomy library
  Cluster 21
    104-22 - 93.6 - 505.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - astroobs - Provides astronomy ephemeris to plan telescope observations
  Cluster 22
    104-23 - 93.6 - 491.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - PyAstronomy - A collection of astronomy related tools for Python.
  Cluster 23
    104-24 - 93.6 - 477.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ...
  Cluster 24
    104-25 - 93.6 - 446.37 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - pip has a number of subcommands: “search”, “install”, “uninstall”, “freeze”, etc. (Consult the installing-
  Cluster 25
    104-26 - 93.6 - 430.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - index guide for complete documentation for pip.)
  Cluster 26
    104-27 - 93.6 - 408.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - You can install the latest version of a package by specifying a package’s name:
  Cluster 27
    104-28 - 93.6 - 382.79 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - (tutorial-env) $ pip install novas
  Cluster 28
    104-29 - 93.6 - 368.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Collecting novas
  Cluster 29
    104-30 - 93.6 - 340.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Installing collected packages: novas
    104-30 - 93.6 - 311.55 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Successfully installed novas-3.1.1.3

    =====
    104-30 - 105.83 - 354.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Downloading novas-3.1.1.3.tar.gz (136kB)
    104-30 - 105.83 - 325.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Running setup.py install for novas
  Cluster 30
    104-31 - 93.6 - 280.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - You can also install a speciﬁc version of a package by giving the package name followed by == and the version
  Cluster 31
    104-32 - 93.6 - 265.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - number:
  Cluster 32
    104-33 - 93.6 - 239.28 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - (tutorial-env) $ pip install requests==2.6.0
  Cluster 33
    104-34 - 93.6 - 225.03 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Collecting requests==2.6.0

    =====
    104-34 - 105.83 - 210.78 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Using cached requests-2.6.0-py2.py3-none-any.whl
  Cluster 34
    104-35 - 93.6 - 196.55 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Installing collected packages: requests
  Cluster 35
    104-36 - 93.6 - 182.3 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Successfully installed requests-2.6.0
  Cluster 36
    104-37 - 93.6 - 151.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you re-run this command, pip will notice that the requested version is already installed and do nothing.
  Cluster 37
    104-38 - 93.6 - 136.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - You can supply a diﬀerent version number to get that version, or you can run pip install --upgrade to
  Cluster 38
    104-39 - 93.6 - 120.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - upgrade the package to the latest version:
  Cluster 39
    104-40 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 98 Chapter 12. Virtual Environments and Packages
Page 105
  Cluster 0
    105-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    105-2 - 93.6 - 916.45 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - (tutorial-env) $ pip install --upgrade requests
  Cluster 2
    105-3 - 93.6 - 902.2 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Collecting requests
  Cluster 3
    105-4 - 93.6 - 887.95 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Installing collected packages: requests

    =====
    105-4 - 105.83 - 873.7 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Found existing installation: requests 2.6.0
  Cluster 4
    105-5 - 118.08 - 859.46 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Uninstalling requests-2.6.0:
  Cluster 5
    105-6 - 130.31 - 845.21 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Successfully uninstalled requests-2.6.0
  Cluster 6
    105-7 - 93.6 - 830.96 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Successfully installed requests-2.7.0
  Cluster 7
    105-8 - 93.6 - 800.27 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - pip uninstall followed by one or more package names will remove the packages from the virtual environ-
  Cluster 8
    105-9 - 93.6 - 784.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ment.
  Cluster 9
    105-10 - 93.6 - 762.71 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - pip show will display information about a particular package:
  Cluster 10
    105-11 - 93.6 - 736.68 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - (tutorial-env) $ pip show requests
  Cluster 11
    105-12 - 93.6 - 722.44 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ---
  Cluster 12
    105-13 - 93.6 - 708.19 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Metadata-Version: 2.0
  Cluster 13
    105-14 - 93.6 - 693.94 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Name: requests
  Cluster 14
    105-15 - 93.6 - 679.69 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Version: 2.7.0
    105-15 - 93.6 - 665.44 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Summary: Python HTTP for Humans.
  Cluster 15
    105-16 - 93.6 - 651.2 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Home-page: http://python-requests.org
  Cluster 16
    105-17 - 93.6 - 636.95 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Author: Kenneth Reitz
  Cluster 17
    105-18 - 93.6 - 622.7 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Author-email: me@kennethreitz.com
  Cluster 18
    105-19 - 93.6 - 608.45 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - License: Apache 2.0
  Cluster 19
    105-20 - 93.6 - 594.22 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Location: /Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages
  Cluster 20
    105-21 - 93.6 - 579.97 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Requires:
  Cluster 21
    105-22 - 93.6 - 549.28 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - pip list will display all of the packages installed in the virtual environment:
  Cluster 22
    105-23 - 93.6 - 523.24 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - (tutorial-env) $ pip list
  Cluster 23
    105-24 - 93.6 - 508.99 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - novas (3.1.1.3)
    105-24 - 93.6 - 494.74 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - numpy (1.9.2)
    105-24 - 93.6 - 480.49 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - pip (7.0.3)
  Cluster 24
    105-25 - 93.6 - 466.26 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - requests (2.7.0)
  Cluster 25
    105-26 - 93.6 - 452.01 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - setuptools (16.0)
  Cluster 26
    105-27 - 93.6 - 421.3 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - pip freeze will produce a similar list of the installed packages, but the output uses the format that pip
  Cluster 27
    105-28 - 93.6 - 405.77 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - install expects. A common convention is to put this list in a requirements.txt ﬁle:
  Cluster 28
    105-29 - 93.6 - 379.73 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - (tutorial-env) $ pip freeze > requirements.txt
  Cluster 29
    105-30 - 93.6 - 365.5 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - (tutorial-env) $ cat requirements.txt
  Cluster 30
    105-31 - 93.6 - 351.25 24.89 - ff7 - 35.864 - rgb(186, 97, 214) - novas==3.1.1.3
    105-31 - 93.6 - 337.0 24.89 - ff7 - 35.864 - rgb(186, 97, 214) - numpy==1.9.2
  Cluster 31
    105-32 - 93.6 - 322.75 24.89 - ff7 - 35.864 - rgb(186, 97, 214) - requests==2.7.0
  Cluster 32
    105-33 - 93.6 - 292.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The requirements.txt can then be committed to version control and shipped as part of an application.
  Cluster 33
    105-34 - 93.6 - 276.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Users can then install all the necessary packages with install -r:
  Cluster 34
    105-35 - 93.6 - 250.48 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - (tutorial-env) $ pip install -r requirements.txt
  Cluster 35
    105-36 - 93.6 - 236.24 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Collecting novas==3.1.1.3 (from -r requirements.txt (line 1))
  Cluster 36
    105-37 - 93.6 - 207.74 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Collecting numpy==1.9.2 (from -r requirements.txt (line 2))

    =====
    105-37 - 105.83 - 221.99 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ...
  Cluster 37
    105-38 - 105.83 - 193.49 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ...
  Cluster 38
    105-39 - 93.6 - 179.24 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Collecting requests==2.7.0 (from -r requirements.txt (line 3))

    =====
    105-39 - 105.83 - 165.0 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ...
  Cluster 39
    105-40 - 93.6 - 150.76 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Installing collected packages: novas, numpy, requests
  Cluster 40
    105-41 - 105.83 - 136.51 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Running setup.py install for novas
  Cluster 41
    105-42 - 93.6 - 122.27 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Successfully installed novas-3.1.1.3 numpy-1.9.2 requests-2.7.0
  Cluster 42
    105-43 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 12.3. Managing Packages with pip 99
Page 106
  Cluster 0
    106-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    106-2 - 93.6 - 923.05 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - pip has many more options. Consult the installing-index guide for complete documentation for pip. When
  Cluster 2
    106-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - you’ve written a package and want to make it available on the Python Package Index, consult the distributing-
  Cluster 3
    106-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - index guide.
  Cluster 4
    106-5 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 100 Chapter 12. Virtual Environments and Packages
Page 107
  Cluster 0
    107-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    107-2 - 601.81 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - THIRTEEN
  Cluster 2
    107-3 - 577.25 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - WHAT NOW?
  Cluster 3
    107-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Reading this tutorial has probably reinforced your interest in using Python — you should be eager to apply
  Cluster 4
    107-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python to solving your real-world problems. Where should you go to learn more?
  Cluster 5
    107-6 - 93.6 - 691.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This tutorial is part of Python’s documentation set. Some other documents in the set are:
  Cluster 6
    107-7 - 109.42 - 669.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • library-index:
  Cluster 7
    107-8 - 125.98 - 647.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - You should browse through this manual, which gives complete (though terse) reference material about
  Cluster 8
    107-9 - 125.98 - 631.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - types, functions, and the modules in the standard library. The standard Python distribution includes
  Cluster 9
    107-10 - 125.98 - 616.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a lot of additional code. There are modules to read Unix mailboxes, retrieve documents via HTTP,
  Cluster 10
    107-11 - 125.98 - 600.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - generate random numbers, parse command-line options, write CGI programs, compress data, and many
  Cluster 11
    107-12 - 125.98 - 585.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - other tasks. Skimming through the Library Reference will give you an idea of what’s available.
  Cluster 12
    107-13 - 109.42 - 563.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • installing-index explains how to install additional modules written by other Python users.
  Cluster 13
    107-14 - 109.42 - 540.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • reference-index: A detailed explanation of Python’s syntax and semantics. It’s heavy reading, but is
  Cluster 14
    107-15 - 125.98 - 525.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - useful as a complete guide to the language itself.
  Cluster 15
    107-16 - 93.6 - 503.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - More Python resources:
  Cluster 16
    107-17 - 109.42 - 481.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • https://www.python.org: The major Python Web site. It contains code, documentation, and pointers
  Cluster 17
    107-18 - 125.98 - 465.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to Python-related pages around the Web. This Web site is mirrored in various places around the world,
  Cluster 18
    107-19 - 125.98 - 450.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - such as Europe, Japan, and Australia; a mirror may be faster than the main site, depending on your
  Cluster 19
    107-20 - 125.98 - 434.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - geographical location.
  Cluster 20
    107-21 - 109.42 - 412.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • https://docs.python.org: Fast access to Python’s documentation.
  Cluster 21
    107-22 - 109.42 - 390.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • https://pypi.org: The Python Package Index, previously also nicknamed the Cheese Shop, is an index
  Cluster 22
    107-23 - 125.98 - 375.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of user-created Python modules that are available for download. Once you begin releasing code, you
  Cluster 23
    107-24 - 125.98 - 359.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can register it here so that others can ﬁnd it.
  Cluster 24
    107-25 - 109.42 - 337.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • https://code.activestate.com/recipes/langs/python/: The Python Cookbook is a sizable collection of
  Cluster 25
    107-26 - 125.98 - 322.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - code examples, larger modules, and useful scripts. Particularly notable contributions are collected in
  Cluster 26
    107-27 - 125.98 - 306.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a book also titled Python Cookbook (O’Reilly & Associates, ISBN 0-596-00797-3.)
  Cluster 27
    107-28 - 109.42 - 284.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • http://www.pyvideo.org collects links to Python-related videos from conferences and user-group meet-
  Cluster 28
    107-29 - 125.98 - 269.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ings.
  Cluster 29
    107-30 - 109.42 - 246.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • https://scipy.org: The Scientiﬁc Python project includes modules for fast array computations and
  Cluster 30
    107-31 - 125.98 - 231.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - manipulations plus a host of packages for such things as linear algebra, Fourier transforms, non-linear
  Cluster 31
    107-32 - 125.98 - 215.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - solvers, random number distributions, statistical analysis and the like.
  Cluster 32
    107-33 - 93.6 - 193.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For Python-related questions and problem reports, you can post to the newsgroup comp.lang.python, or
  Cluster 33
    107-34 - 93.6 - 178.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - send them to the mailing list at python-list@python.org. The newsgroup and mailing list are gatewayed,
  Cluster 34
    107-35 - 93.6 - 162.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - so messages posted to one will automatically be forwarded to the other. There are hundreds of postings a
  Cluster 35
    107-36 - 93.6 - 147.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - day, asking (and answering) questions, suggesting new features, and announcing new modules. Mailing list
  Cluster 36
    107-37 - 93.6 - 131.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - archives are available at https://mail.python.org/pipermail/.
  Cluster 37
    107-38 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 101
Page 108
  Cluster 0
    108-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    108-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Before posting, be sure to check the list of Frequently Asked Questions (also called the FAQ). The FAQ
  Cluster 2
    108-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - answers many of the questions that come up again and again, and may already contain the solution for your
  Cluster 3
    108-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - problem.
  Cluster 4
    108-5 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 102 Chapter 13. What Now?
Page 109
  Cluster 0
    109-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    109-2 - 596.6 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - FOURTEEN
  Cluster 2
    109-3 - 114.2 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - INTERACTIVE INPUT EDITING AND HISTORY SUBSTITUTION
  Cluster 3
    109-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Some versions of the Python interpreter support editing of the current input line and history substitution,
  Cluster 4
    109-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - similar to facilities found in the Korn shell and the GNU Bash shell. This is implemented using the GNU
  Cluster 5
    109-6 - 93.6 - 697.7 29.89 - ff4 - 39.852 - rgb(55, 112, 99) - Readline library, which supports various styles of editing. This library has its own documentation which we
  Cluster 6
    109-7 - 93.6 - 682.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - won’t duplicate here.
  Cluster 7
    109-8 - 93.6 - 632.83 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 14.1 Tab Completion and History Editing
  Cluster 8
    109-9 - 93.6 - 596.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Completion of variable and module names is automatically enabled at interpreter startup so that the Tab
  Cluster 9
    109-10 - 93.6 - 580.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - key invokes the completion function; it looks at Python statement names, the current local variables, and
  Cluster 10
    109-11 - 93.6 - 565.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the available module names. For dotted expressions such as string.a, it will evaluate the expression up to
  Cluster 11
    109-12 - 93.6 - 549.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the ﬁnal '.' and then suggest completions from the attributes of the resulting object. Note that this may
  Cluster 12
    109-13 - 93.6 - 533.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - execute application-deﬁned code if an object with a __getattr__() method is part of the expression. The
  Cluster 13
    109-14 - 93.6 - 518.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - default conﬁguration also saves your history into a ﬁle named .python_history in your user directory. The
  Cluster 14
    109-15 - 93.6 - 502.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - history will be available again during the next interactive interpreter session.
  Cluster 15
    109-16 - 93.6 - 453.52 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 14.2 Alternatives to the Interactive Interpreter
  Cluster 16
    109-17 - 93.6 - 416.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This facility is an enormous step forward compared to earlier versions of the interpreter; however, some
  Cluster 17
    109-18 - 93.6 - 401.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - wishes are left: It would be nice if the proper indentation were suggested on continuation lines (the parser
  Cluster 18
    109-19 - 93.6 - 385.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - knows if an indent token is required next). The completion mechanism might use the interpreter’s symbol
  Cluster 19
    109-20 - 93.6 - 370.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - table. A command to check (or even suggest) matching parentheses, quotes, etc., would also be useful.
  Cluster 20
    109-21 - 93.6 - 348.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - One alternative enhanced interactive interpreter that has been around for quite some time is IPython, which
  Cluster 21
    109-22 - 93.6 - 332.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - features tab completion, object exploration and advanced history management. It can also be thoroughly
  Cluster 22
    109-23 - 93.6 - 317.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - customized and embedded into other applications. Another similar enhanced interactive environment is
  Cluster 23
    109-24 - 93.6 - 301.51 29.89 - ff4 - 39.852 - rgb(55, 112, 99) - bpython.
  Cluster 24
    109-25 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 103
Page 110
  Cluster 0
    110-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    110-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 104 Chapter 14. Interactive Input Editing and History Substitution
Page 111
  Cluster 0
    111-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    111-2 - 620.61 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - FIFTEEN
  Cluster 2
    111-3 - 142.56 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - FLOATING POINT ARITHMETIC: ISSUES AND LIMITATIONS
  Cluster 3
    111-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Floating-point numbers are represented in computer hardware as base 2 (binary) fractions. For example,
  Cluster 4
    111-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the decimal fraction
  Cluster 5
    111-6 - 93.6 - 687.21 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 0.125
  Cluster 6
    111-7 - 93.6 - 656.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - has value 1/10 + 2/100 + 5/1000, and in the same way the binary fraction
  Cluster 7
    111-8 - 93.6 - 630.47 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 0.001
  Cluster 8
    111-9 - 93.6 - 599.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - has value 0/2 + 0/4 + 1/8. These two fractions have identical values, the only real diﬀerence being that the
  Cluster 9
    111-10 - 93.6 - 584.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁrst is written in base 10 fractional notation, and the second in base 2.
  Cluster 10
    111-11 - 93.6 - 562.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Unfortunately, most decimal fractions cannot be represented exactly as binary fractions. A consequence is
  Cluster 11
    111-12 - 93.6 - 546.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that, in general, the decimal ﬂoating-point numbers you enter are only approximated by the binary ﬂoating-
  Cluster 12
    111-13 - 93.6 - 531.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - point numbers actually stored in the machine.
  Cluster 13
    111-14 - 93.6 - 509.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The problem is easier to understand at ﬁrst in base 10. Consider the fraction 1/3. You can approximate
  Cluster 14
    111-15 - 93.6 - 493.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that as a base 10 fraction:
  Cluster 15
    111-16 - 93.6 - 467.55 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 0.3
  Cluster 16
    111-17 - 93.6 - 436.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - or, better,
  Cluster 17
    111-18 - 93.6 - 410.83 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 0.33
  Cluster 18
    111-19 - 93.6 - 380.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - or, better,
  Cluster 19
    111-20 - 93.6 - 354.09 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 0.333
  Cluster 20
    111-21 - 93.6 - 323.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and so on. No matter how many digits you’re willing to write down, the result will never be exactly 1/3,
  Cluster 21
    111-22 - 93.6 - 307.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - but will be an increasingly better approximation of 1/3.
  Cluster 22
    111-23 - 93.6 - 285.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In the same way, no matter how many base 2 digits you’re willing to use, the decimal value 0.1 cannot be
  Cluster 23
    111-24 - 93.6 - 270.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - represented exactly as a base 2 fraction. In base 2, 1/10 is the inﬁnitely repeating fraction
  Cluster 24
    111-25 - 93.6 - 244.27 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 0.0001100110011001100110011001100110011001100110011...
  Cluster 25
    111-26 - 93.6 - 213.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Stop at any ﬁnite number of bits, and you get an approximation. On most machines today, ﬂoats are
  Cluster 26
    111-27 - 93.6 - 198.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - approximated using a binary fraction with the numerator using the ﬁrst 53 bits starting with the most
  Cluster 27
    111-28 - 93.6 - 182.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - signiﬁcant bit and with the denominator as a power of two. In the case of 1/10, the binary fraction is
  Cluster 28
    111-29 - 93.6 - 166.95 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - 3602879701896397 / 2 ** 55 which is close to but not exactly equal to the true value of 1/10.
  Cluster 29
    111-30 - 93.6 - 144.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Many users are not aware of the approximation because of the way values are displayed. Python only prints
  Cluster 30
    111-31 - 93.6 - 129.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a decimal approximation to the true decimal value of the binary approximation stored by the machine. On
  Cluster 31
    111-32 - 93.6 - 113.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - most machines, if Python were to print the true decimal value of the binary approximation stored for 0.1, it
  Cluster 32
    111-33 - 93.6 - 98.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - would have to display
  Cluster 33
    111-34 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 105
Page 112
  Cluster 0
    112-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    112-2 - 93.6 - 916.45 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 0.1
  Cluster 2
    112-3 - 93.6 - 902.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0.1000000000000000055511151231257827021181583404541015625
  Cluster 3
    112-4 - 93.6 - 871.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - That is more digits than most people ﬁnd useful, so Python keeps the number of digits manageable by
  Cluster 4
    112-5 - 93.6 - 855.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - displaying a rounded value instead
  Cluster 5
    112-6 - 93.6 - 829.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 1 / 10
  Cluster 6
    112-7 - 93.6 - 815.68 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 0.1
  Cluster 7
    112-8 - 93.6 - 784.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Just remember, even though the printed result looks like the exact value of 1/10, the actual stored value is
  Cluster 8
    112-9 - 93.6 - 769.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the nearest representable binary fraction.
  Cluster 9
    112-10 - 93.6 - 747.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Interestingly, there are many diﬀerent decimal numbers that share the same nearest ap-
  Cluster 10
    112-11 - 93.6 - 731.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - proximate binary fraction. For example, the numbers 0.1 and 0.10000000000000001 and
  Cluster 11
    112-12 - 93.6 - 716.34 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - 0.1000000000000000055511151231257827021181583404541015625 are all approximated by
  Cluster 12
    112-13 - 93.6 - 700.8 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - 3602879701896397 / 2 ** 55. Since all of these decimal values share the same approximation,
  Cluster 13
    112-14 - 93.6 - 685.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - any one of them could be displayed while still preserving the invariant eval(repr(x)) == x.
  Cluster 14
    112-15 - 93.6 - 663.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Historically, the Python prompt and built-in repr() function would choose the one with 17 signiﬁcant
  Cluster 15
    112-16 - 93.6 - 647.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - digits, 0.10000000000000001. Starting with Python 3.1, Python (on most systems) is now able to choose
  Cluster 16
    112-17 - 93.6 - 632.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the shortest of these and simply display 0.1.
  Cluster 17
    112-18 - 93.6 - 610.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that this is in the very nature of binary ﬂoating-point: this is not a bug in Python, and it is not a
  Cluster 18
    112-19 - 93.6 - 594.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - bug in your code either. You’ll see the same kind of thing in all languages that support your hardware’s
  Cluster 19
    112-20 - 93.6 - 579.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬂoating-point arithmetic (although some languages may not display the diﬀerence by default, or in all output
  Cluster 20
    112-21 - 93.6 - 563.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - modes).
  Cluster 21
    112-22 - 93.6 - 541.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For more pleasant output, you may wish to use string formatting to produce a limited number of signiﬁcant
  Cluster 22
    112-23 - 93.6 - 525.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - digits:
  Cluster 23
    112-24 - 93.6 - 499.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> format(math.pi, '.12g') # give 12 significant digits
  Cluster 24
    112-25 - 93.6 - 485.68 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '3.14159265359'
  Cluster 25
    112-26 - 93.6 - 457.18 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> format(math.pi, '.2f') # give 2 digits after the point
  Cluster 26
    112-27 - 93.6 - 442.94 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '3.14'
  Cluster 27
    112-28 - 93.6 - 414.44 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> repr(math.pi)
  Cluster 28
    112-29 - 93.6 - 400.2 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '3.141592653589793'
  Cluster 29
    112-30 - 93.6 - 369.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It’s important to realize that this is, in a real sense, an illusion: you’re simply rounding the display of the
  Cluster 30
    112-31 - 93.6 - 353.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - true machine value.
  Cluster 31
    112-32 - 93.6 - 331.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - One illusion may beget another. For example, since 0.1 is not exactly 1/10, summing three values of 0.1 may
  Cluster 32
    112-33 - 93.6 - 316.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - not yield exactly 0.3, either:
  Cluster 33
    112-34 - 93.6 - 290.37 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> .1 + .1 + .1 == .3
  Cluster 34
    112-35 - 93.6 - 276.12 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - False
  Cluster 35
    112-36 - 93.6 - 245.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Also, since the 0.1 cannot get any closer to the exact value of 1/10 and 0.3 cannot get any closer to the exact
  Cluster 36
    112-37 - 93.6 - 229.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - value of 3/10, then pre-rounding with round() function cannot help:
  Cluster 37
    112-38 - 93.6 - 203.85 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> round(.1, 1) + round(.1, 1) + round(.1, 1) == round(.3, 1)
  Cluster 38
    112-39 - 93.6 - 189.6 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - False
  Cluster 39
    112-40 - 93.6 - 158.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Though the numbers cannot be made closer to their intended exact values, the round() function can be
  Cluster 40
    112-41 - 93.6 - 143.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - useful for post-rounding so that results with inexact values become comparable to one another:
  Cluster 41
    112-42 - 93.6 - 117.34 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> round(.1 + .1 + .1, 10) == round(.3, 10)
  Cluster 42
    112-43 - 93.6 - 103.09 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - True
  Cluster 43
    112-44 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 106 Chapter 15. Floating Point Arithmetic: Issues and Limitations
Page 113
  Cluster 0
    113-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    113-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Binary ﬂoating-point arithmetic holds many surprises like this. The problem with “0.1” is explained in
  Cluster 2
    113-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - precise detail below, in the “Representation Error” section. See The Perils of Floating Point for a more
  Cluster 3
    113-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - complete account of other common surprises.
  Cluster 4
    113-5 - 93.6 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - As that says near the end, “there are no easy answers.” Still, don’t be unduly wary of ﬂoating-point! The
  Cluster 5
    113-6 - 93.6 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - errors in Python ﬂoat operations are inherited from the ﬂoating-point hardware, and on most machines are
  Cluster 6
    113-7 - 93.6 - 838.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - on the order of no more than 1 part in 2**53 per operation. That’s more than adequate for most tasks, but
  Cluster 7
    113-8 - 93.6 - 823.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - you do need to keep in mind that it’s not decimal arithmetic and that every ﬂoat operation can suﬀer a new
  Cluster 8
    113-9 - 93.6 - 807.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - rounding error.
  Cluster 9
    113-10 - 93.6 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - While pathological cases do exist, for most casual use of ﬂoating-point arithmetic you’ll see the result you
  Cluster 10
    113-11 - 93.6 - 770.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - expect in the end if you simply round the display of your ﬁnal results to the number of decimal digits you
  Cluster 11
    113-12 - 93.6 - 754.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - expect. str() usually suﬃces, and for ﬁner control see the str.format() method’s format speciﬁers in
  Cluster 12
    113-13 - 93.6 - 739.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - formatstrings.
  Cluster 13
    113-14 - 93.6 - 717.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For use cases which require exact decimal representation, try using the decimal module which implements
  Cluster 14
    113-15 - 93.6 - 701.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - decimal arithmetic suitable for accounting applications and high-precision applications.
  Cluster 15
    113-16 - 93.6 - 679.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Another form of exact arithmetic is supported by the fractions module which implements arithmetic based
  Cluster 16
    113-17 - 93.6 - 664.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - on rational numbers (so the numbers like 1/3 can be represented exactly).
  Cluster 17
    113-18 - 93.6 - 642.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you are a heavy user of ﬂoating point operations you should take a look at the Numerical Python package
  Cluster 18
    113-19 - 93.6 - 626.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and many other packages for mathematical and statistical operations supplied by the SciPy project. See
  Cluster 19
    113-20 - 93.6 - 610.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - <https://scipy.org>.
  Cluster 20
    113-21 - 93.6 - 588.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python provides tools that may help on those rare occasions when you really do want to know the exact
  Cluster 21
    113-22 - 93.6 - 573.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - value of a ﬂoat. The float.as_integer_ratio() method expresses the value of a ﬂoat as a fraction:
  Cluster 22
    113-23 - 93.6 - 547.33 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x = 3.14159
  Cluster 23
    113-24 - 93.6 - 533.08 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x.as_integer_ratio()
  Cluster 24
    113-25 - 93.6 - 518.83 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - (3537115888337719, 1125899906842624)
  Cluster 25
    113-26 - 93.6 - 488.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Since the ratio is exact, it can be used to losslessly recreate the original value:
  Cluster 26
    113-27 - 93.6 - 462.11 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x == 3537115888337719 / 1125899906842624
  Cluster 27
    113-28 - 93.6 - 447.86 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - True
  Cluster 28
    113-29 - 93.6 - 417.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The float.hex() method expresses a ﬂoat in hexadecimal (base 16), again giving the exact value stored by
  Cluster 29
    113-30 - 93.6 - 401.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - your computer:
  Cluster 30
    113-31 - 93.6 - 375.6 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x.hex()
  Cluster 31
    113-32 - 93.6 - 361.35 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '0x1.921f9f01b866ep+1'
  Cluster 32
    113-33 - 93.6 - 330.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This precise hexadecimal representation can be used to reconstruct the ﬂoat value exactly:
  Cluster 33
    113-34 - 93.6 - 304.62 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> x == float.fromhex('0x1.921f9f01b866ep+1')
  Cluster 34
    113-35 - 93.6 - 290.37 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - True
  Cluster 35
    113-36 - 93.6 - 259.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Since the representation is exact, it is useful for reliably porting values across diﬀerent versions of Python
  Cluster 36
    113-37 - 93.6 - 244.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (platform independence) and exchanging data with other languages that support the same format (such as
  Cluster 37
    113-38 - 93.6 - 228.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Java and C99).
  Cluster 38
    113-39 - 93.6 - 206.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Another helpful tool is the math.fsum() function which helps mitigate loss-of-precision during summation.
  Cluster 39
    113-40 - 93.6 - 191.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It tracks “lost digits” as values are added onto a running total. That can make a diﬀerence in overall accuracy
  Cluster 40
    113-41 - 93.6 - 175.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - so that the errors do not accumulate to the point where they aﬀect the ﬁnal total:
  Cluster 41
    113-42 - 93.6 - 149.46 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sum([0.1] * 10) == 1.0
  Cluster 42
    113-43 - 93.6 - 135.21 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - False
  Cluster 43
    113-44 - 93.6 - 120.97 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> math.fsum([0.1] * 10) == 1.0
  Cluster 44
    113-45 - 93.6 - 106.72 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - True
  Cluster 45
    113-46 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 107
Page 114
  Cluster 0
    114-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    114-2 - 93.6 - 919.68 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 15.1 Representation Error
  Cluster 2
    114-3 - 93.6 - 882.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This section explains the “0.1” example in detail, and shows how you can perform an exact analysis of cases
  Cluster 3
    114-4 - 93.6 - 867.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - like this yourself. Basic familiarity with binary ﬂoating-point representation is assumed.
  Cluster 4
    114-5 - 93.6 - 845.39 29.89 - ff6 - 39.852 - rgb(0, 0, 0) - Representation error refers to the fact that some (most, actually) decimal fractions cannot be represented
  Cluster 5
    114-6 - 93.6 - 829.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - exactly as binary (base 2) fractions. This is the chief reason why Python (or Perl, C, C++, Java, Fortran,
  Cluster 6
    114-7 - 93.6 - 814.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and many others) often won’t display the exact decimal number you expect.
  Cluster 7
    114-8 - 93.6 - 792.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Why is that? 1/10 is not exactly representable as a binary fraction. Almost all machines today (November
  Cluster 8
    114-9 - 93.6 - 776.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 2000) use IEEE-754 ﬂoating point arithmetic, and almost all platforms map Python ﬂoats to IEEE-754
  Cluster 9
    114-10 - 93.6 - 761.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - “double precision”. 754 doubles contain 53 bits of precision, so on input the computer strives to convert 0.1
  Cluster 10
    114-11 - 93.6 - 745.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to the closest fraction it can of the form J/2**N where J is an integer containing exactly 53 bits. Rewriting
  Cluster 11
    114-12 - 93.6 - 719.63 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 1 / 10 ~= J / (2**N)
  Cluster 12
    114-13 - 93.6 - 688.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as
  Cluster 13
    114-14 - 93.6 - 662.9 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - J ~= 2**N / 10
  Cluster 14
    114-15 - 93.6 - 632.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and recalling that J has exactly 53 bits (is >= 2**52 but < 2**53), the best value for N is 56:
  Cluster 15
    114-16 - 93.6 - 606.18 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 2**52 <= 2**56 // 10 < 2**53
  Cluster 16
    114-17 - 93.6 - 591.93 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - True
  Cluster 17
    114-18 - 93.6 - 561.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - That is, 56 is the only value for N that leaves J with exactly 53 bits. The best possible value for J is then
  Cluster 18
    114-19 - 93.6 - 545.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that quotient rounded:
  Cluster 19
    114-20 - 93.6 - 519.66 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> q, r = divmod(2**56, 10)
  Cluster 20
    114-21 - 93.6 - 505.41 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> r
  Cluster 21
    114-22 - 93.6 - 491.17 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 6
  Cluster 22
    114-23 - 93.6 - 460.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Since the remainder is more than half of 10, the best approximation is obtained by rounding up:
  Cluster 23
    114-24 - 93.6 - 434.43 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> q+1
  Cluster 24
    114-25 - 93.6 - 420.19 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 7205759403792794
  Cluster 25
    114-26 - 93.6 - 389.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Therefore the best possible approximation to 1/10 in 754 double precision is:
  Cluster 26
    114-27 - 93.6 - 363.47 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 7205759403792794 / 2 ** 56
  Cluster 27
    114-28 - 93.6 - 332.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Dividing both the numerator and denominator by two reduces the fraction to:
  Cluster 28
    114-29 - 93.6 - 306.74 24.89 - ff7 - 35.864 - rgb(33, 128, 79) - 3602879701896397 / 2 ** 55
  Cluster 29
    114-30 - 93.6 - 276.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Note that since we rounded up, this is actually a little bit larger than 1/10; if we had not rounded up, the
  Cluster 30
    114-31 - 93.6 - 260.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - quotient would have been a little bit smaller than 1/10. But in no case can it be exactly 1/10!
  Cluster 31
    114-32 - 93.6 - 238.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - So the computer never “sees” 1/10: what it sees is the exact fraction given above, the best 754 double
  Cluster 32
    114-33 - 93.6 - 222.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - approximation it can get:
  Cluster 33
    114-34 - 93.6 - 196.91 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 0.1 * 2 ** 55
  Cluster 34
    114-35 - 93.6 - 182.66 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 3602879701896397.0
  Cluster 35
    114-36 - 93.6 - 151.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If we multiply that fraction by 10**55, we can see the value out to 55 decimal digits:
  Cluster 36
    114-37 - 93.6 - 125.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> 3602879701896397 * 10 ** 55 // 2 ** 55
  Cluster 37
    114-38 - 93.6 - 111.68 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 1000000000000000055511151231257827021181583404541015625
  Cluster 38
    114-39 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 108 Chapter 15. Floating Point Arithmetic: Issues and Limitations
Page 115
  Cluster 0
    115-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    115-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - meaning that the exact number stored in the computer is equal to the decimal value
  Cluster 2
    115-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 0.1000000000000000055511151231257827021181583404541015625. Instead of displaying the full decimal
  Cluster 3
    115-4 - 93.6 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - value, many languages (including older versions of Python), round the result to 17 signiﬁcant digits:
  Cluster 4
    115-5 - 93.6 - 865.93 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> format(0.1, '.17f')
  Cluster 5
    115-6 - 93.6 - 851.68 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '0.10000000000000001'
  Cluster 6
    115-7 - 93.6 - 820.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The fractions and decimal modules make these calculations easy:
  Cluster 7
    115-8 - 93.6 - 794.96 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from decimal import Decimal
  Cluster 8
    115-9 - 93.6 - 780.72 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> from fractions import Fraction
  Cluster 9
    115-10 - 93.6 - 752.22 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> Fraction.from_float(0.1)
  Cluster 10
    115-11 - 93.6 - 737.97 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Fraction(3602879701896397, 36028797018963968)
  Cluster 11
    115-12 - 93.6 - 709.48 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> (0.1).as_integer_ratio()
  Cluster 12
    115-13 - 93.6 - 695.23 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - (3602879701896397, 36028797018963968)
  Cluster 13
    115-14 - 93.6 - 666.74 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> Decimal.from_float(0.1)
  Cluster 14
    115-15 - 93.6 - 652.5 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - Decimal('0.1000000000000000055511151231257827021181583404541015625')
  Cluster 15
    115-16 - 93.6 - 624.0 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> format(Decimal.from_float(0.1), '.17')
  Cluster 16
    115-17 - 93.6 - 609.75 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '0.10000000000000001'
  Cluster 17
    115-18 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 15.1. Representation Error 109
Page 116
  Cluster 0
    116-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    116-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 110 Chapter 15. Floating Point Arithmetic: Issues and Limitations
Page 117
  Cluster 0
    117-1 - 637.1 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - CHAPTER
  Cluster 1
    117-2 - 618.23 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - SIXTEEN
  Cluster 2
    117-3 - 600.68 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - APPENDIX
  Cluster 3
    117-4 - 93.6 - 721.01 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - 16.1 Interactive Mode
  Cluster 4
    117-5 - 93.6 - 680.71 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 16.1.1 Error Handling
  Cluster 5
    117-6 - 93.6 - 650.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When an error occurs, the interpreter prints an error message and a stack trace. In interactive mode, it
  Cluster 6
    117-7 - 93.6 - 634.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - then returns to the primary prompt; when input came from a ﬁle, it exits with a nonzero exit status after
  Cluster 7
    117-8 - 93.6 - 619.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - printing the stack trace. (Exceptions handled by an except clause in a try statement are not errors in this
  Cluster 8
    117-9 - 93.6 - 603.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - context.) Some errors are unconditionally fatal and cause an exit with a nonzero exit; this applies to internal
  Cluster 9
    117-10 - 93.6 - 588.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - inconsistencies and some cases of running out of memory. All error messages are written to the standard
  Cluster 10
    117-11 - 93.6 - 572.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - error stream; normal output from executed commands is written to standard output.
  Cluster 11
    117-12 - 93.6 - 550.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Typing the interrupt character (usually Control-C or Delete) to the primary or secondary prompt cancels
  Cluster 12
    117-13 - 359.15 - 539.75 18.58 - ff8 - 27.896 - rgb(53, 95, 124) - 1
  Cluster 13
    117-14 - 93.6 - 535.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the input and returns to the primary prompt.
  Cluster 14
    117-15 - 372.5 - 535.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Typing an interrupt while a command is executing raises
  Cluster 15
    117-16 - 93.6 - 519.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the KeyboardInterrupt exception, which may be handled by a try statement.
  Cluster 16
    117-17 - 93.6 - 476.76 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 16.1.2 Executable Python Scripts
  Cluster 17
    117-18 - 93.6 - 446.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - On BSD’ish Unix systems, Python scripts can be made directly executable, like shell scripts, by putting the
  Cluster 18
    117-19 - 93.6 - 430.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - line
  Cluster 19
    117-20 - 93.6 - 404.79 24.89 - ffe - 35.864 - rgb(64, 128, 143) - #!/usr/bin/env python3.5
  Cluster 20
    117-21 - 93.6 - 374.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (assuming that the interpreter is on the user’s PATH) at the beginning of the script and giving the ﬁle an
  Cluster 21
    117-22 - 93.6 - 358.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - executable mode. The #! must be the ﬁrst two characters of the ﬁle. On some platforms, this ﬁrst line
  Cluster 22
    117-23 - 93.6 - 343.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - must end with a Unix-style line ending ('\n'), not a Windows ('\r\n') line ending. Note that the hash, or
  Cluster 23
    117-24 - 93.6 - 327.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - pound, character, '#', is used to start a comment in Python.
  Cluster 24
    117-25 - 93.6 - 305.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The script can be given an executable mode, or permission, using the chmod command.
  Cluster 25
    117-26 - 93.6 - 279.42 24.89 - ffd - 35.864 - rgb(199, 92, 10) - $ chmod +x myscript.py
  Cluster 26
    117-27 - 93.6 - 248.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - On Windows systems, there is no notion of an “executable mode”. The Python installer automatically
  Cluster 27
    117-28 - 93.6 - 233.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - associates .py ﬁles with python.exe so that a double-click on a Python ﬁle will run it as a script. The
  Cluster 28
    117-29 - 93.6 - 217.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - extension can also be .pyw, in that case, the console window that normally appears is suppressed.
  Cluster 29
    117-30 - 93.6 - 174.9 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 16.1.3 The Interactive Startup File
  Cluster 30
    117-31 - 93.6 - 144.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When you use Python interactively, it is frequently handy to have some standard commands executed every
  Cluster 31
    117-32 - 93.6 - 128.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - time the interpreter is started. You can do this by setting an environment variable named PYTHONSTARTUP
  Cluster 32
    117-33 - 106.86 - 109.47 15.93 - ffa - 23.912 - rgb(0, 0, 0) - 1
  Cluster 33
    117-34 - 115.92 - 105.82 23.91 - ffb - 31.88 - rgb(0, 0, 0) - A problem with the GNU Readline package may prevent this.
  Cluster 34
    117-35 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 111
Page 118
  Cluster 0
    118-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    118-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to the name of a ﬁle containing your start-up commands. This is similar to the .profile feature of the Unix
  Cluster 2
    118-3 - 93.6 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - shells.
  Cluster 3
    118-4 - 93.6 - 885.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This ﬁle is only read in interactive sessions, not when Python reads commands from a script, and not when
  Cluster 4
    118-5 - 93.6 - 869.95 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - /dev/tty is given as the explicit source of commands (which otherwise behaves like an interactive session). It
  Cluster 5
    118-6 - 93.6 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is executed in the same namespace where interactive commands are executed, so that objects that it deﬁnes
  Cluster 6
    118-7 - 93.6 - 838.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - or imports can be used without qualiﬁcation in the interactive session. You can also change the prompts
  Cluster 7
    118-8 - 93.6 - 823.33 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - sys.ps1 and sys.ps2 in this ﬁle.
  Cluster 8
    118-9 - 93.6 - 801.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - If you want to read an additional start-up ﬁle from the current directory, you can program this in the
  Cluster 9
    118-10 - 93.6 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - global start-up ﬁle using code like if os.path.isfile('.pythonrc.py'): exec(open('.pythonrc.py').
  Cluster 10
    118-11 - 93.6 - 770.22 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - read()). If you want to use the startup ﬁle in a script, you must do this explicitly in the script:
  Cluster 11
    118-12 - 93.6 - 744.18 24.82 - ffd - 35.864 - rgb(0, 112, 33) - import os
  Cluster 12
    118-13 - 93.6 - 729.94 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - filename = os.environ.get('PYTHONSTARTUP')
  Cluster 13
    118-14 - 93.6 - 715.7 24.89 - ffd - 35.864 - rgb(0, 112, 33) - if filename and os.path.isfile(filename):
  Cluster 14
    118-15 - 118.08 - 701.45 24.89 - ffd - 35.864 - rgb(0, 112, 33) - with open(filename) as fobj:
  Cluster 15
    118-16 - 142.56 - 687.21 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - startup_file = fobj.read()
  Cluster 16
    118-17 - 118.08 - 672.96 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - exec(startup_file)
  Cluster 17
    118-18 - 93.6 - 621.53 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - 16.1.4 The Customization Modules
  Cluster 18
    118-19 - 93.6 - 591.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python provides two hooks to let you customize it: sitecustomize and usercustomize. To see how it
  Cluster 19
    118-20 - 93.6 - 575.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - works, you need ﬁrst to ﬁnd the location of your user site-packages directory. Start Python and run this
  Cluster 20
    118-21 - 93.6 - 560.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - code:
  Cluster 21
    118-22 - 93.6 - 534.03 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import site
  Cluster 22
    118-23 - 93.6 - 519.78 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> site.getusersitepackages()
  Cluster 23
    118-24 - 93.6 - 505.53 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - '/home/user/.local/lib/python3.5/site-packages'
  Cluster 24
    118-25 - 93.6 - 474.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Now you can create a ﬁle named usercustomize.py in that directory and put anything you want in it. It
  Cluster 25
    118-26 - 93.6 - 459.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - will aﬀect every invocation of Python, unless it is started with the -s option to disable the automatic import.
  Cluster 26
    118-27 - 93.6 - 437.28 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - sitecustomize works in the same way, but is typically created by an administrator of the computer in the
  Cluster 27
    118-28 - 93.6 - 421.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - global site-packages directory, and is imported before usercustomize. See the documentation of the site
  Cluster 28
    118-29 - 93.6 - 406.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module for more details.
  Cluster 29
    118-30 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 112 Chapter 16. Appendix
Page 119
  Cluster 0
    119-1 - 631.63 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - APPENDIX
  Cluster 1
    119-2 - 687.75 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - A
  Cluster 2
    119-3 - 599.44 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - GLOSSARY
  Cluster 3
    119-4 - 93.6 - 728.78 29.89 - ffd - 39.852 - rgb(0, 0, 0) - >>> The default Python prompt of the interactive shell. Often seen for code examples which can be executed
  Cluster 4
    119-5 - 125.98 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - interactively in the interpreter.
  Cluster 5
    119-6 - 93.6 - 691.22 29.89 - ffd - 39.852 - rgb(0, 0, 0) - ... The default Python prompt of the interactive shell when entering code for an indented code block, when
  Cluster 6
    119-7 - 125.98 - 675.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or triple
  Cluster 7
    119-8 - 125.98 - 660.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - quotes), or after specifying a decorator.
  Cluster 8
    119-9 - 93.6 - 638.12 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - 2to3 A tool that tries to convert Python 2.x code to Python 3.x code by handling most of the incompati-
  Cluster 9
    119-10 - 125.98 - 622.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - bilities which can be detected by parsing the source and traversing the parse tree.
  Cluster 10
    119-11 - 125.98 - 600.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 2to3 is available in the standard library as lib2to3; a standalone entry point is provided as Tools/
  Cluster 11
    119-12 - 125.98 - 585.01 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - scripts/2to3. See 2to3-reference.
  Cluster 12
    119-13 - 93.6 - 563.0 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - abstract base class Abstract base classes complement duck-typing by providing a way to deﬁne interfaces
  Cluster 13
    119-14 - 125.98 - 547.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - when other techniques like hasattr() would be clumsy or subtly wrong (for example with magic
  Cluster 14
    119-15 - 125.98 - 531.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - methods). ABCs introduce virtual subclasses, which are classes that don’t inherit from a class but
  Cluster 15
    119-16 - 125.98 - 516.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are still recognized by isinstance() and issubclass(); see the abc module documentation. Python
  Cluster 16
    119-17 - 125.98 - 500.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - comes with many built-in ABCs for data structures (in the collections.abc module), numbers (in
  Cluster 17
    119-18 - 125.98 - 485.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the numbers module), streams (in the io module), import ﬁnders and loaders (in the importlib.abc
    119-18 - 125.98 - 469.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module). You can create your own ABCs with the abc module.
  Cluster 18
    119-19 - 93.6 - 447.73 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - annotation A label associated with a variable, a class attribute or a function parameter or return value,
  Cluster 19
    119-20 - 125.98 - 432.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - used by convention as a type hint.
  Cluster 20
    119-21 - 125.98 - 410.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Annotations of local variables cannot be accessed at runtime, but annotations of global variables, class
  Cluster 21
    119-22 - 125.98 - 394.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - attributes, and functions are stored in the __annotations__ special attribute of modules, classes, and
  Cluster 22
    119-23 - 125.98 - 379.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - functions, respectively.
  Cluster 23
    119-24 - 125.98 - 357.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See variable annotation, function annotation, PEP 484 and PEP 526, which describe this function-
  Cluster 24
    119-25 - 125.98 - 341.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ality.
  Cluster 25
    119-26 - 93.6 - 319.51 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - argument A value passed to a function (or method) when calling the function. There are two kinds of
  Cluster 26
    119-27 - 125.98 - 303.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - argument:
  Cluster 27
    119-28 - 137.92 - 281.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • keyword argument: an argument preceded by an identiﬁer (e.g. name=) in a function call or passed
  Cluster 28
    119-29 - 154.79 - 266.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as a value in a dictionary preceded by **. For example, 3 and 5 are both keyword arguments in
  Cluster 29
    119-30 - 154.79 - 250.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the following calls to complex():
  Cluster 30
    119-31 - 154.79 - 224.84 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - complex(real=3, imag=5)
  Cluster 31
    119-32 - 154.79 - 210.59 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - complex(**{'real': 3, 'imag': 5})
  Cluster 32
    119-33 - 137.92 - 179.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • positional argument: an argument that is not a keyword argument. Positional arguments can
  Cluster 33
    119-34 - 154.79 - 164.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - appear at the beginning of an argument list and/or be passed as elements of an iterable preceded
  Cluster 34
    119-35 - 154.79 - 148.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - by *. For example, 3 and 5 are both positional arguments in the following calls:
  Cluster 35
    119-36 - 154.79 - 122.78 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - complex(3, 5)
  Cluster 36
    119-37 - 154.79 - 108.54 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - complex(*(3, 5))
  Cluster 37
    119-38 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 113
Page 120
  Cluster 0
    120-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    120-2 - 125.98 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Arguments are assigned to the named local variables in a function body. See the calls section for the
  Cluster 2
    120-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - rules governing this assignment. Syntactically, any expression can be used to represent an argument;
  Cluster 3
    120-4 - 125.98 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the evaluated value is assigned to the local variable.
  Cluster 4
    120-5 - 125.98 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See also the parameter glossary entry, the FAQ question on the diﬀerence between arguments and
  Cluster 5
    120-6 - 125.98 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - parameters, and PEP 362.
  Cluster 6
    120-7 - 93.6 - 832.39 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - asynchronous context manager An object which controls the environment seen in an async with state-
  Cluster 7
    120-8 - 125.98 - 816.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ment by deﬁning __aenter__() and __aexit__() methods. Introduced by PEP 492.
  Cluster 8
    120-9 - 93.6 - 794.83 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - asynchronous generator A function which returns an asynchronous generator iterator. It looks like a
  Cluster 9
    120-10 - 125.98 - 779.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - coroutine function deﬁned with async def except that it contains yield expressions for producing a
  Cluster 10
    120-11 - 125.98 - 763.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - series of values usable in an async for loop.
  Cluster 11
    120-12 - 125.98 - 741.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Usually refers to a asynchronous generator function, but may refer to an asynchronous generator
  Cluster 12
    120-13 - 125.98 - 726.19 29.89 - ff6 - 39.852 - rgb(0, 0, 0) - iterator in some contexts. In cases where the intended meaning isn’t clear, using the full terms avoids
  Cluster 13
    120-14 - 125.98 - 710.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ambiguity.
  Cluster 14
    120-15 - 125.98 - 688.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - An asynchronous generator function may contain await expressions as well as async for, and async
  Cluster 15
    120-16 - 125.98 - 673.09 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - with statements.
  Cluster 16
    120-17 - 93.6 - 651.07 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - asynchronous generator iterator An object created by a asynchronous generator function.
  Cluster 17
    120-18 - 125.98 - 629.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This is an asynchronous iterator which when called using the __anext__() method returns an awaitable
  Cluster 18
    120-19 - 125.98 - 613.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object which will execute that the body of the asynchronous generator function until the next yield
  Cluster 19
    120-20 - 125.98 - 597.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - expression.
  Cluster 20
    120-21 - 125.98 - 575.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Each yield temporarily suspends processing, remembering the location execution state (including local
  Cluster 21
    120-22 - 125.98 - 560.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - variables and pending try-statements). When the asynchronous generator iterator eﬀectively resumes
  Cluster 22
    120-23 - 125.98 - 544.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with another awaitable returned by __anext__(), it picks up where it left oﬀ. See PEP 492 and PEP
  Cluster 23
    120-24 - 125.98 - 529.32 29.89 - ff3 - 39.852 - rgb(55, 112, 99) - 525.
  Cluster 24
    120-25 - 93.6 - 507.31 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - asynchronous iterable An object, that can be used in an async for statement. Must return an asyn-
  Cluster 25
    120-26 - 125.98 - 491.76 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - chronous iterator from its __aiter__() method. Introduced by PEP 492.
  Cluster 26
    120-27 - 93.6 - 469.74 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - asynchronous iterator An object that implements the __aiter__() and __anext__() methods.
  Cluster 27
    120-28 - 125.98 - 454.21 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - __anext__ must return an awaitable object. async for resolves the awaitables returned by an asyn-
  Cluster 28
    120-29 - 125.98 - 438.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - chronous iterator’s __anext__() method until it raises a StopAsyncIteration exception. Introduced
  Cluster 29
    120-30 - 125.98 - 423.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - by PEP 492.
  Cluster 30
    120-31 - 93.6 - 401.1 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - attribute A value associated with an object which is referenced by name using dotted expressions. For
  Cluster 31
    120-32 - 125.98 - 385.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - example, if an object o has an attribute a it would be referenced as o.a.
  Cluster 32
    120-33 - 93.6 - 363.55 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - awaitable An object that can be used in an await expression. Can be a coroutine or an object with an
  Cluster 33
    120-34 - 125.98 - 348.01 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - __await__() method. See also PEP 492.
  Cluster 34
    120-35 - 93.6 - 325.99 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - BDFL Benevolent Dictator For Life, a.k.a. Guido van Rossum, Python’s creator.
    120-35 - 93.6 - 303.97 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - binary ﬁle A ﬁle object able to read and write bytes-like objects. Examples of binary ﬁles are ﬁles opened
  Cluster 35
    120-36 - 125.98 - 288.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in binary mode ('rb', 'wb' or 'rb+'), sys.stdin.buffer, sys.stdout.buffer, and instances of
  Cluster 36
    120-37 - 125.98 - 272.88 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - io.BytesIO and gzip.GzipFile.
  Cluster 37
    120-38 - 125.98 - 250.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See also text ﬁle for a ﬁle object able to read and write str objects.
  Cluster 38
    120-39 - 93.6 - 228.85 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - bytes-like object An object that supports the buﬀerobjects and can export a C-contiguous buﬀer. This
  Cluster 39
    120-40 - 125.98 - 213.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - includes all bytes, bytearray, and array.array objects, as well as many common memoryview ob-
  Cluster 40
    120-41 - 125.98 - 197.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - jects. Bytes-like objects can be used for various operations that work with binary data; these include
  Cluster 41
    120-42 - 125.98 - 182.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - compression, saving to a binary ﬁle, and sending over a socket.
  Cluster 42
    120-43 - 125.98 - 160.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Some operations need the binary data to be mutable. The documentation often refers to these as “read-
  Cluster 43
    120-44 - 125.98 - 144.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - write bytes-like objects”. Example mutable buﬀer objects include bytearray and a memoryview of a
  Cluster 44
    120-45 - 125.98 - 129.13 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - bytearray. Other operations require the binary data to be stored in immutable objects (“read-only
  Cluster 45
    120-46 - 125.98 - 113.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - bytes-like objects”); examples of these include bytes and a memoryview of a bytes object.
  Cluster 46
    120-47 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 114 Appendix A. Glossary
Page 121
  Cluster 0
    121-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    121-2 - 93.6 - 923.05 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - bytecode Python source code is compiled into bytecode, the internal representation of a Python program
  Cluster 2
    121-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in the CPython interpreter. The bytecode is also cached in .pyc ﬁles so that executing the same ﬁle
  Cluster 3
    121-4 - 125.98 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is faster the second time (recompilation from source to bytecode can be avoided). This “intermediate
  Cluster 4
    121-5 - 125.98 - 876.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - language” is said to run on a virtual machine that executes the machine code corresponding to each
  Cluster 5
    121-6 - 125.98 - 860.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - bytecode. Do note that bytecodes are not expected to work between diﬀerent Python virtual machines,
  Cluster 6
    121-7 - 125.98 - 845.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - nor to be stable between Python releases.
  Cluster 7
    121-8 - 125.98 - 823.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A list of bytecode instructions can be found in the documentation for the dis module.
  Cluster 8
    121-9 - 93.6 - 801.31 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - class A template for creating user-deﬁned objects. Class deﬁnitions normally contain method deﬁnitions
  Cluster 9
    121-10 - 125.98 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - which operate on instances of the class.
  Cluster 10
    121-11 - 93.6 - 763.75 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - class variable A variable deﬁned in a class and intended to be modiﬁed only at class level (i.e., not in an
  Cluster 11
    121-12 - 125.98 - 748.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - instance of the class).
  Cluster 12
    121-13 - 93.6 - 726.19 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - coercion The implicit conversion of an instance of one type to another during an operation which involves
  Cluster 13
    121-14 - 125.98 - 710.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - two arguments of the same type. For example, int(3.15) converts the ﬂoating point number to the
    121-14 - 125.98 - 695.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - integer 3, but in 3+4.5, each argument is of a diﬀerent type (one int, one ﬂoat), and both must be
  Cluster 14
    121-15 - 125.98 - 679.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - converted to the same type before they can be added or it will raise a TypeError. Without coercion, all
  Cluster 15
    121-16 - 125.98 - 664.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - arguments of even compatible types would have to be normalized to the same value by the programmer,
  Cluster 16
    121-17 - 125.98 - 648.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - e.g., float(3)+4.5 rather than just 3+4.5.
  Cluster 17
    121-18 - 93.6 - 626.46 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - complex number An extension of the familiar real number system in which all numbers are expressed as
  Cluster 18
    121-19 - 125.98 - 610.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a sum of a real part and an imaginary part. Imaginary numbers are real multiples of the imaginary
  Cluster 19
    121-20 - 125.98 - 595.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - unit (the square root of -1), often written i in mathematics or j in engineering. Python has built-in
  Cluster 20
    121-21 - 125.98 - 579.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - support for complex numbers, which are written with this latter notation; the imaginary part is written
  Cluster 21
    121-22 - 125.98 - 564.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with a j suﬃx, e.g., 3+1j. To get access to complex equivalents of the math module, use cmath. Use
  Cluster 22
    121-23 - 125.98 - 548.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of complex numbers is a fairly advanced mathematical feature. If you’re not aware of a need for them,
  Cluster 23
    121-24 - 125.98 - 533.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - it’s almost certain you can safely ignore them.
  Cluster 24
    121-25 - 93.6 - 511.2 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - context manager An object which controls the environment seen in a with statement by deﬁning
  Cluster 25
    121-26 - 125.98 - 495.65 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - __enter__() and __exit__() methods. See PEP 343.
  Cluster 26
    121-27 - 93.6 - 473.63 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - contiguous A buﬀer is considered contiguous exactly if it is either C-contiguous or Fortran contiguous.
  Cluster 27
    121-28 - 125.98 - 458.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Zero-dimensional buﬀers are C and Fortran contiguous. In one-dimensional arrays, the items must
  Cluster 28
    121-29 - 125.98 - 442.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - be laid out in memory next to each other, in order of increasing indexes starting from zero. In
  Cluster 29
    121-30 - 125.98 - 427.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - multidimensional C-contiguous arrays, the last index varies the fastest when visiting items in order of
  Cluster 30
    121-31 - 125.98 - 411.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - memory address. However, in Fortran contiguous arrays, the ﬁrst index varies the fastest.
  Cluster 31
    121-32 - 93.6 - 389.45 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - coroutine Coroutines is a more generalized form of subroutines. Subroutines are entered at one point and
  Cluster 32
    121-33 - 125.98 - 373.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - exited at another point. Coroutines can be entered, exited, and resumed at many diﬀerent points.
  Cluster 33
    121-34 - 125.98 - 358.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - They can be implemented with the async def statement. See also PEP 492.
  Cluster 34
    121-35 - 93.6 - 336.35 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - coroutine function A function which returns a coroutine object. A coroutine function may be deﬁned
  Cluster 35
    121-36 - 125.98 - 320.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with the async def statement, and may contain await, async for, and async with keywords. These
  Cluster 36
    121-37 - 125.98 - 305.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - were introduced by PEP 492.
  Cluster 37
    121-38 - 93.6 - 283.24 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - CPython The canonical implementation of the Python programming language, as distributed on
  Cluster 38
    121-39 - 125.98 - 267.71 29.89 - ff4 - 39.852 - rgb(55, 112, 99) - python.org. The term “CPython” is used when necessary to distinguish this implementation from
  Cluster 39
    121-40 - 125.98 - 252.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - others such as Jython or IronPython.
  Cluster 40
    121-41 - 93.6 - 230.15 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - decorator A function returning another function, usually applied as a function transformation using the
  Cluster 41
    121-42 - 125.98 - 214.6 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - @wrapper syntax. Common examples for decorators are classmethod() and staticmethod().
  Cluster 42
    121-43 - 125.98 - 192.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The decorator syntax is merely syntactic sugar, the following two function deﬁnitions are semantically
  Cluster 43
    121-44 - 125.98 - 177.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - equivalent:
  Cluster 44
    121-45 - 125.98 - 152.05 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def f(...):
  Cluster 45
    121-46 - 150.46 - 137.8 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - ...
  Cluster 46
    121-47 - 125.98 - 123.55 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - f = staticmethod(f)
  Cluster 47
    121-48 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 48
    121-49 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 115
Page 122
  Cluster 0
    122-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    122-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    122-3 - 125.98 - 904.79 24.82 - ffd - 35.864 - rgb(84, 84, 84) - @staticmethod
  Cluster 3
    122-4 - 125.98 - 890.54 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def f(...):
  Cluster 4
    122-5 - 150.46 - 876.29 24.89 - ff7 - 35.864 - rgb(102, 102, 102) - ...
  Cluster 5
    122-6 - 125.98 - 845.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The same concept exists for classes, but is less commonly used there. See the documentation for
  Cluster 6
    122-7 - 125.98 - 830.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - function deﬁnitions and class deﬁnitions for more about decorators.
  Cluster 7
    122-8 - 93.6 - 808.04 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - descriptor Any object which deﬁnes the methods __get__(), __set__(), or __delete__(). When a class
  Cluster 8
    122-9 - 125.98 - 792.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - attribute is a descriptor, its special binding behavior is triggered upon attribute lookup. Normally,
  Cluster 9
    122-10 - 125.98 - 776.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - using a.b to get, set or delete an attribute looks up the object named b in the class dictionary for a, but
  Cluster 10
    122-11 - 125.98 - 761.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - if b is a descriptor, the respective descriptor method gets called. Understanding descriptors is a key
  Cluster 11
    122-12 - 125.98 - 745.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to a deep understanding of Python because they are the basis for many features including functions,
  Cluster 12
    122-13 - 125.98 - 730.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - methods, properties, class methods, static methods, and reference to super classes.
  Cluster 13
    122-14 - 125.98 - 708.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - For more information about descriptors’ methods, see descriptors.
  Cluster 14
    122-15 - 93.6 - 686.3 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - dictionary An associative array, where arbitrary keys are mapped to values. The keys can be any object
  Cluster 15
    122-16 - 125.98 - 670.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with __hash__() and __eq__() methods. Called a hash in Perl.
  Cluster 16
    122-17 - 93.6 - 648.74 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - dictionary view The objects returned from dict.keys(), dict.values(), and dict.items() are called
  Cluster 17
    122-18 - 125.98 - 633.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - dictionary views. They provide a dynamic view on the dictionary’s entries, which means that when
  Cluster 18
    122-19 - 125.98 - 617.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the dictionary changes, the view reﬂects these changes. To force the dictionary view to become a full
  Cluster 19
    122-20 - 125.98 - 602.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - list use list(dictview). See dict-views.
  Cluster 20
    122-21 - 93.6 - 580.1 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - docstring A string literal which appears as the ﬁrst expression in a class, function or module. While ignored
  Cluster 21
    122-22 - 125.98 - 564.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - when the suite is executed, it is recognized by the compiler and put into the __doc__ attribute of the
  Cluster 22
    122-23 - 125.98 - 549.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - enclosing class, function or module. Since it is available via introspection, it is the canonical place for
  Cluster 23
    122-24 - 125.98 - 533.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - documentation of the object.
  Cluster 24
    122-25 - 93.6 - 511.45 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - duck-typing A programming style which does not look at an object’s type to determine if it has the right
  Cluster 25
    122-26 - 125.98 - 495.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - interface; instead, the method or attribute is simply called or used (“If it looks like a duck and quacks
  Cluster 26
    122-27 - 125.98 - 480.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - like a duck, it must be a duck.”) By emphasizing interfaces rather than speciﬁc types, well-designed
  Cluster 27
    122-28 - 125.98 - 464.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - code improves its ﬂexibility by allowing polymorphic substitution. Duck-typing avoids tests using
  Cluster 28
    122-29 - 125.98 - 449.28 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - type() or isinstance(). (Note, however, that duck-typing can be complemented with abstract base
  Cluster 29
    122-30 - 125.98 - 433.75 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - classes.) Instead, it typically employs hasattr() tests or EAFP programming.
  Cluster 30
    122-31 - 93.6 - 411.72 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - EAFP Easier to ask for forgiveness than permission. This common Python coding style assumes the
  Cluster 31
    122-32 - 125.98 - 396.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean
  Cluster 32
    122-33 - 125.98 - 380.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and fast style is characterized by the presence of many try and except statements. The technique
  Cluster 33
    122-34 - 125.98 - 365.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - contrasts with the LBYL style common to many other languages such as C.
  Cluster 34
    122-35 - 93.6 - 343.08 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - expression A piece of syntax which can be evaluated to some value. In other words, an expression is
  Cluster 35
    122-36 - 125.98 - 327.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - an accumulation of expression elements like literals, names, attribute access, operators or function
  Cluster 36
    122-37 - 125.98 - 312.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - calls which all return a value. In contrast to many other languages, not all language constructs are
    122-37 - 125.98 - 296.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - expressions. There are also statements which cannot be used as expressions, such as if. Assignments
  Cluster 37
    122-38 - 125.98 - 280.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are also statements, not expressions.
  Cluster 38
    122-39 - 93.6 - 258.89 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - extension module A module written in C or C++, using Python’s C API to interact with the core and
  Cluster 39
    122-40 - 125.98 - 243.36 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with user code.
  Cluster 40
    122-41 - 93.6 - 221.34 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - f-string String literals preﬁxed with 'f' or 'F' are commonly called “f-strings” which is short for formatted
  Cluster 41
    122-42 - 125.98 - 205.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - string literals. See also PEP 498.
  Cluster 42
    122-43 - 93.6 - 183.78 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - ﬁle object An object exposing a ﬁle-oriented API (with methods such as read() or write()) to an underly-
  Cluster 43
    122-44 - 125.98 - 168.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ing resource. Depending on the way it was created, a ﬁle object can mediate access to a real on-disk ﬁle
  Cluster 44
    122-45 - 125.98 - 152.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - or to another type of storage or communication device (for example standard input/output, in-memory
  Cluster 45
    122-46 - 125.98 - 137.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - buﬀers, sockets, pipes, etc.). File objects are also called ﬁle-like objects or streams.
  Cluster 46
    122-47 - 125.98 - 115.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There are actually three categories of ﬁle objects: raw binary ﬁles, buﬀered binary ﬁles and text ﬁles.
  Cluster 47
    122-48 - 125.98 - 99.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Their interfaces are deﬁned in the io module. The canonical way to create a ﬁle object is by using the
  Cluster 48
    122-49 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 116 Appendix A. Glossary
Page 123
  Cluster 0
    123-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    123-2 - 125.98 - 923.05 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - open() function.
  Cluster 2
    123-3 - 93.6 - 901.03 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - ﬁle-like object A synonym for ﬁle object.
  Cluster 3
    123-4 - 93.6 - 879.01 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - ﬁnder An object that tries to ﬁnd the loader for a module that is being imported.
  Cluster 4
    123-5 - 125.98 - 857.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Since Python 3.3, there are two types of ﬁnder: meta path ﬁnders for use with sys.meta_path, and
  Cluster 5
    123-6 - 125.98 - 841.45 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - path entry ﬁnders for use with sys.path_hooks.
  Cluster 6
    123-7 - 125.98 - 819.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See PEP 302, PEP 420 and PEP 451 for much more detail.
  Cluster 7
    123-8 - 93.6 - 797.42 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - ﬂoor division Mathematical division that rounds down to nearest integer. The ﬂoor division operator is
  Cluster 8
    123-9 - 125.98 - 781.87 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - //. For example, the expression 11 // 4 evaluates to 2 in contrast to the 2.75 returned by ﬂoat true
  Cluster 9
    123-10 - 125.98 - 766.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - division. Note that (-11) // 4 is -3 because that is -2.75 rounded downward. See PEP 238.
  Cluster 10
    123-11 - 93.6 - 744.32 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - function A series of statements which returns some value to a caller. It can also be passed zero or more
  Cluster 11
    123-12 - 125.98 - 728.78 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - arguments which may be used in the execution of the body. See also parameter, method, and the
  Cluster 12
    123-13 - 125.98 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - function section.
  Cluster 13
    123-14 - 93.6 - 691.22 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - function annotation An annotation of a function parameter or return value.
  Cluster 14
    123-15 - 125.98 - 669.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Function annotations are usually used for type hints: for example this function is expected to take two
  Cluster 15
    123-16 - 125.98 - 653.65 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - int arguments and is also expected to have an int return value:
  Cluster 16
    123-17 - 125.98 - 627.63 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def sum_two_numbers(a: int, b: int) -> int:
  Cluster 17
    123-18 - 144.34 - 613.38 24.89 - ffd - 35.864 - rgb(0, 112, 33) - return a + b
  Cluster 18
    123-19 - 125.98 - 582.69 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Function annotation syntax is explained in section function.
  Cluster 19
    123-20 - 125.98 - 560.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See variable annotation and PEP 484, which describe this functionality.
  Cluster 20
    123-21 - 93.6 - 538.65 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - __future__ A pseudo-module which programmers can use to enable new language features which are
  Cluster 21
    123-22 - 125.98 - 523.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - not compatible with the current interpreter.
  Cluster 22
    123-23 - 125.98 - 501.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - By importing the __future__ module and evaluating its variables, you can see when a new feature
  Cluster 23
    123-24 - 125.98 - 485.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - was ﬁrst added to the language and when it becomes the default:
  Cluster 24
    123-25 - 125.98 - 459.51 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import __future__
  Cluster 25
    123-26 - 125.98 - 445.28 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> __future__.division
  Cluster 26
    123-27 - 125.98 - 431.03 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
  Cluster 27
    123-28 - 93.6 - 400.33 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - garbage collection The process of freeing memory when it is not used anymore. Python performs garbage
  Cluster 28
    123-29 - 125.98 - 384.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - collection via reference counting and a cyclic garbage collector that is able to detect and break reference
    123-29 - 125.98 - 369.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - cycles. The garbage collector can be controlled using the gc module.
  Cluster 29
    123-30 - 93.6 - 347.23 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - generator A function which returns a generator iterator. It looks like a normal function except that it
  Cluster 30
    123-31 - 125.98 - 331.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - contains yield expressions for producing a series of values usable in a for-loop or that can be retrieved
  Cluster 31
    123-32 - 125.98 - 316.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - one at a time with the next() function.
  Cluster 32
    123-33 - 125.98 - 294.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Usually refers to a generator function, but may refer to a generator iterator in some contexts. In cases
  Cluster 33
    123-34 - 125.98 - 278.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - where the intended meaning isn’t clear, using the full terms avoids ambiguity.
  Cluster 34
    123-35 - 93.6 - 256.57 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - generator iterator An object created by a generator function.

    =====
    123-35 - 125.98 - 234.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Each yield temporarily suspends processing, remembering the location execution state (including local
  Cluster 35
    123-36 - 125.98 - 219.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - variables and pending try-statements). When the generator iterator resumes, it picks up where it left
  Cluster 36
    123-37 - 125.98 - 203.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - oﬀ (in contrast to functions which start fresh on every invocation).
  Cluster 37
    123-38 - 93.6 - 181.45 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - generator expression An expression that returns an iterator. It looks like a normal expression followed
  Cluster 38
    123-39 - 125.98 - 165.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - by a for expression deﬁning a loop variable, range, and an optional if expression. The combined
  Cluster 39
    123-40 - 125.98 - 150.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - expression generates values for an enclosing function:
  Cluster 40
    123-41 - 125.98 - 124.33 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> sum(i*i for i in range(10)) # sum of squares 0, 1, 4, ... 81
  Cluster 41
    123-42 - 125.98 - 110.08 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 285
  Cluster 42
    123-43 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 117
Page 124
  Cluster 0
    124-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    124-2 - 93.6 - 923.05 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - generic function A function composed of multiple functions implementing the same operation for diﬀerent
  Cluster 2
    124-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - types. Which implementation should be used during a call is determined by the dispatch algorithm.
  Cluster 3
    124-4 - 125.98 - 885.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See also the single dispatch glossary entry, the functools.singledispatch() decorator, and PEP
  Cluster 4
    124-5 - 125.98 - 869.95 29.89 - ff3 - 39.852 - rgb(55, 112, 99) - 443.
  Cluster 5
    124-6 - 93.6 - 847.92 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - GIL See global interpreter lock.
  Cluster 6
    124-7 - 93.6 - 825.92 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - global interpreter lock The mechanism used by the CPython interpreter to assure that only one thread
  Cluster 7
    124-8 - 125.98 - 810.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - executes Python bytecode at a time. This simpliﬁes the CPython implementation by making the object
  Cluster 8
    124-9 - 125.98 - 794.83 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - model (including critical built-in types such as dict) implicitly safe against concurrent access. Locking
  Cluster 9
    124-10 - 125.98 - 779.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the entire interpreter makes it easier for the interpreter to be multi-threaded, at the expense of much
  Cluster 10
    124-11 - 125.98 - 763.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the parallelism aﬀorded by multi-processor machines.
  Cluster 11
    124-12 - 125.98 - 741.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - However, some extension modules, either standard or third-party, are designed so as to release the GIL
  Cluster 12
    124-13 - 125.98 - 726.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - when doing computationally-intensive tasks such as compression or hashing. Also, the GIL is always
  Cluster 13
    124-14 - 125.98 - 710.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - released when doing I/O.
  Cluster 14
    124-15 - 125.98 - 688.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Past eﬀorts to create a “free-threaded” interpreter (one which locks shared data at a much ﬁner
  Cluster 15
    124-16 - 125.98 - 673.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - granularity) have not been successful because performance suﬀered in the common single-processor
  Cluster 16
    124-17 - 125.98 - 657.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - case. It is believed that overcoming this performance issue would make the implementation much more
  Cluster 17
    124-18 - 125.98 - 642.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - complicated and therefore costlier to maintain.
  Cluster 18
    124-19 - 93.6 - 619.98 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - hash-based pyc A bytecode cache ﬁle that uses the hash rather than the last-modiﬁed time of the corre-
  Cluster 19
    124-20 - 125.98 - 604.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sponding source ﬁle to determine its validity. See pyc-invalidation.
  Cluster 20
    124-21 - 93.6 - 582.43 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - hashable An object is hashable if it has a hash value which never changes during its lifetime (it needs a
  Cluster 21
    124-22 - 125.98 - 566.88 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - __hash__() method), and can be compared to other objects (it needs an __eq__() method). Hashable
  Cluster 22
    124-23 - 125.98 - 551.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - objects which compare equal must have the same hash value.
  Cluster 23
    124-24 - 125.98 - 529.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Hashability makes an object usable as a dictionary key and a set member, because these data structures
  Cluster 24
    124-25 - 125.98 - 513.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - use the hash value internally.
  Cluster 25
    124-26 - 125.98 - 491.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - All of Python’s immutable built-in objects are hashable; mutable containers (such as lists or dictio-
  Cluster 26
    124-27 - 125.98 - 476.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - naries) are not. Objects which are instances of user-deﬁned classes are hashable by default. They all
  Cluster 27
    124-28 - 125.98 - 460.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - compare unequal (except with themselves), and their hash value is derived from their id().
  Cluster 28
    124-29 - 93.6 - 438.66 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - IDLE An Integrated Development Environment for Python. IDLE is a basic editor and interpreter envi-
  Cluster 29
    124-30 - 125.98 - 423.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ronment which ships with the standard distribution of Python.
  Cluster 30
    124-31 - 93.6 - 401.1 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - immutable An object with a ﬁxed value. Immutable objects include numbers, strings and tuples. Such an
  Cluster 31
    124-32 - 125.98 - 385.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object cannot be altered. A new object has to be created if a diﬀerent value has to be stored. They
  Cluster 32
    124-33 - 125.98 - 370.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - play an important role in places where a constant hash value is needed, for example as a key in a
  Cluster 33
    124-34 - 125.98 - 354.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - dictionary.
  Cluster 34
    124-35 - 93.6 - 332.46 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - import path A list of locations (or path entries) that are searched by the path based ﬁnder for modules to
  Cluster 35
    124-36 - 125.98 - 316.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - import. During import, this list of locations usually comes from sys.path, but for subpackages it may
  Cluster 36
    124-37 - 125.98 - 301.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - also come from the parent package’s __path__ attribute.
  Cluster 37
    124-38 - 93.6 - 279.36 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - importing The process by which Python code in one module is made available to Python code in another
  Cluster 38
    124-39 - 125.98 - 263.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module.
  Cluster 39
    124-40 - 93.6 - 241.8 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - importer An object that both ﬁnds and loads a module; both a ﬁnder and loader object.
  Cluster 40
    124-41 - 93.6 - 219.79 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - interactive Python has an interactive interpreter which means you can enter statements and expressions
  Cluster 41
    124-42 - 125.98 - 204.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - at the interpreter prompt, immediately execute them and see their results. Just launch python with
  Cluster 42
    124-43 - 125.98 - 188.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - no arguments (possibly by selecting it from your computer’s main menu). It is a very powerful way to
  Cluster 43
    124-44 - 125.98 - 173.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - test out new ideas or inspect modules and packages (remember help(x)).
  Cluster 44
    124-45 - 93.6 - 151.14 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - interpreted Python is an interpreted language, as opposed to a compiled one, though the distinction can
  Cluster 45
    124-46 - 125.98 - 135.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - be blurry because of the presence of the bytecode compiler. This means that source ﬁles can be run
  Cluster 46
    124-47 - 125.98 - 120.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - directly without explicitly creating an executable which is then run. Interpreted languages typically
  Cluster 47
    124-48 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 118 Appendix A. Glossary
Page 125
  Cluster 0
    125-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    125-2 - 125.98 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - have a shorter development/debug cycle than compiled ones, though their programs generally also run
  Cluster 2
    125-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - more slowly. See also interactive.
  Cluster 3
    125-4 - 93.6 - 885.5 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - interpreter shutdown When asked to shut down, the Python interpreter enters a special phase where it
  Cluster 4
    125-5 - 125.98 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - gradually releases all allocated resources, such as modules and various critical internal structures. It
  Cluster 5
    125-6 - 125.98 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - also makes several calls to the garbage collector. This can trigger the execution of code in user-deﬁned
  Cluster 6
    125-7 - 125.98 - 838.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - destructors or weakref callbacks. Code executed during the shutdown phase can encounter various
  Cluster 7
    125-8 - 125.98 - 823.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - exceptions as the resources it relies on may not function anymore (common examples are library
  Cluster 8
    125-9 - 125.98 - 807.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - modules or the warnings machinery).
  Cluster 9
    125-10 - 125.98 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The main reason for interpreter shutdown is that the __main__ module or the script being run has
  Cluster 10
    125-11 - 125.98 - 770.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁnished executing.
  Cluster 11
    125-12 - 93.6 - 748.2 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - iterable An object capable of returning its members one at a time. Examples of iterables include all
  Cluster 12
    125-13 - 125.98 - 732.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sequence types (such as list, str, and tuple) and some non-sequence types like dict, ﬁle objects,
  Cluster 13
    125-14 - 125.98 - 717.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and objects of any classes you deﬁne with an __iter__() method or with a __getitem__() method
  Cluster 14
    125-15 - 125.98 - 701.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - that implements Sequence semantics.
  Cluster 15
    125-16 - 125.98 - 679.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Iterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(),
  Cluster 16
    125-17 - 125.98 - 664.01 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - …). When an iterable object is passed as an argument to the built-in function iter(), it returns an
  Cluster 17
    125-18 - 125.98 - 648.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - iterator for the object. This iterator is good for one pass over the set of values. When using iterables,
  Cluster 18
    125-19 - 125.98 - 632.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - it is usually not necessary to call iter() or deal with iterator objects yourself. The for statement
  Cluster 19
    125-20 - 125.98 - 617.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - does that automatically for you, creating a temporary unnamed variable to hold the iterator for the
  Cluster 20
    125-21 - 125.98 - 601.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - duration of the loop. See also iterator, sequence, and generator.
  Cluster 21
    125-22 - 93.6 - 579.84 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - iterator An object representing a stream of data. Repeated calls to the iterator’s __next__() method
  Cluster 22
    125-23 - 125.98 - 564.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (or passing it to the built-in function next()) return successive items in the stream. When no more
  Cluster 23
    125-24 - 125.98 - 548.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - data are available a StopIteration exception is raised instead. At this point, the iterator object is
  Cluster 24
    125-25 - 125.98 - 533.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - exhausted and any further calls to its __next__() method just raise StopIteration again. Iterators
  Cluster 25
    125-26 - 125.98 - 517.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are required to have an __iter__() method that returns the iterator object itself so every iterator is
  Cluster 26
    125-27 - 125.98 - 502.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - also iterable and may be used in most places where other iterables are accepted. One notable exception
  Cluster 27
    125-28 - 125.98 - 486.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is code which attempts multiple iteration passes. A container object (such as a list) produces a fresh
  Cluster 28
    125-29 - 125.98 - 471.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - new iterator each time you pass it to the iter() function or use it in a for loop. Attempting this
  Cluster 29
    125-30 - 125.98 - 455.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with an iterator will just return the same exhausted iterator object used in the previous iteration pass,
  Cluster 30
    125-31 - 125.98 - 439.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - making it appear like an empty container.
  Cluster 31
    125-32 - 125.98 - 417.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - More information can be found in typeiter.
  Cluster 32
    125-33 - 93.6 - 395.93 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - key function A key function or collation function is a callable that returns a value used for sorting or
  Cluster 33
    125-34 - 125.98 - 380.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ordering. For example, locale.strxfrm() is used to produce a sort key that is aware of locale speciﬁc
  Cluster 34
    125-35 - 125.98 - 364.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sort conventions.
  Cluster 35
    125-36 - 125.98 - 342.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A number of tools in Python accept key functions to control how elements are ordered or grouped.
  Cluster 36
    125-37 - 125.98 - 327.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - They include min(), max(), sorted(), list.sort(), heapq.merge(), heapq.nsmallest(), heapq.
  Cluster 37
    125-38 - 125.98 - 311.74 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - nlargest(), and itertools.groupby().
  Cluster 38
    125-39 - 125.98 - 289.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - There are several ways to create a key function. For example. the str.lower() method can serve
  Cluster 39
    125-40 - 125.98 - 274.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as a key function for case insensitive sorts. Alternatively, a key function can be built from a lambda
  Cluster 40
    125-41 - 125.98 - 258.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - expression such as lambda r: (r[0], r[2]). Also, the operator module provides three key function
  Cluster 41
    125-42 - 125.98 - 243.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - constructors: attrgetter(), itemgetter(), and methodcaller(). See the Sorting HOW TO for
  Cluster 42
    125-43 - 125.98 - 227.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - examples of how to create and use key functions.
  Cluster 43
    125-44 - 93.6 - 205.54 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - keyword argument See argument.
  Cluster 44
    125-45 - 93.6 - 183.52 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - lambda An anonymous inline function consisting of a single expression which is evaluated when the function
  Cluster 45
    125-46 - 125.98 - 167.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is called. The syntax to create a lambda function is lambda [parameters]: expression
  Cluster 46
    125-47 - 93.6 - 145.96 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - LBYL Look before you leap. This coding style explicitly tests for pre-conditions before making calls or
  Cluster 47
    125-48 - 125.98 - 130.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - lookups. This style contrasts with the EAFP approach and is characterized by the presence of many
  Cluster 48
    125-49 - 125.98 - 114.88 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - if statements.
  Cluster 49
    125-50 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 119
Page 126
  Cluster 0
    126-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    126-2 - 125.98 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In a multi-threaded environment, the LBYL approach can risk introducing a race condition between
  Cluster 2
    126-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - “the looking” and “the leaping”. For example, the code, if key in mapping: return mapping[key]
  Cluster 3
    126-4 - 125.98 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can fail if another thread removes key from mapping after the test, but before the lookup. This issue
  Cluster 4
    126-5 - 125.98 - 876.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can be solved with locks or by using the EAFP approach.
  Cluster 5
    126-6 - 93.6 - 854.41 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - list A built-in Python sequence. Despite its name it is more akin to an array in other languages than to a
  Cluster 6
    126-7 - 125.98 - 838.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - linked list since access to elements is O(1).
  Cluster 7
    126-8 - 93.6 - 816.84 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - list comprehension A compact way to process all or part of the elements in a sequence and return a list
  Cluster 8
    126-9 - 125.98 - 801.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with the results. result = ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0] generates
  Cluster 9
    126-10 - 125.98 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a list of strings containing even hex numbers (0x..) in the range from 0 to 255. The if clause is
  Cluster 10
    126-11 - 125.98 - 770.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - optional. If omitted, all elements in range(256) are processed.
  Cluster 11
    126-12 - 93.6 - 748.2 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - loader An object that loads a module. It must deﬁne a method named load_module(). A loader is typically
  Cluster 12
    126-13 - 125.98 - 732.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - returned by a ﬁnder. See PEP 302 for details and importlib.abc.Loader for an abstract base class.
  Cluster 13
    126-14 - 93.6 - 710.64 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - mapping A container object that supports arbitrary key lookups and implements the methods speciﬁed
  Cluster 14
    126-15 - 125.98 - 695.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - in the Mapping or MutableMapping abstract base classes. Examples include dict, collections.
  Cluster 15
    126-16 - 125.98 - 679.56 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - defaultdict, collections.OrderedDict and collections.Counter.
  Cluster 16
    126-17 - 93.6 - 657.54 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - meta path ﬁnder A ﬁnder returned by a search of sys.meta_path. Meta path ﬁnders are related to, but
  Cluster 17
    126-18 - 125.98 - 642.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - diﬀerent from path entry ﬁnders.
  Cluster 18
    126-19 - 125.98 - 619.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See importlib.abc.MetaPathFinder for the methods that meta path ﬁnders implement.
  Cluster 19
    126-20 - 93.6 - 597.97 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - metaclass The class of a class. Class deﬁnitions create a class name, a class dictionary, and a list of base
  Cluster 20
    126-21 - 125.98 - 582.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - classes. The metaclass is responsible for taking those three arguments and creating the class. Most
    126-21 - 125.98 - 566.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object oriented programming languages provide a default implementation. What makes Python special
  Cluster 21
    126-22 - 125.98 - 551.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is that it is possible to create custom metaclasses. Most users never need this tool, but when the need
  Cluster 22
    126-23 - 125.98 - 535.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - arises, metaclasses can provide powerful, elegant solutions. They have been used for logging attribute
  Cluster 23
    126-24 - 125.98 - 520.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - access, adding thread-safety, tracking object creation, implementing singletons, and many other tasks.
  Cluster 24
    126-25 - 125.98 - 498.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - More information can be found in metaclasses.
  Cluster 25
    126-26 - 93.6 - 476.23 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - method A function which is deﬁned inside a class body. If called as an attribute of an instance of that
  Cluster 26
    126-27 - 125.98 - 460.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - class, the method will get the instance object as its ﬁrst argument (which is usually called self). See
  Cluster 27
    126-28 - 125.98 - 445.15 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - function and nested scope.
  Cluster 28
    126-29 - 93.6 - 423.12 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - method resolution order Method Resolution Order is the order in which base classes are searched for
  Cluster 29
    126-30 - 125.98 - 407.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - a member during lookup. See The Python 2.3 Method Resolution Order for details of the algorithm
  Cluster 30
    126-31 - 125.98 - 392.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - used by the Python interpreter since the 2.3 release.
  Cluster 31
    126-32 - 93.6 - 370.02 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - module An object that serves as an organizational unit of Python code. Modules have a namespace
  Cluster 32
    126-33 - 125.98 - 354.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - containing arbitrary Python objects. Modules are loaded into Python by the process of importing.
  Cluster 33
    126-34 - 93.6 - 310.44 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - module spec A namespace containing the import-related information used to load a module. An instance

    =====
    126-34 - 125.98 - 332.46 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See also package.
  Cluster 34
    126-35 - 125.98 - 294.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of importlib.machinery.ModuleSpec.
  Cluster 35
    126-36 - 93.6 - 272.88 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - MRO See method resolution order.
  Cluster 36
    126-37 - 93.6 - 250.87 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - mutable Mutable objects can change their value but keep their id(). See also immutable.
  Cluster 37
    126-38 - 93.6 - 228.85 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - named tuple Any tuple-like class whose indexable elements are also accessible using named attributes (for
  Cluster 38
    126-39 - 125.98 - 213.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - example, time.localtime() returns a tuple-like object where the year is accessible either with an
  Cluster 39
    126-40 - 125.98 - 197.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - index such as t[0] or with a named attribute like t.tm_year).
  Cluster 40
    126-41 - 125.98 - 175.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - A named tuple can be a built-in type such as time.struct_time, or it can be created with a regular
  Cluster 41
    126-42 - 125.98 - 160.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - class deﬁnition. A full featured named tuple can also be created with the factory function collections.
  Cluster 42
    126-43 - 125.98 - 144.66 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - namedtuple(). The latter approach automatically provides extra features such as a self-documenting
  Cluster 43
    126-44 - 125.98 - 129.13 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - representation like Employee(name='jones', title='programmer').
  Cluster 44
    126-45 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 120 Appendix A. Glossary
Page 127
  Cluster 0
    127-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    127-2 - 93.6 - 923.05 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - namespace The place where a variable is stored. Namespaces are implemented as dictionaries. There
  Cluster 2
    127-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - are the local, global and built-in namespaces as well as nested namespaces in objects (in methods).
  Cluster 3
    127-4 - 125.98 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Namespaces support modularity by preventing naming conﬂicts. For instance, the functions builtins.
  Cluster 4
    127-5 - 125.98 - 876.42 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - open and os.open() are distinguished by their namespaces. Namespaces also aid readability and
  Cluster 5
    127-6 - 125.98 - 860.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - maintainability by making it clear which module implements a function. For instance, writing random.
  Cluster 6
    127-7 - 125.98 - 845.34 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - seed() or itertools.islice() makes it clear that those functions are implemented by the random
  Cluster 7
    127-8 - 125.98 - 829.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and itertools modules, respectively.
  Cluster 8
    127-9 - 93.6 - 807.78 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - namespace package A PEP 420 package which serves only as a container for subpackages. Namespace
  Cluster 9
    127-10 - 125.98 - 792.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - packages may have no physical representation, and speciﬁcally are not like a regular package because
  Cluster 10
    127-11 - 125.98 - 776.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - they have no __init__.py ﬁle.
  Cluster 11
    127-12 - 125.98 - 754.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See also module.
  Cluster 12
    127-13 - 93.6 - 732.67 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - nested scope The ability to refer to a variable in an enclosing deﬁnition. For instance, a function deﬁned
  Cluster 13
    127-14 - 125.98 - 717.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - inside another function can refer to variables in the outer function. Note that nested scopes by default
  Cluster 14
    127-15 - 125.98 - 701.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - work only for reference and not for assignment. Local variables both read and write in the innermost
  Cluster 15
    127-16 - 125.98 - 686.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - scope. Likewise, global variables read and write to the global namespace. The nonlocal allows writing
  Cluster 16
    127-17 - 125.98 - 670.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to outer scopes.
  Cluster 17
    127-18 - 93.6 - 648.48 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - new-style class Old name for the ﬂavor of classes now used for all class objects. In earlier Python ver-
  Cluster 18
    127-19 - 125.98 - 632.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sions, only new-style classes could use Python’s newer, versatile features like __slots__, descriptors,
  Cluster 19
    127-20 - 125.98 - 617.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - properties, __getattribute__(), class methods, and static methods.
  Cluster 20
    127-21 - 93.6 - 595.37 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - object Any data with state (attributes or value) and deﬁned behavior (methods). Also the ultimate base
  Cluster 21
    127-22 - 125.98 - 579.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - class of any new-style class.
  Cluster 22
    127-23 - 93.6 - 557.82 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - package A Python module which can contain submodules or recursively, subpackages. Technically, a pack-
  Cluster 23
    127-24 - 125.98 - 542.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - age is a Python module with an __path__ attribute.
  Cluster 24
    127-25 - 125.98 - 520.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See also regular package and namespace package.
  Cluster 25
    127-26 - 93.6 - 498.24 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - parameter A named entity in a function (or method) deﬁnition that speciﬁes an argument (or in some
  Cluster 26
    127-27 - 125.98 - 482.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - cases, arguments) that the function can accept. There are ﬁve kinds of parameter:
  Cluster 27
    127-28 - 137.92 - 460.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • positional-or-keyword: speciﬁes an argument that can be passed either positionally or as a keyword
  Cluster 28
    127-29 - 154.79 - 445.15 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - argument. This is the default kind of parameter, for example foo and bar in the following:
  Cluster 29
    127-30 - 154.79 - 419.96 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def func(foo, bar=None): ...
  Cluster 30
    127-31 - 137.92 - 389.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • positional-only: speciﬁes an argument that can be supplied only by position. Python has no
  Cluster 31
    127-32 - 154.79 - 373.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - syntax for deﬁning positional-only parameters. However, some built-in functions have positional-
  Cluster 32
    127-33 - 154.79 - 358.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - only parameters (e.g. abs()).
  Cluster 33
    127-34 - 137.92 - 336.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • keyword-only: speciﬁes an argument that can be supplied only by keyword. Keyword-only pa-
  Cluster 34
    127-35 - 154.79 - 320.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - rameters can be deﬁned by including a single var-positional parameter or bare * in the parameter
  Cluster 35
    127-36 - 154.79 - 305.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - list of the function deﬁnition before them, for example kw_only1 and kw_only2 in the following:
  Cluster 36
    127-37 - 154.79 - 279.9 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def func(arg, *, kw_only1, kw_only2): ...
  Cluster 37
    127-38 - 137.92 - 249.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • var-positional: speciﬁes that an arbitrary sequence of positional arguments can be provided (in
  Cluster 38
    127-39 - 154.79 - 233.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - addition to any positional arguments already accepted by other parameters). Such a parameter
  Cluster 39
    127-40 - 154.79 - 218.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can be deﬁned by prepending the parameter name with *, for example args in the following:
  Cluster 40
    127-41 - 154.79 - 192.93 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def func(*args, **kwargs): ...
  Cluster 41
    127-42 - 137.92 - 162.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • var-keyword: speciﬁes that arbitrarily many keyword arguments can be provided (in addition to
  Cluster 42
    127-43 - 154.79 - 146.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - any keyword arguments already accepted by other parameters). Such a parameter can be deﬁned
  Cluster 43
    127-44 - 154.79 - 131.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - by prepending the parameter name with **, for example kwargs in the example above.
  Cluster 44
    127-45 - 125.98 - 109.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Parameters can specify both optional and required arguments, as well as default values for some
  Cluster 45
    127-46 - 125.98 - 93.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - optional arguments.
  Cluster 46
    127-47 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 121
Page 128
  Cluster 0
    128-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    128-2 - 125.98 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See also the argument glossary entry, the FAQ question on the diﬀerence between arguments and
  Cluster 2
    128-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - parameters, the inspect.Parameter class, the function section, and PEP 362.
  Cluster 3
    128-4 - 93.6 - 885.5 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - path entry A single location on the import path which the path based ﬁnder consults to ﬁnd modules for
  Cluster 4
    128-5 - 125.98 - 869.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - importing.
  Cluster 5
    128-6 - 93.6 - 847.92 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - path entry ﬁnder A ﬁnder returned by a callable on sys.path_hooks (i.e. a path entry hook) which knows
  Cluster 6
    128-7 - 125.98 - 832.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - how to locate modules given a path entry.
  Cluster 7
    128-8 - 125.98 - 810.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See importlib.abc.PathEntryFinder for the methods that path entry ﬁnders implement.
  Cluster 8
    128-9 - 93.6 - 788.36 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - path entry hook A callable on the sys.path_hook list which returns a path entry ﬁnder if it knows how
  Cluster 9
    128-10 - 125.98 - 772.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to ﬁnd modules on a speciﬁc path entry.
  Cluster 10
    128-11 - 93.6 - 750.79 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - path based ﬁnder One of the default meta path ﬁnders which searches an import path for modules.
  Cluster 11
    128-12 - 93.6 - 728.78 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - path-like object An object representing a ﬁle system path. A path-like object is either a str or bytes
  Cluster 12
    128-13 - 125.98 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object representing a path, or an object implementing the os.PathLike protocol. An object that
  Cluster 13
    128-14 - 125.98 - 697.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - supports the os.PathLike protocol can be converted to a str or bytes ﬁle system path by calling the
  Cluster 14
    128-15 - 125.98 - 682.15 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - os.fspath() function; os.fsdecode() and os.fsencode() can be used to guarantee a str or bytes
  Cluster 15
    128-16 - 125.98 - 666.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - result instead, respectively. Introduced by PEP 519.
  Cluster 16
    128-17 - 93.6 - 644.59 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - PEP Python Enhancement Proposal. A PEP is a design document providing information to the Python
  Cluster 17
    128-18 - 125.98 - 629.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - community, or describing a new feature for Python or its processes or environment. PEPs should
  Cluster 18
    128-19 - 125.98 - 613.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - provide a concise technical speciﬁcation and a rationale for proposed features.
  Cluster 19
    128-20 - 125.98 - 591.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEPs are intended to be the primary mechanisms for proposing major new features, for collecting com-
  Cluster 20
    128-21 - 125.98 - 575.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - munity input on an issue, and for documenting the design decisions that have gone into Python. The
  Cluster 21
    128-22 - 125.98 - 560.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP author is responsible for building consensus within the community and documenting dissenting
  Cluster 22
    128-23 - 125.98 - 544.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - opinions.
  Cluster 23
    128-24 - 125.98 - 522.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See PEP 1.
  Cluster 24
    128-25 - 93.6 - 500.84 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - portion A set of ﬁles in a single directory (possibly stored in a zip ﬁle) that contribute to a namespace
  Cluster 25
    128-26 - 125.98 - 485.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - package, as deﬁned in PEP 420.
  Cluster 26
    128-27 - 93.6 - 463.27 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - positional argument See argument.
  Cluster 27
    128-28 - 93.6 - 441.26 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - provisional API A provisional API is one which has been deliberately excluded from the standard library’s
  Cluster 28
    128-29 - 125.98 - 425.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - backwards compatibility guarantees. While major changes to such interfaces are not expected, as long
  Cluster 29
    128-30 - 125.98 - 410.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - as they are marked provisional, backwards incompatible changes (up to and including removal of
  Cluster 30
    128-31 - 125.98 - 394.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the interface) may occur if deemed necessary by core developers. Such changes will not be made
  Cluster 31
    128-32 - 125.98 - 379.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - gratuitously – they will occur only if serious fundamental ﬂaws are uncovered that were missed prior
  Cluster 32
    128-33 - 125.98 - 363.55 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - to the inclusion of the API.
  Cluster 33
    128-34 - 125.98 - 341.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Even for provisional APIs, backwards incompatible changes are seen as a “solution of last resort” -
  Cluster 34
    128-35 - 125.98 - 325.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - every attempt will still be made to ﬁnd a backwards compatible resolution to any identiﬁed problems.
  Cluster 35
    128-36 - 125.98 - 303.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This process allows the standard library to continue to evolve over time, without locking in problematic
  Cluster 36
    128-37 - 125.98 - 288.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - design errors for extended periods of time. See PEP 411 for more details.
  Cluster 37
    128-38 - 93.6 - 266.41 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - provisional package See provisional API .
  Cluster 38
    128-39 - 93.6 - 244.4 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - Python 3000 Nickname for the Python 3.x release line (coined long ago when the release of version 3 was
  Cluster 39
    128-40 - 125.98 - 228.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - something in the distant future.) This is also abbreviated “Py3k”.
  Cluster 40
    128-41 - 93.6 - 206.83 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - Pythonic An idea or piece of code which closely follows the most common idioms of the Python language,
  Cluster 41
    128-42 - 125.98 - 191.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - rather than implementing code using concepts common to other languages. For example, a common
  Cluster 42
    128-43 - 125.98 - 175.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - idiom in Python is to loop over all elements of an iterable using a for statement. Many other languages
  Cluster 43
    128-44 - 125.98 - 160.21 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - don’t have this type of construct, so people unfamiliar with Python sometimes use a numerical counter
  Cluster 44
    128-45 - 125.98 - 144.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - instead:
  Cluster 45
    128-46 - 125.98 - 118.64 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for i in range(len(food)):
  Cluster 46
    128-47 - 150.46 - 104.39 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(food[i])
  Cluster 47
    128-48 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 122 Appendix A. Glossary
Page 129
  Cluster 0
    129-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    129-2 - 125.98 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - As opposed to the cleaner, Pythonic method:
  Cluster 2
    129-3 - 125.98 - 897.01 24.89 - ffd - 35.864 - rgb(0, 112, 33) - for piece in food:
  Cluster 3
    129-4 - 150.46 - 882.76 24.89 - ff7 - 35.864 - rgb(0, 112, 33) - print(piece)
  Cluster 4
    129-5 - 93.6 - 852.07 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - qualiﬁed name A dotted name showing the “path” from a module’s global scope to a class, function or
  Cluster 5
    129-6 - 125.98 - 836.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - method deﬁned in that module, as deﬁned in PEP 3155. For top-level functions and classes, the
  Cluster 6
    129-7 - 125.98 - 820.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - qualiﬁed name is the same as the object’s name:
  Cluster 7
    129-8 - 125.98 - 794.96 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> class C:
  Cluster 8
    129-9 - 125.98 - 780.72 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... class D:
  Cluster 9
    129-10 - 125.98 - 766.47 24.89 - ffd - 35.864 - rgb(199, 92, 10) - ... def meth(self):
  Cluster 10
    129-11 - 125.98 - 752.22 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ... pass
  Cluster 11
    129-12 - 125.98 - 737.97 24.82 - ffd - 35.864 - rgb(199, 92, 10) - ...
    129-12 - 125.98 - 723.72 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> C.__qualname__
  Cluster 12
    129-13 - 125.98 - 709.48 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'C'
  Cluster 13
    129-14 - 125.98 - 695.23 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> C.D.__qualname__
  Cluster 14
    129-15 - 125.98 - 680.99 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'C.D'
  Cluster 15
    129-16 - 125.98 - 666.74 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> C.D.meth.__qualname__
  Cluster 16
    129-17 - 125.98 - 652.5 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'C.D.meth'
  Cluster 17
    129-18 - 125.98 - 621.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When used to refer to modules, the fully qualiﬁed name means the entire dotted path to the module,
  Cluster 18
    129-19 - 125.98 - 606.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - including any parent packages, e.g. email.mime.text:
  Cluster 19
    129-20 - 125.98 - 580.23 24.82 - ffd - 35.864 - rgb(199, 92, 10) - >>> import email.mime.text
  Cluster 20
    129-21 - 125.98 - 565.98 24.89 - ffd - 35.864 - rgb(199, 92, 10) - >>> email.mime.text.__name__
    129-21 - 125.98 - 551.73 24.89 - ff7 - 35.864 - rgb(51, 51, 51) - 'email.mime.text'
  Cluster 21
    129-22 - 93.6 - 521.04 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - reference count The number of references to an object. When the reference count of an object drops to
  Cluster 22
    129-23 - 125.98 - 505.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - zero, it is deallocated. Reference counting is generally not visible to Python code, but it is a key element
  Cluster 23
    129-24 - 125.98 - 489.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of the CPython implementation. The sys module deﬁnes a getrefcount() function that programmers
  Cluster 24
    129-25 - 125.98 - 474.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - can call to return the reference count for a particular object.
  Cluster 25
    129-26 - 93.6 - 452.4 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - regular package A traditional package, such as a directory containing an __init__.py ﬁle.
  Cluster 26
    129-27 - 93.6 - 408.36 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - __slots__ A declaration inside a class that saves memory by pre-declaring space for instance attributes

    =====
    129-27 - 125.98 - 430.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See also namespace package.
  Cluster 27
    129-28 - 125.98 - 392.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and eliminating instance dictionaries. Though popular, the technique is somewhat tricky to get right
  Cluster 28
    129-29 - 125.98 - 377.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and is best reserved for rare cases where there are large numbers of instances in a memory-critical
  Cluster 29
    129-30 - 125.98 - 361.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - application.
  Cluster 30
    129-31 - 93.6 - 339.72 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - sequence An iterable which supports eﬃcient element access using integer indices via the __getitem__()
  Cluster 31
    129-32 - 125.98 - 324.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - special method and deﬁnes a __len__() method that returns the length of the sequence. Some built-in
  Cluster 32
    129-33 - 125.98 - 308.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sequence types are list, str, tuple, and bytes. Note that dict also supports __getitem__() and
  Cluster 33
    129-34 - 125.98 - 293.08 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - __len__(), but is considered a mapping rather than a sequence because the lookups use arbitrary
  Cluster 34
    129-35 - 125.98 - 277.55 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - immutable keys rather than integers.
  Cluster 35
    129-36 - 125.98 - 255.53 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The collections.abc.Sequence abstract base class deﬁnes a much richer interface that goes
  Cluster 36
    129-37 - 125.98 - 239.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - beyond just __getitem__() and __len__(), adding count(), index(), __contains__(), and
  Cluster 37
    129-38 - 125.98 - 224.44 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - __reversed__(). Types that implement this expanded interface can be registered explicitly using
  Cluster 38
    129-39 - 125.98 - 208.91 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - register().
  Cluster 39
    129-40 - 93.6 - 186.89 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - single dispatch A form of generic function dispatch where the implementation is chosen based on the type
  Cluster 40
    129-41 - 125.98 - 171.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - of a single argument.
  Cluster 41
    129-42 - 93.6 - 149.33 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - slice An object usually containing a portion of a sequence. A slice is created using the subscript notation, []
  Cluster 42
    129-43 - 125.98 - 133.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - with colons between numbers when several are given, such as in variable_name[1:3:5]. The bracket
  Cluster 43
    129-44 - 125.98 - 118.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - (subscript) notation uses slice objects internally.
  Cluster 44
    129-45 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 123
Page 130
  Cluster 0
    130-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    130-2 - 93.6 - 923.05 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - special method A method that is called implicitly by Python to execute a certain operation on a type,
  Cluster 2
    130-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - such as addition. Such methods have names starting and ending with double underscores. Special
  Cluster 3
    130-4 - 125.98 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - methods are documented in specialnames.
  Cluster 4
    130-5 - 93.6 - 869.95 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - statement A statement is part of a suite (a “block” of code). A statement is either an expression or one of
  Cluster 5
    130-6 - 125.98 - 854.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - several constructs with a keyword, such as if, while or for.
  Cluster 6
    130-7 - 93.6 - 832.39 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - struct sequence A tuple with named elements. Struct sequences expose an interface similar to named
  Cluster 7
    130-8 - 125.98 - 816.84 29.89 - ff6 - 39.852 - rgb(53, 95, 124) - tuple in that elements can either be accessed either by index or as an attribute. However, they do
  Cluster 8
    130-9 - 125.98 - 801.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - not have any of the named tuple methods like _make() or _asdict(). Examples of struct sequences
  Cluster 9
    130-10 - 125.98 - 785.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - include sys.float_info and the return value of os.stat().
  Cluster 10
    130-11 - 93.6 - 763.75 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - text encoding A codec which encodes Unicode strings to bytes.
  Cluster 11
    130-12 - 93.6 - 741.73 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - text ﬁle A ﬁle object able to read and write str objects. Often, a text ﬁle actually accesses a byte-oriented
  Cluster 12
    130-13 - 125.98 - 726.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - datastream and handles the text encoding automatically. Examples of text ﬁles are ﬁles opened in text
  Cluster 13
    130-14 - 125.98 - 710.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - mode ('r' or 'w'), sys.stdin, sys.stdout, and instances of io.StringIO.
  Cluster 14
    130-15 - 125.98 - 688.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See also binary ﬁle for a ﬁle object able to read and write bytes-like objects.
  Cluster 15
    130-16 - 93.6 - 666.61 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - triple-quoted string A string which is bound by three instances of either a quotation mark (“) or an
  Cluster 16
    130-17 - 125.98 - 651.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - apostrophe (‘). While they don’t provide any functionality not available with single-quoted strings,
  Cluster 17
    130-18 - 125.98 - 635.53 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - they are useful for a number of reasons. They allow you to include unescaped single and double quotes
  Cluster 18
    130-19 - 125.98 - 619.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - within a string and they can span multiple lines without the use of the continuation character, making
  Cluster 19
    130-20 - 125.98 - 604.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - them especially useful when writing docstrings.
  Cluster 20
    130-21 - 93.6 - 582.43 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - type The type of a Python object determines what kind of object it is; every object has a type. An object’s
  Cluster 21
    130-22 - 125.98 - 566.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - type is accessible as its __class__ attribute or can be retrieved with type(obj).
  Cluster 22
    130-23 - 93.6 - 544.87 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - type alias A synonym for a type, created by assigning the type to an identiﬁer.
  Cluster 23
    130-24 - 125.98 - 522.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Type aliases are useful for simplifying type hints. For example:
  Cluster 24
    130-25 - 125.98 - 496.82 24.89 - ffd - 35.864 - rgb(0, 112, 33) - from typing import List, Tuple
  Cluster 25
    130-26 - 125.98 - 468.32 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def remove_gray_shades(
  Cluster 26
    130-27 - 150.46 - 439.83 24.82 - ffd - 35.864 - rgb(0, 112, 33) - pass

    =====
    130-27 - 174.94 - 454.08 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - colors: List[Tuple[int, int, int]]) -> List[Tuple[int, int, int]]:
  Cluster 27
    130-28 - 125.98 - 409.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - could be made more readable like this:
  Cluster 28
    130-29 - 125.98 - 383.1 24.89 - ffd - 35.864 - rgb(0, 112, 33) - from typing import List, Tuple
  Cluster 29
    130-30 - 125.98 - 354.61 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Color = Tuple[int, int, int]
  Cluster 30
    130-31 - 125.98 - 326.12 24.89 - ffd - 35.864 - rgb(0, 112, 33) - def remove_gray_shades(colors: List[Color]) -> List[Color]:
  Cluster 31
    130-32 - 150.46 - 311.87 24.82 - ffd - 35.864 - rgb(0, 112, 33) - pass
  Cluster 32
    130-33 - 125.98 - 281.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See typing and PEP 484, which describe this functionality.
  Cluster 33
    130-34 - 93.6 - 259.15 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - type hint An annotation that speciﬁes the expected type for a variable, a class attribute, or a function
  Cluster 34
    130-35 - 125.98 - 243.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - parameter or return value.
  Cluster 35
    130-36 - 125.98 - 221.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Type hints are optional and are not enforced by Python but they are useful to static type analysis
  Cluster 36
    130-37 - 125.98 - 206.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - tools, and aid IDEs with code completion and refactoring.
  Cluster 37
    130-38 - 125.98 - 184.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Type hints of global variables, class attributes, and functions, but not local variables, can be accessed
  Cluster 38
    130-39 - 125.98 - 168.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - using typing.get_type_hints().
  Cluster 39
    130-40 - 125.98 - 146.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See typing and PEP 484, which describe this functionality.
  Cluster 40
    130-41 - 93.6 - 124.46 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - universal newlines A manner of interpreting text streams in which all of the following are recognized as
  Cluster 41
    130-42 - 125.98 - 108.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ending a line: the Unix end-of-line convention '\n', the Windows convention '\r\n', and the old
  Cluster 42
    130-43 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 124 Appendix A. Glossary
Page 131
  Cluster 0
    131-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    131-2 - 125.98 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Macintosh convention '\r'. See PEP 278 and PEP 3116, as well as bytes.splitlines() for an
  Cluster 2
    131-3 - 125.98 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - additional use.
  Cluster 3
    131-4 - 93.6 - 885.5 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - variable annotation An annotation of a variable or a class attribute.
  Cluster 4
    131-5 - 125.98 - 863.47 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - When annotating a variable or a class attribute, assignment is optional:
  Cluster 5
    131-6 - 125.98 - 837.43 24.89 - ffd - 35.864 - rgb(0, 112, 33) - class C:
  Cluster 6
    131-7 - 150.46 - 823.2 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - field: 'annotation'
  Cluster 7
    131-8 - 125.98 - 792.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Variable annotations are usually used for type hints: for example this variable is expected to take int
  Cluster 8
    131-9 - 125.98 - 776.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - values:
  Cluster 9
    131-10 - 125.98 - 750.92 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - count: int = 0
  Cluster 10
    131-11 - 125.98 - 720.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Variable annotation syntax is explained in section annassign.
  Cluster 11
    131-12 - 125.98 - 698.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See function annotation, PEP 484 and PEP 526, which describe this functionality.
  Cluster 12
    131-13 - 93.6 - 676.2 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - virtual environment A cooperatively isolated runtime environment that allows Python users and appli-
  Cluster 13
    131-14 - 125.98 - 660.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - cations to install and upgrade Python distribution packages without interfering with the behaviour of
  Cluster 14
    131-15 - 125.98 - 645.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - other Python applications running on the same system.
  Cluster 15
    131-16 - 125.98 - 623.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See also venv.
  Cluster 16
    131-17 - 93.6 - 601.08 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - virtual machine A computer deﬁned entirely in software. Python’s virtual machine executes the bytecode
  Cluster 17
    131-18 - 125.98 - 585.53 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - emitted by the bytecode compiler.
  Cluster 18
    131-19 - 93.6 - 563.51 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - Zen of Python Listing of Python design principles and philosophies that are helpful in understanding and
  Cluster 19
    131-20 - 125.98 - 547.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - using the language. The listing can be found by typing “import this” at the interactive prompt.
  Cluster 20
    131-21 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 125
Page 132
  Cluster 0
    132-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    132-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 126 Appendix A. Glossary
Page 133
  Cluster 0
    133-1 - 631.63 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - APPENDIX
  Cluster 1
    133-2 - 687.75 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - B
  Cluster 2
    133-3 - 426.97 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - ABOUT THESE DOCUMENTS
  Cluster 3
    133-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - These documents are generated from reStructuredText sources by Sphinx, a document processor speciﬁcally
  Cluster 4
    133-5 - 93.6 - 713.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - written for the Python documentation.
  Cluster 5
    133-6 - 93.6 - 691.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Development of the documentation and its toolchain is an entirely volunteer eﬀort, just like Python itself. If
  Cluster 6
    133-7 - 93.6 - 675.67 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - you want to contribute, please take a look at the reporting-bugs page for information on how to do so. New
  Cluster 7
    133-8 - 93.6 - 660.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - volunteers are always welcome!
  Cluster 8
    133-9 - 93.6 - 638.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Many thanks go to:
  Cluster 9
    133-10 - 109.42 - 616.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Fred L. Drake, Jr., the creator of the original Python documentation toolset and writer of much of the
  Cluster 10
    133-11 - 125.98 - 600.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - content;
  Cluster 11
    133-12 - 109.42 - 578.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • the Docutils project for creating reStructuredText and the Docutils suite;
  Cluster 12
    133-13 - 109.42 - 556.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - • Fredrik Lundh for his Alternative Python Reference project from which Sphinx got many good ideas.
  Cluster 13
    133-14 - 93.6 - 507.19 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - B.1 Contributors to the Python Documentation
  Cluster 14
    133-15 - 93.6 - 470.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Many people have contributed to the Python language, the Python standard library, and the Python docu-
  Cluster 15
    133-16 - 93.6 - 455.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - mentation. See Misc/ACKS in the Python source distribution for a partial list of contributors.
  Cluster 16
    133-17 - 93.6 - 433.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - It is only with the input and contributions of the Python community that Python has such wonderful
  Cluster 17
    133-18 - 93.6 - 417.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - documentation – Thank You!
  Cluster 18
    133-19 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 127
Page 134
  Cluster 0
    134-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    134-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 128 Appendix B. About these documents
Page 135
  Cluster 0
    135-1 - 631.63 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - APPENDIX
  Cluster 1
    135-2 - 688.88 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - C
  Cluster 2
    135-3 - 477.11 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - HISTORY AND LICENSE
  Cluster 3
    135-4 - 93.6 - 721.01 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - C.1 History of the software
  Cluster 4
    135-5 - 93.6 - 683.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, see
  Cluster 5
    135-6 - 93.6 - 668.15 29.89 - ff4 - 39.852 - rgb(55, 112, 99) - https://www.cwi.nl/) in the Netherlands as a successor of a language called ABC. Guido remains Python’s
  Cluster 6
    135-7 - 93.6 - 652.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - principal author, although it includes many contributions from others.
  Cluster 7
    135-8 - 93.6 - 630.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In 1995, Guido continued his work on Python at the Corporation for National Research Initiatives (CNRI,
  Cluster 8
    135-9 - 93.6 - 615.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - see https://www.cnri.reston.va.us/) in Reston, Virginia where he released several versions of the software.
  Cluster 9
    135-10 - 93.6 - 593.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - In May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen
  Cluster 10
    135-11 - 93.6 - 577.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PythonLabs team. In October of the same year, the PythonLabs team moved to Digital Creations (now
  Cluster 11
    135-12 - 93.6 - 561.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Zope Corporation; see http://www.zope.com/). In 2001, the Python Software Foundation (PSF, see https:
  Cluster 12
    135-13 - 93.6 - 546.4 29.89 - ff4 - 39.852 - rgb(55, 112, 99) - //www.python.org/psf/) was formed, a non-proﬁt organization created speciﬁcally to own Python-related
  Cluster 13
    135-14 - 93.6 - 530.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Intellectual Property. Zope Corporation is a sponsoring member of the PSF.
  Cluster 14
    135-15 - 93.6 - 508.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - All Python releases are Open Source (see https://opensource.org/ for the Open Source Deﬁnition). Histor-
  Cluster 15
    135-16 - 93.6 - 493.3 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ically, most, but not all, Python releases have also been GPL-compatible; the table below summarizes the
  Cluster 16
    135-17 - 93.6 - 477.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - various releases.
  Cluster 17
    135-18 - 180.27 - 444.86 28.53 - ff11 - 39.852 - rgb(0, 0, 0) - Release Derived from Year Owner GPL compatible?
  Cluster 18
    135-19 - 180.27 - 428.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 0.9.0 thru 1.2 n/a 1991-1995 CWI yes
    135-19 - 180.27 - 412.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 1.3 thru 1.5.2 1.2 1995-1999 CNRI yes
  Cluster 19
    135-20 - 180.27 - 396.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 1.6 1.5.2 2000 CNRI no
  Cluster 20
    135-21 - 180.27 - 380.63 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 2.0 1.6 2000 BeOpen.com no
    135-21 - 180.27 - 364.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 1.6.1 1.6 2001 CNRI no
  Cluster 21
    135-22 - 180.27 - 348.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 2.1 2.0+1.6.1 2001 PSF no
  Cluster 22
    135-23 - 180.27 - 332.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 2.0.1 2.0+1.6.1 2001 PSF yes
  Cluster 23
    135-24 - 180.27 - 316.38 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 2.1.1 2.1+2.0.1 2001 PSF yes
  Cluster 24
    135-25 - 180.27 - 300.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 2.1.2 2.1.1 2002 PSF yes
  Cluster 25
    135-26 - 180.27 - 284.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 2.1.3 2.1.2 2002 PSF yes
  Cluster 26
    135-27 - 180.27 - 268.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 2.2 and above 2.1.1 2001-now PSF yes
  Cluster 27
    135-28 - 93.6 - 217.7 29.89 - ff3 - 39.852 - rgb(0, 0, 0) - Note: GPL-compatible doesn’t mean that we’re distributing Python under the GPL. All Python licenses,
  Cluster 28
    135-29 - 93.6 - 202.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - unlike the GPL, let you distribute a modiﬁed version without making your changes open source. The GPL-
  Cluster 29
    135-30 - 93.6 - 186.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - compatible licenses make it possible to combine Python with other software that is released under the GPL;
  Cluster 30
    135-31 - 93.6 - 171.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - the others don’t.
  Cluster 31
    135-32 - 93.6 - 133.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Thanks to the many outside volunteers who have worked under Guido’s direction to make these releases
  Cluster 32
    135-33 - 93.6 - 117.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - possible.
  Cluster 33
    135-34 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 129
Page 136
  Cluster 0
    136-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    136-2 - 93.6 - 919.68 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - C.2 Terms and conditions for accessing or otherwise using Python
  Cluster 2
    136-3 - 93.6 - 879.38 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.2.1 PSF LICENSE AGREEMENT FOR PYTHON 3.7.0
  Cluster 3
    136-4 - 93.6 - 848.99 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - 1. This LICENSE AGREEMENT is between the Python Software Foundation ("PSF"), and
  Cluster 4
    136-5 - 113.02 - 833.46 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - the Individual or Organization ("Licensee") accessing and otherwise using Python
  Cluster 5
    136-6 - 113.02 - 817.91 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - 3.7.0 software in source or binary form and its associated documentation.
  Cluster 6
    136-7 - 93.6 - 786.83 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - 2. Subject to the terms and conditions of this License Agreement, PSF hereby
  Cluster 7
    136-8 - 113.02 - 771.29 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
  Cluster 8
    136-9 - 113.02 - 755.74 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - analyze, test, perform and/or display publicly, prepare derivative works,
  Cluster 9
    136-10 - 113.02 - 740.21 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - distribute, and otherwise use Python 3.7.0 alone or in any derivative
  Cluster 10
    136-11 - 113.02 - 724.66 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - version, provided, however, that PSF's License Agreement and PSF's notice of
  Cluster 11
    136-12 - 113.02 - 709.12 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - copyright, i.e., "Copyright © 2001-2018 Python Software Foundation; All Rights
  Cluster 12
    136-13 - 113.02 - 693.58 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - Reserved" are retained in Python 3.7.0 alone or in any derivative version
  Cluster 13
    136-14 - 113.02 - 678.04 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - prepared by Licensee.
  Cluster 14
    136-15 - 93.6 - 646.96 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - 3. In the event Licensee prepares a derivative work that is based on or
  Cluster 15
    136-16 - 113.02 - 631.41 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - incorporates Python 3.7.0 or any part thereof, and wants to make the
  Cluster 16
    136-17 - 113.02 - 615.88 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - derivative work available to others as provided herein, then Licensee hereby
  Cluster 17
    136-18 - 113.02 - 600.33 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - agrees to include in any such work a brief summary of the changes made to Python
  Cluster 18
    136-19 - 113.02 - 584.79 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - 3.7.0.
  Cluster 19
    136-20 - 93.6 - 553.7 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - 4. PSF is making Python 3.7.0 available to Licensee on an "AS IS" basis.
  Cluster 20
    136-21 - 113.02 - 538.16 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
  Cluster 21
    136-22 - 113.02 - 522.61 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
  Cluster 22
    136-23 - 113.02 - 507.08 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
  Cluster 23
    136-24 - 113.02 - 491.53 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - USE OF PYTHON 3.7.0 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
  Cluster 24
    136-25 - 93.6 - 460.45 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - 5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 3.7.0
  Cluster 25
    136-26 - 113.02 - 444.91 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
  Cluster 26
    136-27 - 113.02 - 429.36 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 3.7.0, OR ANY DERIVATIVE
  Cluster 27
    136-28 - 113.02 - 413.83 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
  Cluster 28
    136-29 - 93.6 - 382.75 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - 6. This License Agreement will automatically terminate upon a material breach of
  Cluster 29
    136-30 - 113.02 - 367.2 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - its terms and conditions.
  Cluster 30
    136-31 - 93.6 - 336.12 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - 7. Nothing in this License Agreement shall be deemed to create any relationship
  Cluster 31
    136-32 - 113.02 - 320.58 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - of agency, partnership, or joint venture between PSF and Licensee. This License
  Cluster 32
    136-33 - 113.02 - 305.03 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - Agreement does not grant permission to use PSF trademarks or trade name in a
  Cluster 33
    136-34 - 113.02 - 289.5 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - trademark sense to endorse or promote products or services of Licensee, or any
  Cluster 34
    136-35 - 113.02 - 273.95 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - third party.
  Cluster 35
    136-36 - 93.6 - 242.87 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - 8. By copying, installing or otherwise using Python 3.7.0, Licensee agrees
  Cluster 36
    136-37 - 113.02 - 227.33 27.66 - ff5 - 39.852 - rgb(0, 0, 0) - to be bound by the terms and conditions of this License Agreement.
  Cluster 37
    136-38 - 93.6 - 184.57 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0
  Cluster 38
    136-39 - 93.6 - 154.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1
  Cluster 39
    136-40 - 93.6 - 128.15 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an office at
  Cluster 40
    136-41 - 111.96 - 113.91 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization
  Cluster 41
    136-42 - 583.05 - 97.46 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 42
    136-43 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 130 Appendix C. History and License
Page 137
  Cluster 0
    137-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    137-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    137-3 - 111.96 - 904.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ("Licensee") accessing and otherwise using this software in source or binary
  Cluster 3
    137-4 - 111.96 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - form and its associated documentation ("the Software").
  Cluster 4
    137-5 - 93.6 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 2. Subject to the terms and conditions of this BeOpen Python License Agreement,
  Cluster 5
    137-6 - 111.96 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license
  Cluster 6
    137-7 - 111.96 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - to reproduce, analyze, test, perform and/or display publicly, prepare derivative
  Cluster 7
    137-8 - 111.96 - 819.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - works, distribute, and otherwise use the Software alone or in any derivative
  Cluster 8
    137-9 - 111.96 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - version, provided, however, that the BeOpen Python License is retained in the
  Cluster 9
    137-10 - 111.96 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Software, alone or in any derivative version prepared by Licensee.
  Cluster 10
    137-11 - 93.6 - 762.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 3. BeOpen is making the Software available to Licensee on an "AS IS" basis.
  Cluster 11
    137-12 - 111.96 - 748.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
    137-12 - 111.96 - 733.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
  Cluster 12
    137-13 - 111.96 - 719.58 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
  Cluster 13
    137-14 - 111.96 - 705.34 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
  Cluster 14
    137-15 - 93.6 - 676.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR
  Cluster 15
    137-16 - 111.96 - 662.6 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,
  Cluster 16
    137-17 - 111.96 - 648.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF
  Cluster 17
    137-18 - 111.96 - 634.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ADVISED OF THE POSSIBILITY THEREOF.
  Cluster 18
    137-19 - 93.6 - 605.61 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 5. This License Agreement will automatically terminate upon a material breach of
  Cluster 19
    137-20 - 111.96 - 591.36 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - its terms and conditions.
  Cluster 20
    137-21 - 93.6 - 562.87 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 6. This License Agreement shall be governed by and interpreted in all respects
  Cluster 21
    137-22 - 111.96 - 548.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - by the law of the State of California, excluding conflict of law provisions.
  Cluster 22
    137-23 - 111.96 - 534.38 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Nothing in this License Agreement shall be deemed to create any relationship of
  Cluster 23
    137-24 - 111.96 - 520.13 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - agency, partnership, or joint venture between BeOpen and Licensee. This License
  Cluster 24
    137-25 - 111.96 - 505.88 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Agreement does not grant permission to use BeOpen trademarks or trade names in a
    137-25 - 111.96 - 491.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - trademark sense to endorse or promote products or services of Licensee, or any
    137-25 - 111.96 - 477.39 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - third party. As an exception, the "BeOpen Python" logos available at
  Cluster 25
    137-26 - 111.96 - 463.14 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - http://www.pythonlabs.com/logos.html may be used according to the permissions
  Cluster 26
    137-27 - 111.96 - 448.9 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - granted on that web page.
  Cluster 27
    137-28 - 93.6 - 420.41 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 7. By copying, installing or otherwise using the software, Licensee agrees to be
  Cluster 28
    137-29 - 111.96 - 406.16 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - bound by the terms and conditions of this License Agreement.
  Cluster 29
    137-30 - 93.6 - 355.63 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1
  Cluster 30
    137-31 - 93.6 - 322.26 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 1. This LICENSE AGREEMENT is between the Corporation for National Research
  Cluster 31
    137-32 - 111.96 - 308.01 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191
    137-32 - 111.96 - 293.76 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ("CNRI"), and the Individual or Organization ("Licensee") accessing and
  Cluster 32
    137-33 - 111.96 - 279.51 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - otherwise using Python 1.6.1 software in source or binary form and its
  Cluster 33
    137-34 - 111.96 - 265.26 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - associated documentation.
  Cluster 34
    137-35 - 93.6 - 236.77 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 2. Subject to the terms and conditions of this License Agreement, CNRI hereby
  Cluster 35
    137-36 - 111.96 - 222.53 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
  Cluster 36
    137-37 - 111.96 - 208.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - analyze, test, perform and/or display publicly, prepare derivative works,
    137-37 - 111.96 - 194.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - distribute, and otherwise use Python 1.6.1 alone or in any derivative version,
  Cluster 37
    137-38 - 111.96 - 179.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - provided, however, that CNRI's License Agreement and CNRI's notice of copyright,
  Cluster 38
    137-39 - 111.96 - 165.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - i.e., "Copyright © 1995-2001 Corporation for National Research Initiatives; All
    137-39 - 111.96 - 151.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Rights Reserved" are retained in Python 1.6.1 alone or in any derivative version
  Cluster 39
    137-40 - 111.96 - 137.05 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - prepared by Licensee. Alternately, in lieu of CNRI's License Agreement,
  Cluster 40
    137-41 - 111.96 - 122.8 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Licensee may substitute the following text (omitting the quotes): "Python 1.6.1
  Cluster 41
    137-42 - 111.96 - 108.55 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - is made available subject to the terms and conditions in CNRI's License
  Cluster 42
    137-43 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 43
    137-44 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - C.2. Terms and conditions for accessing or otherwise using Python 131
Page 138
  Cluster 0
    138-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    138-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    138-3 - 111.96 - 904.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Agreement. This Agreement together with Python 1.6.1 may be located on the
  Cluster 3
    138-4 - 111.96 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Internet using the following unique, persistent identifier (known as a handle):
  Cluster 4
    138-5 - 111.96 - 876.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 1895.22/1013. This Agreement may also be obtained from a proxy server on the
  Cluster 5
    138-6 - 111.96 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Internet using the following URL: http://hdl.handle.net/1895.22/1013."
  Cluster 6
    138-7 - 93.6 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 3. In the event Licensee prepares a derivative work that is based on or
  Cluster 7
    138-8 - 111.96 - 819.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - incorporates Python 1.6.1 or any part thereof, and wants to make the derivative
  Cluster 8
    138-9 - 111.96 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - work available to others as provided herein, then Licensee hereby agrees to
  Cluster 9
    138-10 - 111.96 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - include in any such work a brief summary of the changes made to Python 1.6.1.
  Cluster 10
    138-11 - 93.6 - 762.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS" basis. CNRI
  Cluster 11
    138-12 - 111.96 - 748.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,
    138-12 - 111.96 - 733.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY
  Cluster 12
    138-13 - 111.96 - 719.58 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF
  Cluster 13
    138-14 - 111.96 - 705.34 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
  Cluster 14
    138-15 - 93.6 - 676.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR
  Cluster 15
    138-16 - 111.96 - 662.6 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
  Cluster 16
    138-17 - 111.96 - 648.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE
  Cluster 17
    138-18 - 111.96 - 634.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
  Cluster 18
    138-19 - 93.6 - 605.61 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 6. This License Agreement will automatically terminate upon a material breach of
  Cluster 19
    138-20 - 111.96 - 591.36 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - its terms and conditions.
  Cluster 20
    138-21 - 93.6 - 562.87 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 7. This License Agreement shall be governed by the federal intellectual property
  Cluster 21
    138-22 - 111.96 - 548.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - law of the United States, including without limitation the federal copyright
  Cluster 22
    138-23 - 111.96 - 534.38 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - law, and, to the extent such U.S. federal law does not apply, by the law of the
  Cluster 23
    138-24 - 111.96 - 520.13 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Commonwealth of Virginia, excluding Virginia's conflict of law provisions.
  Cluster 24
    138-25 - 111.96 - 505.88 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Notwithstanding the foregoing, with regard to derivative works based on Python
    138-25 - 111.96 - 491.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 1.6.1 that incorporate non-separable material that was previously distributed
    138-25 - 111.96 - 477.39 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - under the GNU General Public License (GPL), the law of the Commonwealth of
  Cluster 25
    138-26 - 111.96 - 463.14 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Virginia shall govern this License Agreement only as to issues arising under or
  Cluster 26
    138-27 - 111.96 - 448.9 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - with respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in
  Cluster 27
    138-28 - 111.96 - 434.65 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - this License Agreement shall be deemed to create any relationship of agency,
  Cluster 28
    138-29 - 111.96 - 420.41 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - partnership, or joint venture between CNRI and Licensee. This License Agreement
    138-29 - 111.96 - 406.16 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - does not grant permission to use CNRI trademarks or trade name in a trademark
    138-29 - 111.96 - 391.91 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - sense to endorse or promote products or services of Licensee, or any third
    138-29 - 111.96 - 377.66 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - party.
  Cluster 29
    138-30 - 93.6 - 349.17 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 8. By clicking on the "ACCEPT" button where indicated, or by copying, installing
  Cluster 30
    138-31 - 111.96 - 334.92 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and
    138-31 - 111.96 - 320.67 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - conditions of this License Agreement.
  Cluster 31
    138-32 - 93.6 - 270.14 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2
  Cluster 32
    138-33 - 93.6 - 236.77 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The
  Cluster 33
    138-34 - 93.6 - 222.53 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Netherlands. All rights reserved.
  Cluster 34
    138-35 - 93.6 - 194.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Permission to use, copy, modify, and distribute this software and its
  Cluster 35
    138-36 - 93.6 - 179.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - documentation for any purpose and without fee is hereby granted, provided that
  Cluster 36
    138-37 - 93.6 - 165.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - the above copyright notice appear in all copies and that both that copyright
    138-37 - 93.6 - 151.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice and this permission notice appear in supporting documentation, and that
  Cluster 37
    138-38 - 93.6 - 137.05 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - the name of Stichting Mathematisch Centrum or CWI not be used in advertising or
  Cluster 38
    138-39 - 93.6 - 122.8 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - publicity pertaining to distribution of the software without specific, written
  Cluster 39
    138-40 - 93.6 - 108.55 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - prior permission.
  Cluster 40
    138-41 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 41
    138-42 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 132 Appendix C. History and License
Page 139
  Cluster 0
    139-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    139-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    139-3 - 93.6 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
  Cluster 3
    139-4 - 93.6 - 876.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
  Cluster 4
    139-5 - 93.6 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT
    139-5 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
  Cluster 5
    139-6 - 93.6 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
  Cluster 6
    139-7 - 93.6 - 819.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
  Cluster 7
    139-8 - 93.6 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - SOFTWARE.
  Cluster 8
    139-9 - 93.6 - 747.92 43.04 - ff1 - 57.384 - rgb(32, 67, 92) - C.3 Licenses and Acknowledgements for Incorporated Software
  Cluster 9
    139-10 - 93.6 - 711.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - This section is an incomplete, but growing list of licenses and acknowledgements for third-party software
  Cluster 10
    139-11 - 93.6 - 695.64 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - incorporated in the Python distribution.
  Cluster 11
    139-12 - 93.6 - 653.74 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.1 Mersenne Twister
  Cluster 12
    139-13 - 93.6 - 623.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The _random module includes code based on a download from http://www.math.sci.hiroshima-u.ac.jp/
  Cluster 13
    139-14 - 93.6 - 607.82 29.89 - ff4 - 39.852 - rgb(55, 112, 99) - ~m-mat/MT/MT2002/emt19937ar.html. The following are the verbatim comments from the original code:
  Cluster 14
    139-15 - 93.6 - 582.78 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - A C-program for MT19937, with initialization improved 2002/1/26.
  Cluster 15
    139-16 - 93.6 - 568.53 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Coded by Takuji Nishimura and Makoto Matsumoto.
  Cluster 16
    139-17 - 93.6 - 540.03 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Before using, initialize the state by using init_genrand(seed)
  Cluster 17
    139-18 - 93.6 - 525.78 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - or init_by_array(init_key, key_length).
  Cluster 18
    139-19 - 93.6 - 497.3 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
  Cluster 19
    139-20 - 93.6 - 483.05 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - All rights reserved.
  Cluster 20
    139-21 - 93.6 - 454.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Redistribution and use in source and binary forms, with or without
  Cluster 21
    139-22 - 93.6 - 440.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - modification, are permitted provided that the following conditions
    139-22 - 93.6 - 426.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - are met:
  Cluster 22
    139-23 - 99.72 - 397.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 1. Redistributions of source code must retain the above copyright
  Cluster 23
    139-24 - 118.08 - 383.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice, this list of conditions and the following disclaimer.
  Cluster 24
    139-25 - 99.72 - 354.83 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 2. Redistributions in binary form must reproduce the above copyright
  Cluster 25
    139-26 - 118.08 - 340.59 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice, this list of conditions and the following disclaimer in the
    139-26 - 118.08 - 326.34 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - documentation and/or other materials provided with the distribution.
  Cluster 26
    139-27 - 99.72 - 297.84 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 3. The names of its contributors may not be used to endorse or promote
  Cluster 27
    139-28 - 118.08 - 283.6 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - products derived from this software without specific prior written
  Cluster 28
    139-29 - 118.08 - 269.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - permission.
  Cluster 29
    139-30 - 93.6 - 240.86 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  Cluster 30
    139-31 - 93.6 - 226.62 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  Cluster 31
    139-32 - 93.6 - 212.37 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  Cluster 32
    139-33 - 93.6 - 198.12 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    139-33 - 93.6 - 183.87 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  Cluster 33
    139-34 - 93.6 - 169.62 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  Cluster 34
    139-35 - 93.6 - 155.38 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  Cluster 35
    139-36 - 93.6 - 141.13 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  Cluster 36
    139-37 - 93.6 - 126.88 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  Cluster 37
    139-38 - 93.6 - 112.64 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  Cluster 38
    139-39 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 39
    139-40 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - C.3. Licenses and Acknowledgements for Incorporated Software 133
Page 140
  Cluster 0
    140-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    140-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    140-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  Cluster 3
    140-4 - 93.6 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Any feedback is very welcome.
  Cluster 4
    140-5 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
  Cluster 5
    140-6 - 93.6 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
  Cluster 6
    140-7 - 93.6 - 782.13 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.2 Sockets
  Cluster 7
    140-8 - 93.6 - 751.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The socket module uses the functions, getaddrinfo(), and getnameinfo(), which are coded in separate
  Cluster 8
    140-9 - 93.6 - 736.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - source ﬁles from the WIDE Project, http://www.wide.ad.jp/.
  Cluster 9
    140-10 - 93.6 - 710.16 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
  Cluster 10
    140-11 - 93.6 - 695.92 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - All rights reserved.
  Cluster 11
    140-12 - 93.6 - 667.42 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Redistribution and use in source and binary forms, with or without
  Cluster 12
    140-13 - 93.6 - 653.17 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - modification, are permitted provided that the following conditions
  Cluster 13
    140-14 - 93.6 - 638.92 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - are met:
  Cluster 14
    140-15 - 93.6 - 624.69 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 1. Redistributions of source code must retain the above copyright
  Cluster 15
    140-16 - 111.96 - 610.44 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice, this list of conditions and the following disclaimer.
  Cluster 16
    140-17 - 93.6 - 596.19 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 2. Redistributions in binary form must reproduce the above copyright
  Cluster 17
    140-18 - 111.96 - 581.95 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice, this list of conditions and the following disclaimer in the
  Cluster 18
    140-19 - 93.6 - 553.45 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 3. Neither the name of the project nor the names of its contributors

    =====
    140-19 - 111.96 - 567.7 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - documentation and/or other materials provided with the distribution.
  Cluster 19
    140-20 - 111.96 - 539.2 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - may be used to endorse or promote products derived from this software
  Cluster 20
    140-21 - 111.96 - 524.95 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - without specific prior written permission.
  Cluster 21
    140-22 - 93.6 - 496.47 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
  Cluster 22
    140-23 - 93.6 - 482.22 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  Cluster 23
    140-24 - 93.6 - 467.97 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    140-24 - 93.6 - 453.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
    140-24 - 93.6 - 439.48 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    140-24 - 93.6 - 425.23 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
    140-24 - 93.6 - 410.98 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  Cluster 24
    140-25 - 93.6 - 396.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  Cluster 25
    140-26 - 93.6 - 382.49 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  Cluster 26
    140-27 - 93.6 - 368.25 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  Cluster 27
    140-28 - 93.6 - 354.0 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - SUCH DAMAGE.
  Cluster 28
    140-29 - 93.6 - 302.57 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.3 Asynchronous socket services
  Cluster 29
    140-30 - 93.6 - 272.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The asynchat and asyncore modules contain the following notice:
  Cluster 30
    140-31 - 93.6 - 246.16 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright 1996 by Sam Rushing
  Cluster 31
    140-32 - 240.47 - 217.66 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - All Rights Reserved
  Cluster 32
    140-33 - 93.6 - 189.16 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Permission to use, copy, modify, and distribute this software and
  Cluster 33
    140-34 - 93.6 - 174.91 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - its documentation for any purpose and without fee is hereby
  Cluster 34
    140-35 - 93.6 - 160.67 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - granted, provided that the above copyright notice appear in all
    140-35 - 93.6 - 146.42 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - copies and that both that copyright notice and this permission
  Cluster 35
    140-36 - 93.6 - 132.17 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice appear in supporting documentation, and that the name of Sam
  Cluster 36
    140-37 - 93.6 - 117.92 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Rushing not be used in advertising or publicity pertaining to
  Cluster 37
    140-38 - 583.05 - 101.48 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 38
    140-39 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 134 Appendix C. History and License
Page 141
  Cluster 0
    141-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    141-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    141-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - distribution of the software without specific, written prior
  Cluster 3
    141-4 - 93.6 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - permission.
  Cluster 4
    141-5 - 93.6 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
  Cluster 5
    141-6 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
  Cluster 6
    141-7 - 93.6 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
  Cluster 7
    141-8 - 93.6 - 819.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
  Cluster 8
    141-9 - 93.6 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
  Cluster 9
    141-10 - 93.6 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
  Cluster 10
    141-11 - 93.6 - 776.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  Cluster 11
    141-12 - 93.6 - 725.14 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.4 Cookie management
  Cluster 12
    141-13 - 93.6 - 694.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The http.cookies module contains the following notice:
  Cluster 13
    141-14 - 93.6 - 668.72 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>
  Cluster 14
    141-15 - 185.39 - 640.22 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - All Rights Reserved
  Cluster 15
    141-16 - 93.6 - 611.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Permission to use, copy, modify, and distribute this software
  Cluster 16
    141-17 - 93.6 - 597.48 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - and its documentation for any purpose and without fee is hereby
  Cluster 17
    141-18 - 93.6 - 583.25 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - granted, provided that the above copyright notice appear in all
  Cluster 18
    141-19 - 93.6 - 569.0 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - copies and that both that copyright notice and this permission
  Cluster 19
    141-20 - 93.6 - 554.75 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice appear in supporting documentation, and that the name of
  Cluster 20
    141-21 - 93.6 - 540.5 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Timothy O'Malley not be used in advertising or publicity
  Cluster 21
    141-22 - 93.6 - 526.25 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - pertaining to distribution of the software without specific, written
  Cluster 22
    141-23 - 93.6 - 512.0 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - prior permission.
  Cluster 23
    141-24 - 93.6 - 483.51 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
  Cluster 24
    141-25 - 93.6 - 469.26 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  Cluster 25
    141-26 - 93.6 - 455.03 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
  Cluster 26
    141-27 - 93.6 - 440.78 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  Cluster 27
    141-28 - 93.6 - 426.53 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
  Cluster 28
    141-29 - 93.6 - 412.28 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
    141-29 - 93.6 - 398.03 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    141-29 - 93.6 - 383.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - PERFORMANCE OF THIS SOFTWARE.
  Cluster 29
    141-30 - 93.6 - 332.36 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.5 Execution tracing
  Cluster 30
    141-31 - 93.6 - 301.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The trace module contains the following notice:
  Cluster 31
    141-32 - 93.6 - 275.94 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
  Cluster 32
    141-33 - 93.6 - 261.69 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - err... reserved and offered to the public under the terms of the
    141-33 - 93.6 - 247.44 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Python 2.2 license.
  Cluster 33
    141-34 - 93.6 - 233.19 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Author: Zooko O'Whielacronx
  Cluster 34
    141-35 - 93.6 - 218.95 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - http://zooko.com/
    141-35 - 93.6 - 204.7 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - mailto:zooko@zooko.com
  Cluster 35
    141-36 - 93.6 - 176.22 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright 2000, Mojam Media, Inc., all rights reserved.
  Cluster 36
    141-37 - 93.6 - 161.97 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Author: Skip Montanaro
  Cluster 37
    141-38 - 93.6 - 133.47 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright 1999, Bioreason, Inc., all rights reserved.
  Cluster 38
    141-39 - 93.6 - 119.22 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Author: Andrew Dalke
  Cluster 39
    141-40 - 583.05 - 102.78 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 40
    141-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - C.3. Licenses and Acknowledgements for Incorporated Software 135
Page 142
  Cluster 0
    142-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    142-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    142-3 - 93.6 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright 1995-1997, Automatrix, Inc., all rights reserved.
  Cluster 3
    142-4 - 93.6 - 876.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Author: Skip Montanaro
  Cluster 4
    142-5 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.
  Cluster 5
    142-6 - 93.6 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Permission to use, copy, modify, and distribute this Python software and
  Cluster 6
    142-7 - 93.6 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - its associated documentation for any purpose without fee is hereby
  Cluster 7
    142-8 - 93.6 - 776.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - granted, provided that the above copyright notice appears in all copies,
  Cluster 8
    142-9 - 93.6 - 762.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - and that both that copyright notice and this permission notice appear in
  Cluster 9
    142-10 - 93.6 - 748.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - supporting documentation, and that the name of neither Automatrix,
    142-10 - 93.6 - 733.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Bioreason or Mojam Media be used in advertising or publicity pertaining to
  Cluster 10
    142-11 - 93.6 - 719.58 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - distribution of the software without specific, written prior permission.
  Cluster 11
    142-12 - 93.6 - 668.16 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.6 UUencode and UUdecode functions
  Cluster 12
    142-13 - 93.6 - 637.77 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The uu module contains the following notice:
  Cluster 13
    142-14 - 93.6 - 611.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright 1994 by Lance Ellinghouse
  Cluster 14
    142-15 - 93.6 - 597.48 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Cathedral City, California Republic, United States of America.
  Cluster 15
    142-16 - 234.35 - 583.25 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - All Rights Reserved
  Cluster 16
    142-17 - 93.6 - 569.0 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Permission to use, copy, modify, and distribute this software and its
  Cluster 17
    142-18 - 93.6 - 554.75 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - documentation for any purpose and without fee is hereby granted,
  Cluster 18
    142-19 - 93.6 - 540.5 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - provided that the above copyright notice appear in all copies and that
  Cluster 19
    142-20 - 93.6 - 526.25 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - both that copyright notice and this permission notice appear in
  Cluster 20
    142-21 - 93.6 - 512.0 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - supporting documentation, and that the name of Lance Ellinghouse
  Cluster 21
    142-22 - 93.6 - 497.76 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - not be used in advertising or publicity pertaining to distribution
    142-22 - 93.6 - 483.51 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - of the software without specific, written prior permission.
    142-22 - 93.6 - 469.26 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
  Cluster 22
    142-23 - 93.6 - 455.03 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
  Cluster 23
    142-24 - 93.6 - 440.78 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
  Cluster 24
    142-25 - 93.6 - 426.53 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  Cluster 25
    142-26 - 93.6 - 412.28 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    142-26 - 93.6 - 398.03 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
    142-26 - 93.6 - 383.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  Cluster 26
    142-27 - 93.6 - 355.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Modified by Jack Jansen, CWI, July 1995:
  Cluster 27
    142-28 - 93.6 - 341.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - - Use binascii module to do the actual line-by-line conversion
  Cluster 28
    142-29 - 105.83 - 326.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - between ascii and binary. This results in a 1000-fold speedup. The C
  Cluster 29
    142-30 - 105.83 - 312.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - version is still 5 times faster, though.
  Cluster 30
    142-31 - 93.6 - 298.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - - Arguments more compliant with Python standard
  Cluster 31
    142-32 - 93.6 - 246.88 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.7 XML Remote Procedure Calls
  Cluster 32
    142-33 - 93.6 - 216.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The xmlrpc.client module contains the following notice:
  Cluster 33
    142-34 - 118.08 - 190.46 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - The XML-RPC client interface is
  Cluster 34
    142-35 - 93.6 - 161.97 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (c) 1999-2002 by Secret Labs AB
  Cluster 35
    142-36 - 93.6 - 147.72 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (c) 1999-2002 by Fredrik Lundh
  Cluster 36
    142-37 - 93.6 - 119.22 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - By obtaining, using, and/or copying this software and/or its
  Cluster 37
    142-38 - 583.05 - 102.78 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 38
    142-39 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 136 Appendix C. History and License
Page 143
  Cluster 0
    143-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    143-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    143-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - associated documentation, you agree that you have read, understood,
  Cluster 3
    143-4 - 93.6 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - and will comply with the following terms and conditions:
  Cluster 4
    143-5 - 93.6 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Permission to use, copy, modify, and distribute this software and
  Cluster 5
    143-6 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - its associated documentation for any purpose and without fee is
  Cluster 6
    143-7 - 93.6 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - hereby granted, provided that the above copyright notice appears in
  Cluster 7
    143-8 - 93.6 - 819.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - all copies, and that both that copyright notice and this permission
  Cluster 8
    143-9 - 93.6 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice appear in supporting documentation, and that the name of
  Cluster 9
    143-10 - 93.6 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Secret Labs AB or the author not be used in advertising or publicity
  Cluster 10
    143-11 - 93.6 - 776.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - pertaining to distribution of the software without specific, written
  Cluster 11
    143-12 - 93.6 - 762.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - prior permission.
  Cluster 12
    143-13 - 93.6 - 733.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
  Cluster 13
    143-14 - 93.6 - 719.58 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
  Cluster 14
    143-15 - 93.6 - 705.34 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
  Cluster 15
    143-16 - 93.6 - 691.09 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
  Cluster 16
    143-17 - 93.6 - 676.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
  Cluster 17
    143-18 - 93.6 - 662.6 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
  Cluster 18
    143-19 - 93.6 - 648.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
  Cluster 19
    143-20 - 93.6 - 634.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OF THIS SOFTWARE.
  Cluster 20
    143-21 - 93.6 - 582.67 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.8 test_epoll
  Cluster 21
    143-22 - 93.6 - 552.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The test_epoll module contains the following notice:
  Cluster 22
    143-23 - 93.6 - 526.25 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (c) 2001-2006 Twisted Matrix Laboratories.
  Cluster 23
    143-24 - 93.6 - 497.76 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Permission is hereby granted, free of charge, to any person obtaining
  Cluster 24
    143-25 - 93.6 - 483.51 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - a copy of this software and associated documentation files (the
    143-25 - 93.6 - 469.26 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - "Software"), to deal in the Software without restriction, including
  Cluster 25
    143-26 - 93.6 - 455.03 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - without limitation the rights to use, copy, modify, merge, publish,
  Cluster 26
    143-27 - 93.6 - 440.78 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - distribute, sublicense, and/or sell copies of the Software, and to
  Cluster 27
    143-28 - 93.6 - 426.53 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - permit persons to whom the Software is furnished to do so, subject to
  Cluster 28
    143-29 - 93.6 - 412.28 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - the following conditions:
  Cluster 29
    143-30 - 93.6 - 383.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - The above copyright notice and this permission notice shall be
  Cluster 30
    143-31 - 93.6 - 369.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - included in all copies or substantial portions of the Software.
  Cluster 31
    143-32 - 93.6 - 341.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  Cluster 32
    143-33 - 93.6 - 326.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  Cluster 33
    143-34 - 93.6 - 312.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  Cluster 34
    143-35 - 93.6 - 298.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  Cluster 35
    143-36 - 93.6 - 284.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    143-36 - 93.6 - 269.81 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    143-36 - 93.6 - 255.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  Cluster 36
    143-37 - 93.6 - 204.14 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.9 Select kqueue
  Cluster 37
    143-38 - 93.6 - 173.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The select module contains the following notice for the kqueue interface:
  Cluster 38
    143-39 - 93.6 - 147.72 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
  Cluster 39
    143-40 - 93.6 - 133.47 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - All rights reserved.
  Cluster 40
    143-41 - 583.05 - 102.78 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 41
    143-42 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - C.3. Licenses and Acknowledgements for Incorporated Software 137
Page 144
  Cluster 0
    144-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    144-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    144-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Redistribution and use in source and binary forms, with or without
  Cluster 3
    144-4 - 93.6 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - modification, are permitted provided that the following conditions
  Cluster 4
    144-5 - 93.6 - 876.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - are met:
  Cluster 5
    144-6 - 93.6 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 1. Redistributions of source code must retain the above copyright

    =====
    144-6 - 111.96 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice, this list of conditions and the following disclaimer.
  Cluster 6
    144-7 - 93.6 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 2. Redistributions in binary form must reproduce the above copyright
  Cluster 7
    144-8 - 111.96 - 819.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice, this list of conditions and the following disclaimer in the
  Cluster 8
    144-9 - 111.96 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - documentation and/or other materials provided with the distribution.
  Cluster 9
    144-10 - 93.6 - 776.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  Cluster 10
    144-11 - 93.6 - 762.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  Cluster 11
    144-12 - 93.6 - 748.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    144-12 - 93.6 - 733.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  Cluster 12
    144-13 - 93.6 - 719.58 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  Cluster 13
    144-14 - 93.6 - 705.34 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  Cluster 14
    144-15 - 93.6 - 691.09 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  Cluster 15
    144-16 - 93.6 - 676.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  Cluster 16
    144-17 - 93.6 - 662.6 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  Cluster 17
    144-18 - 93.6 - 648.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  Cluster 18
    144-19 - 93.6 - 634.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - SUCH DAMAGE.
  Cluster 19
    144-20 - 93.6 - 582.67 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.10 SipHash24
  Cluster 20
    144-21 - 93.6 - 552.28 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The ﬁle Python/pyhash.c contains Marek Majkowski’ implementation of Dan Bernstein’s SipHash24 algo-
  Cluster 21
    144-22 - 93.6 - 536.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - rithm. The contains the following note:
  Cluster 22
    144-23 - 93.6 - 510.7 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - <MIT License>
  Cluster 23
    144-24 - 93.6 - 496.47 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (c) 2013 Marek Majkowski <marek@popcount.org>
  Cluster 24
    144-25 - 93.6 - 467.97 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Permission is hereby granted, free of charge, to any person obtaining a copy
  Cluster 25
    144-26 - 93.6 - 453.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - of this software and associated documentation files (the "Software"), to deal
    144-26 - 93.6 - 439.48 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - in the Software without restriction, including without limitation the rights
    144-26 - 93.6 - 425.23 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    144-26 - 93.6 - 410.98 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - copies of the Software, and to permit persons to whom the Software is
  Cluster 26
    144-27 - 93.6 - 396.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - furnished to do so, subject to the following conditions:
  Cluster 27
    144-28 - 93.6 - 368.25 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - The above copyright notice and this permission notice shall be included in
  Cluster 28
    144-29 - 93.6 - 354.0 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - all copies or substantial portions of the Software.
    144-29 - 93.6 - 339.75 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - </MIT License>
  Cluster 29
    144-30 - 93.6 - 311.26 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Original location:
  Cluster 30
    144-31 - 111.96 - 297.01 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - https://github.com/majek/csiphash/
  Cluster 31
    144-32 - 93.6 - 268.51 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Solution inspired by code from:
  Cluster 32
    144-33 - 111.96 - 254.27 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Samuel Neves (supercop/crypto_auth/siphash24/little)
  Cluster 33
    144-34 - 111.96 - 240.03 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - djb (supercop/crypto_auth/siphash24/little2)
  Cluster 34
    144-35 - 111.96 - 225.78 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Jean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)
  Cluster 35
    144-36 - 93.6 - 174.36 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.11 strtod and dtoa
  Cluster 36
    144-37 - 93.6 - 143.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The ﬁle Python/dtoa.c, which supplies C functions dtoa and strtod for conversion of C doubles to and
  Cluster 37
    144-38 - 93.6 - 128.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - from strings, is derived from the ﬁle of the same name by David M. Gay, currently available from http:
  Cluster 38
    144-39 - 93.6 - 112.88 29.89 - ff4 - 39.852 - rgb(55, 112, 99) - //www.netlib.org/fp/. The original ﬁle, as retrieved on March 16, 2009, contains the following copyright
  Cluster 39
    144-40 - 93.6 - 97.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - and licensing notice:
  Cluster 40
    144-41 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 138 Appendix C. History and License
Page 145
  Cluster 0
    145-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    145-2 - 93.6 - 916.45 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - /****************************************************************
  Cluster 2
    145-3 - 99.72 - 902.2 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 3
    145-4 - 99.72 - 887.95 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * The author of this software is David M. Gay.
    145-4 - 99.72 - 873.7 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 4
    145-5 - 99.72 - 859.46 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
  Cluster 5
    145-6 - 99.72 - 845.21 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 6
    145-7 - 99.72 - 830.96 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * Permission to use, copy, modify, and distribute this software for any
  Cluster 7
    145-8 - 99.72 - 816.71 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * purpose without fee is hereby granted, provided that this entire notice
  Cluster 8
    145-9 - 99.72 - 802.48 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * is included in all copies of any software which is or includes a copy
  Cluster 9
    145-10 - 99.72 - 788.23 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * or modification of this software and in all copies of the supporting
  Cluster 10
    145-11 - 99.72 - 773.98 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * documentation for such software.
    145-11 - 99.72 - 759.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 11
    145-12 - 99.72 - 745.49 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
  Cluster 12
    145-13 - 99.72 - 731.24 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
  Cluster 13
    145-14 - 99.72 - 716.99 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
  Cluster 14
    145-15 - 99.72 - 702.74 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
  Cluster 15
    145-16 - 99.72 - 688.49 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 16
    145-17 - 99.72 - 674.26 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ***************************************************************/
  Cluster 17
    145-18 - 93.6 - 623.71 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.12 OpenSSL
  Cluster 18
    145-19 - 93.6 - 593.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The modules hashlib, posix, ssl, crypt use the OpenSSL library for added performance if made available
  Cluster 19
    145-20 - 93.6 - 577.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - by the operating system. Additionally, the Windows and Mac OS X installers for Python may include a
  Cluster 20
    145-21 - 93.6 - 562.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - copy of the OpenSSL libraries, so we include a copy of the OpenSSL license here:
  Cluster 21
    145-22 - 99.72 - 537.25 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - LICENSE ISSUES
  Cluster 22
    145-23 - 99.72 - 523.0 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ==============
  Cluster 23
    145-24 - 99.72 - 494.51 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - The OpenSSL toolkit stays under a dual license, i.e. both the conditions of
  Cluster 24
    145-25 - 99.72 - 480.26 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - the OpenSSL License and the original SSLeay license apply to the toolkit.
    145-25 - 99.72 - 466.01 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - See below for the actual license texts. Actually both licenses are BSD-style
  Cluster 25
    145-26 - 99.72 - 451.76 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Open Source licenses. In case of any license issues related to OpenSSL
  Cluster 26
    145-27 - 99.72 - 437.53 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - please contact openssl-core@openssl.org.
  Cluster 27
    145-28 - 99.72 - 409.03 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OpenSSL License
  Cluster 28
    145-29 - 99.72 - 394.78 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ---------------
  Cluster 29
    145-30 - 111.96 - 366.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - /* ====================================================================
  Cluster 30
    145-31 - 118.08 - 352.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * Copyright (c) 1998-2008 The OpenSSL Project. All rights reserved.
  Cluster 31
    145-32 - 118.08 - 337.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 32
    145-33 - 118.08 - 323.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * Redistribution and use in source and binary forms, with or without
    145-33 - 118.08 - 309.3 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * modification, are permitted provided that the following conditions
  Cluster 33
    145-34 - 118.08 - 295.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * are met:
  Cluster 34
    145-35 - 118.08 - 280.81 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
    145-35 - 118.08 - 266.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * 1. Redistributions of source code must retain the above copyright
    145-35 - 118.08 - 252.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * notice, this list of conditions and the following disclaimer.
  Cluster 35
    145-36 - 118.08 - 238.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 36
    145-37 - 118.08 - 223.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * 2. Redistributions in binary form must reproduce the above copyright
    145-37 - 118.08 - 209.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * notice, this list of conditions and the following disclaimer in
  Cluster 37
    145-38 - 118.08 - 195.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * the documentation and/or other materials provided with the
  Cluster 38
    145-39 - 118.08 - 181.08 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * distribution.
  Cluster 39
    145-40 - 118.08 - 166.84 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 40
    145-41 - 118.08 - 152.59 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * 3. All advertising materials mentioning features or use of this
  Cluster 41
    145-42 - 118.08 - 138.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * software must display the following acknowledgment:
  Cluster 42
    145-43 - 118.08 - 124.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * "This product includes software developed by the OpenSSL Project
    145-43 - 118.08 - 109.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
  Cluster 43
    145-44 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 44
    145-45 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - C.3. Licenses and Acknowledgements for Incorporated Software 139
Page 146
  Cluster 0
    146-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    146-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    146-3 - 118.08 - 904.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 3
    146-4 - 118.08 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
  Cluster 4
    146-5 - 118.08 - 876.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * endorse or promote products derived from this software without
  Cluster 5
    146-6 - 118.08 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * prior written permission. For written permission, please contact
    146-6 - 118.08 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * openssl-core@openssl.org.
  Cluster 6
    146-7 - 118.08 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 7
    146-8 - 118.08 - 819.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * 5. Products derived from this software may not be called "OpenSSL"
  Cluster 8
    146-9 - 118.08 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * nor may "OpenSSL" appear in their names without prior written
  Cluster 9
    146-10 - 118.08 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * permission of the OpenSSL Project.
  Cluster 10
    146-11 - 118.08 - 776.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 11
    146-12 - 118.08 - 762.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * 6. Redistributions of any form whatsoever must retain the following
  Cluster 12
    146-13 - 118.08 - 748.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * acknowledgment:
    146-13 - 118.08 - 733.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * "This product includes software developed by the OpenSSL Project
  Cluster 13
    146-14 - 118.08 - 719.58 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * for use in the OpenSSL Toolkit (http://www.openssl.org/)"
  Cluster 14
    146-15 - 118.08 - 705.34 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 15
    146-16 - 118.08 - 691.09 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
  Cluster 16
    146-17 - 118.08 - 676.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  Cluster 17
    146-18 - 118.08 - 662.6 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  Cluster 18
    146-19 - 118.08 - 648.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE OpenSSL PROJECT OR
  Cluster 19
    146-20 - 118.08 - 634.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    146-20 - 118.08 - 619.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  Cluster 20
    146-21 - 118.08 - 605.61 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  Cluster 21
    146-22 - 118.08 - 591.36 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  Cluster 22
    146-23 - 118.08 - 577.12 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  Cluster 23
    146-24 - 118.08 - 562.87 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  Cluster 24
    146-25 - 118.08 - 548.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  Cluster 25
    146-26 - 118.08 - 534.38 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * OF THE POSSIBILITY OF SUCH DAMAGE.
  Cluster 26
    146-27 - 118.08 - 520.13 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * ====================================================================
  Cluster 27
    146-28 - 118.08 - 505.88 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
    146-28 - 118.08 - 491.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * This product includes cryptographic software written by Eric Young
    146-28 - 118.08 - 477.39 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * (eay@cryptsoft.com). This product includes software written by Tim
  Cluster 28
    146-29 - 118.08 - 463.14 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * Hudson (tjh@cryptsoft.com).
  Cluster 29
    146-30 - 118.08 - 448.9 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 30
    146-31 - 118.08 - 434.65 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - */
  Cluster 31
    146-32 - 93.6 - 406.16 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Original SSLeay License
  Cluster 32
    146-33 - 93.6 - 391.91 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - -----------------------
  Cluster 33
    146-34 - 111.96 - 363.42 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - /* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
  Cluster 34
    146-35 - 118.08 - 349.17 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * All rights reserved.
  Cluster 35
    146-36 - 118.08 - 334.92 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
    146-36 - 118.08 - 320.67 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * This package is an SSL implementation written
  Cluster 36
    146-37 - 118.08 - 306.44 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * by Eric Young (eay@cryptsoft.com).
  Cluster 37
    146-38 - 118.08 - 292.19 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * The implementation was written so as to conform with Netscapes SSL.
    146-38 - 118.08 - 277.94 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
    146-38 - 118.08 - 263.69 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * This library is free for commercial and non-commercial use as long as
  Cluster 38
    146-39 - 118.08 - 249.44 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * the following conditions are aheared to. The following conditions
  Cluster 39
    146-40 - 118.08 - 235.2 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * apply to all code found in this distribution, be it the RC4, RSA,
    146-40 - 118.08 - 220.95 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * lhash, DES, etc., code; not just the SSL code. The SSL documentation
  Cluster 40
    146-41 - 118.08 - 206.7 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * included with this distribution is covered by the same copyright terms
  Cluster 41
    146-42 - 118.08 - 192.45 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * except that the holder is Tim Hudson (tjh@cryptsoft.com).
  Cluster 42
    146-43 - 118.08 - 178.22 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 43
    146-44 - 118.08 - 163.97 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * Copyright remains Eric Young's, and as such any Copyright notices in
  Cluster 44
    146-45 - 118.08 - 149.72 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * the code are not to be removed.
    146-45 - 118.08 - 135.47 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * If this package is used in a product, Eric Young should be given attribution
  Cluster 45
    146-46 - 118.08 - 121.22 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * as the author of the parts of the library used.
  Cluster 46
    146-47 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 47
    146-48 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 140 Appendix C. History and License
Page 147
  Cluster 0
    147-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    147-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    147-3 - 118.08 - 904.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * This can be in the form of a textual message at program startup or
  Cluster 3
    147-4 - 118.08 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * in documentation (online or textual) provided with the package.
  Cluster 4
    147-5 - 118.08 - 876.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 5
    147-6 - 118.08 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * Redistribution and use in source and binary forms, with or without
    147-6 - 118.08 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * modification, are permitted provided that the following conditions
  Cluster 6
    147-7 - 118.08 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * are met:
  Cluster 7
    147-8 - 118.08 - 819.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * 1. Redistributions of source code must retain the copyright
  Cluster 8
    147-9 - 118.08 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * notice, this list of conditions and the following disclaimer.
  Cluster 9
    147-10 - 118.08 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * 2. Redistributions in binary form must reproduce the above copyright
  Cluster 10
    147-11 - 118.08 - 776.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * notice, this list of conditions and the following disclaimer in the
  Cluster 11
    147-12 - 118.08 - 762.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * documentation and/or other materials provided with the distribution.
  Cluster 12
    147-13 - 118.08 - 748.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * 3. All advertising materials mentioning features or use of this software
    147-13 - 118.08 - 733.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * must display the following acknowledgement:
  Cluster 13
    147-14 - 118.08 - 719.58 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * "This product includes cryptographic software written by
  Cluster 14
    147-15 - 118.08 - 705.34 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * Eric Young (eay@cryptsoft.com)"
  Cluster 15
    147-16 - 118.08 - 691.09 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * The word 'cryptographic' can be left out if the rouines from the library
  Cluster 16
    147-17 - 118.08 - 676.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * being used are not cryptographic related :-).
  Cluster 17
    147-18 - 118.08 - 662.6 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * 4. If you include any Windows specific code (or a derivative thereof) from
  Cluster 18
    147-19 - 118.08 - 648.35 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * the apps directory (application code) you must include an acknowledgement:
  Cluster 19
    147-20 - 118.08 - 634.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
    147-20 - 118.08 - 619.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 20
    147-21 - 118.08 - 605.61 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
  Cluster 21
    147-22 - 118.08 - 591.36 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  Cluster 22
    147-23 - 118.08 - 577.12 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  Cluster 23
    147-24 - 118.08 - 562.87 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  Cluster 24
    147-25 - 118.08 - 548.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  Cluster 25
    147-26 - 118.08 - 534.38 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  Cluster 26
    147-27 - 118.08 - 520.13 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  Cluster 27
    147-28 - 118.08 - 505.88 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    147-28 - 118.08 - 491.63 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
    147-28 - 118.08 - 477.39 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  Cluster 28
    147-29 - 118.08 - 463.14 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * SUCH DAMAGE.
  Cluster 29
    147-30 - 118.08 - 448.9 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - *
  Cluster 30
    147-31 - 118.08 - 434.65 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * The licence and distribution terms for any publically available version or
  Cluster 31
    147-32 - 118.08 - 420.41 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * derivative of this code cannot be changed. i.e. this code cannot simply be
    147-32 - 118.08 - 406.16 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * copied and put under another distribution licence
    147-32 - 118.08 - 391.91 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * [including the GNU Public Licence.]
    147-32 - 118.08 - 377.66 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - */
  Cluster 32
    147-33 - 93.6 - 326.62 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.13 expat
  Cluster 33
    147-34 - 93.6 - 296.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The pyexpat extension is built using an included copy of the expat sources unless the build is conﬁgured
  Cluster 34
    147-35 - 93.6 - 280.7 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - --with-system-expat:
  Cluster 35
    147-36 - 93.6 - 255.1 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
  Cluster 36
    147-37 - 283.31 - 240.86 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - and Clark Cooper
  Cluster 37
    147-38 - 93.6 - 212.37 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Permission is hereby granted, free of charge, to any person obtaining
  Cluster 38
    147-39 - 93.6 - 198.12 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - a copy of this software and associated documentation files (the
    147-39 - 93.6 - 183.87 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - "Software"), to deal in the Software without restriction, including
  Cluster 39
    147-40 - 93.6 - 169.62 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - without limitation the rights to use, copy, modify, merge, publish,
  Cluster 40
    147-41 - 93.6 - 155.38 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - distribute, sublicense, and/or sell copies of the Software, and to
  Cluster 41
    147-42 - 93.6 - 141.13 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - permit persons to whom the Software is furnished to do so, subject to
  Cluster 42
    147-43 - 93.6 - 126.88 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - the following conditions:
  Cluster 43
    147-44 - 583.05 - 96.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 44
    147-45 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - C.3. Licenses and Acknowledgements for Incorporated Software 141
Page 148
  Cluster 0
    148-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    148-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    148-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - The above copyright notice and this permission notice shall be included
  Cluster 3
    148-4 - 93.6 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - in all copies or substantial portions of the Software.
  Cluster 4
    148-5 - 93.6 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  Cluster 5
    148-6 - 93.6 - 847.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  Cluster 6
    148-7 - 93.6 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  Cluster 7
    148-8 - 93.6 - 819.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  Cluster 8
    148-9 - 93.6 - 805.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  Cluster 9
    148-10 - 93.6 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  Cluster 10
    148-11 - 93.6 - 776.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  Cluster 11
    148-12 - 93.6 - 725.14 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.14 libﬃ
  Cluster 12
    148-13 - 93.6 - 694.75 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The _ctypes extension is built using an included copy of the libﬃ sources unless the build is conﬁgured
  Cluster 13
    148-14 - 93.6 - 679.21 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - --with-system-libffi:
  Cluster 14
    148-15 - 93.6 - 653.17 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (c) 1996-2008 Red Hat, Inc and others.
  Cluster 15
    148-16 - 93.6 - 624.69 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Permission is hereby granted, free of charge, to any person obtaining
  Cluster 16
    148-17 - 93.6 - 610.44 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - a copy of this software and associated documentation files (the
  Cluster 17
    148-18 - 93.6 - 596.19 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ``Software''), to deal in the Software without restriction, including
  Cluster 18
    148-19 - 93.6 - 581.95 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - without limitation the rights to use, copy, modify, merge, publish,
  Cluster 19
    148-20 - 93.6 - 567.7 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - distribute, sublicense, and/or sell copies of the Software, and to
    148-20 - 93.6 - 553.45 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - permit persons to whom the Software is furnished to do so, subject to
  Cluster 20
    148-21 - 93.6 - 539.2 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - the following conditions:
  Cluster 21
    148-22 - 93.6 - 510.7 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - The above copyright notice and this permission notice shall be included
  Cluster 22
    148-23 - 93.6 - 496.47 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - in all copies or substantial portions of the Software.
  Cluster 23
    148-24 - 93.6 - 467.97 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
  Cluster 24
    148-25 - 93.6 - 453.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    148-25 - 93.6 - 439.48 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    148-25 - 93.6 - 425.23 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    148-25 - 93.6 - 410.98 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  Cluster 25
    148-26 - 93.6 - 396.73 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  Cluster 26
    148-27 - 93.6 - 382.49 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  Cluster 27
    148-28 - 93.6 - 368.25 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - DEALINGS IN THE SOFTWARE.
  Cluster 28
    148-29 - 93.6 - 316.82 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.15 zlib
  Cluster 29
    148-30 - 93.6 - 286.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The zlib extension is built using an included copy of the zlib sources if the zlib version found on the system
  Cluster 30
    148-31 - 93.6 - 270.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - is too old to be used for the build:
  Cluster 31
    148-32 - 93.6 - 244.85 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (C) 1995-2011 Jean-loup Gailly and Mark Adler
  Cluster 32
    148-33 - 93.6 - 216.36 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - This software is provided 'as-is', without any express or implied
  Cluster 33
    148-34 - 93.6 - 202.11 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - warranty. In no event will the authors be held liable for any damages
  Cluster 34
    148-35 - 93.6 - 187.86 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - arising from the use of this software.
  Cluster 35
    148-36 - 93.6 - 159.38 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Permission is granted to anyone to use this software for any purpose,
  Cluster 36
    148-37 - 93.6 - 145.13 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - including commercial applications, and to alter it and redistribute it
  Cluster 37
    148-38 - 93.6 - 130.88 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - freely, subject to the following restrictions:
  Cluster 38
    148-39 - 583.05 - 100.19 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continues on next page)
  Cluster 39
    148-40 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 142 Appendix C. History and License
Page 149
  Cluster 0
    149-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    149-2 - 550.64 - 923.05 23.91 - ffb - 31.88 - rgb(0, 0, 0) - (continued from previous page)
  Cluster 2
    149-3 - 93.6 - 904.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 1. The origin of this software must not be misrepresented; you must not
  Cluster 3
    149-4 - 111.96 - 890.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - claim that you wrote the original software. If you use this software
  Cluster 4
    149-5 - 111.96 - 876.29 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - in a product, an acknowledgment in the product documentation would be
  Cluster 5
    149-6 - 111.96 - 862.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - appreciated but is not required.
  Cluster 6
    149-7 - 93.6 - 833.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 2. Altered source versions must be plainly marked as such, and must not be
  Cluster 7
    149-8 - 111.96 - 819.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - misrepresented as being the original software.
  Cluster 8
    149-9 - 93.6 - 790.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 3. This notice may not be removed or altered from any source distribution.
  Cluster 9
    149-10 - 93.6 - 762.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Jean-loup Gailly Mark Adler
  Cluster 10
    149-11 - 93.6 - 748.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - jloup@gzip.org madler@alumni.caltech.edu
  Cluster 11
    149-12 - 93.6 - 696.64 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.16 cfuhash
  Cluster 12
    149-13 - 93.6 - 666.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The implementation of the hash table used by the tracemalloc is based on the cfuhash project:
  Cluster 13
    149-14 - 93.6 - 640.22 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (c) 2005 Don Owens
  Cluster 14
    149-15 - 93.6 - 625.98 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - All rights reserved.
  Cluster 15
    149-16 - 93.6 - 597.48 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - This code is released under the BSD license:
  Cluster 16
    149-17 - 93.6 - 569.0 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Redistribution and use in source and binary forms, with or without
  Cluster 17
    149-18 - 93.6 - 554.75 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - modification, are permitted provided that the following conditions
  Cluster 18
    149-19 - 93.6 - 540.5 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - are met:
  Cluster 19
    149-20 - 105.83 - 512.0 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * Redistributions of source code must retain the above copyright
  Cluster 20
    149-21 - 118.08 - 497.76 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice, this list of conditions and the following disclaimer.
  Cluster 21
    149-22 - 105.83 - 469.26 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * Redistributions in binary form must reproduce the above
  Cluster 22
    149-23 - 118.08 - 455.03 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - copyright notice, this list of conditions and the following
  Cluster 23
    149-24 - 118.08 - 440.78 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - disclaimer in the documentation and/or other materials provided
  Cluster 24
    149-25 - 118.08 - 426.53 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - with the distribution.
  Cluster 25
    149-26 - 105.83 - 398.03 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - * Neither the name of the author nor the names of its
  Cluster 26
    149-27 - 118.08 - 383.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - contributors may be used to endorse or promote products derived
    149-27 - 118.08 - 369.54 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - from this software without specific prior written permission.
  Cluster 27
    149-28 - 93.6 - 341.04 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  Cluster 28
    149-29 - 93.6 - 326.79 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  Cluster 29
    149-30 - 93.6 - 312.56 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  Cluster 30
    149-31 - 93.6 - 298.31 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  Cluster 31
    149-32 - 93.6 - 284.06 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    149-32 - 93.6 - 269.81 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    149-32 - 93.6 - 255.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  Cluster 32
    149-33 - 93.6 - 241.32 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  Cluster 33
    149-34 - 93.6 - 227.07 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
    149-34 - 93.6 - 212.82 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  Cluster 34
    149-35 - 93.6 - 198.57 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  Cluster 35
    149-36 - 93.6 - 184.34 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OF THE POSSIBILITY OF SUCH DAMAGE.
  Cluster 36
    149-37 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - C.3. Licenses and Acknowledgements for Incorporated Software 143
Page 150
  Cluster 0
    150-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    150-2 - 93.6 - 923.05 35.87 - ff1 - 47.82 - rgb(32, 67, 92) - C.3.17 libmpdec
  Cluster 2
    150-3 - 93.6 - 892.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - The _decimal module is built using an included copy of the libmpdec library unless the build is conﬁgured
  Cluster 3
    150-4 - 93.6 - 877.11 29.89 - ff5 - 39.852 - rgb(0, 0, 0) - --with-system-libmpdec:
  Cluster 4
    150-5 - 93.6 - 851.08 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Copyright (c) 2008-2016 Stefan Krah. All rights reserved.
  Cluster 5
    150-6 - 93.6 - 822.59 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - Redistribution and use in source and binary forms, with or without
  Cluster 6
    150-7 - 93.6 - 808.34 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - modification, are permitted provided that the following conditions
  Cluster 7
    150-8 - 93.6 - 794.09 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - are met:
  Cluster 8
    150-9 - 93.6 - 765.61 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 1. Redistributions of source code must retain the above copyright
  Cluster 9
    150-10 - 111.96 - 751.36 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice, this list of conditions and the following disclaimer.
  Cluster 10
    150-11 - 93.6 - 722.87 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - 2. Redistributions in binary form must reproduce the above copyright
  Cluster 11
    150-12 - 111.96 - 708.62 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - notice, this list of conditions and the following disclaimer in the
  Cluster 12
    150-13 - 111.96 - 694.37 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - documentation and/or other materials provided with the distribution.
  Cluster 13
    150-14 - 93.6 - 665.87 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
  Cluster 14
    150-15 - 93.6 - 651.64 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  Cluster 15
    150-16 - 93.6 - 637.39 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  Cluster 16
    150-17 - 93.6 - 623.14 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  Cluster 17
    150-18 - 93.6 - 608.89 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    150-18 - 93.6 - 594.65 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  Cluster 18
    150-19 - 93.6 - 580.4 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  Cluster 19
    150-20 - 93.6 - 566.15 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  Cluster 20
    150-21 - 93.6 - 551.9 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  Cluster 21
    150-22 - 93.6 - 537.65 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  Cluster 22
    150-23 - 93.6 - 523.42 24.89 - ff7 - 35.864 - rgb(0, 0, 0) - SUCH DAMAGE.
  Cluster 23
    150-24 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 144 Appendix C. History and License
Page 151
  Cluster 0
    151-1 - 631.63 - 901.03 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - APPENDIX
  Cluster 1
    151-2 - 687.75 - 871.25 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - D
  Cluster 2
    151-3 - 585.87 - 802.59 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - COPYRIGHT
  Cluster 3
    151-4 - 93.6 - 728.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python and this documentation is:
  Cluster 4
    151-5 - 93.6 - 706.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Copyright © 2001-2018 Python Software Foundation. All rights reserved.
  Cluster 5
    151-6 - 93.6 - 684.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Copyright © 2000 BeOpen.com. All rights reserved.
  Cluster 6
    151-7 - 93.6 - 662.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Copyright © 1995-2000 Corporation for National Research Initiatives. All rights reserved.
  Cluster 7
    151-8 - 93.6 - 640.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Copyright © 1991-1995 Stichting Mathematisch Centrum. All rights reserved.
  Cluster 8
    151-9 - 93.6 - 590.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - See History and License for complete license and permissions information.
  Cluster 9
    151-10 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 145
Page 152
  Cluster 0
    152-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    152-2 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 146 Appendix D. Copyright
Page 153
  Cluster 0
    153-1 - 640.56 - 858.3 43.04 - ff1 - 57.384 - rgb(0, 0, 0) - INDEX
  Cluster 1
    153-2 - 404.27 - 741.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - coding
  Cluster 2
    153-3 - 93.6 - 741.35 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - Symbols
  Cluster 3
    153-4 - 430.17 - 726.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - style, 29
  Cluster 4
    153-5 - 93.6 - 722.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - *
  Cluster 5
    153-6 - 404.27 - 710.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - coercion, 115
  Cluster 6
    153-7 - 119.51 - 706.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - statement, 26
  Cluster 7
    153-8 - 404.27 - 695.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - complex number, 115
  Cluster 8
    153-9 - 93.6 - 691.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - **
  Cluster 9
    153-10 - 404.27 - 679.58 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - context manager, 115
  Cluster 10
    153-11 - 119.51 - 675.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - statement, 27
  Cluster 11
    153-12 - 404.27 - 664.03 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - contiguous, 115
  Cluster 12
    153-13 - 93.6 - 659.96 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - -> (return annotation assignment), 28
  Cluster 13
    153-14 - 404.27 - 648.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - coroutine, 115
  Cluster 14
    153-15 - 93.6 - 644.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ..., 113
  Cluster 15
    153-16 - 404.27 - 632.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - coroutine function, 115
  Cluster 16
    153-17 - 93.6 - 628.88 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - __all__, 50
  Cluster 17
    153-18 - 404.27 - 617.41 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - CPython, 115
  Cluster 18
    153-19 - 93.6 - 613.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - __future__, 117
  Cluster 19
    153-20 - 93.6 - 597.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - __slots__, 123
  Cluster 20
    153-21 - 404.27 - 587.56 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - D
  Cluster 21
    153-22 - 93.6 - 582.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - >>>, 113
  Cluster 22
    153-23 - 404.27 - 568.33 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - decorator, 115
  Cluster 23
    153-24 - 93.6 - 566.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - 2to3, 113
  Cluster 24
    153-25 - 404.27 - 552.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - descriptor, 116
  Cluster 25
    153-26 - 93.6 - 538.21 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - A
  Cluster 26
    153-27 - 404.27 - 537.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - dictionary, 116
  Cluster 27
    153-28 - 404.27 - 521.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - dictionary view, 116
  Cluster 28
    153-29 - 93.6 - 518.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - abstract base class, 113
  Cluster 29
    153-30 - 404.27 - 506.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - docstring, 116
  Cluster 30
    153-31 - 93.6 - 503.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - annotation, 113
  Cluster 31
    153-32 - 404.27 - 490.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - docstrings, 22, 28
  Cluster 32
    153-33 - 93.6 - 487.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - annotations
  Cluster 33
    153-34 - 404.27 - 475.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - documentation strings, 22, 28
  Cluster 34
    153-35 - 119.51 - 472.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - function, 28
  Cluster 35
    153-36 - 404.27 - 459.54 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - duck-typing, 116
  Cluster 36
    153-37 - 93.6 - 456.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - argument, 113
  Cluster 37
    153-38 - 93.6 - 441.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - asynchronous context manager, 114
  Cluster 38
    153-39 - 404.27 - 429.71 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - E
  Cluster 39
    153-40 - 93.6 - 425.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - asynchronous generator, 114
  Cluster 40
    153-41 - 404.27 - 410.49 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - EAFP, 116
  Cluster 41
    153-42 - 93.6 - 410.2 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - asynchronous generator iterator, 114
  Cluster 42
    153-43 - 404.27 - 394.95 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - environment variable
  Cluster 43
    153-44 - 93.6 - 394.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - asynchronous iterable, 114
  Cluster 44
    153-45 - 430.17 - 379.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PATH, 45, 111
  Cluster 45
    153-46 - 93.6 - 379.12 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - asynchronous iterator, 114
  Cluster 46
    153-47 - 430.17 - 363.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PYTHONPATH, 45, 47
  Cluster 47
    153-48 - 93.6 - 363.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - attribute, 114
  Cluster 48
    153-49 - 430.17 - 348.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PYTHONSTARTUP, 111
  Cluster 49
    153-50 - 93.6 - 348.04 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - awaitable, 114
  Cluster 50
    153-51 - 404.27 - 332.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - expression, 116
  Cluster 51
    153-52 - 93.6 - 319.54 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - B
  Cluster 52
    153-53 - 404.27 - 317.24 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - extension module, 116
  Cluster 53
    153-54 - 93.6 - 300.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - BDFL, 114
  Cluster 54
    153-55 - 404.27 - 288.74 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - F
  Cluster 55
    153-56 - 93.6 - 284.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - binary ﬁle, 114
  Cluster 56
    153-57 - 404.27 - 269.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - f-string, 116
  Cluster 57
    153-58 - 93.6 - 269.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - built-in function
  Cluster 58
    153-59 - 404.27 - 253.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁle
  Cluster 59
    153-60 - 119.51 - 253.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - help, 83
  Cluster 60
    153-61 - 430.17 - 238.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object, 57
  Cluster 61
    153-62 - 119.51 - 238.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - open, 57
  Cluster 62
    153-63 - 404.27 - 222.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁle object, 116
  Cluster 63
    153-64 - 93.6 - 222.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - builtins
  Cluster 64
    153-65 - 404.27 - 207.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁle-like object, 117
  Cluster 65
    153-66 - 119.51 - 207.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module, 47
  Cluster 66
    153-67 - 404.27 - 191.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁnder, 117
  Cluster 67
    153-68 - 93.6 - 191.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - bytecode, 115
  Cluster 68
    153-69 - 404.27 - 176.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬂoor division, 117
  Cluster 69
    153-70 - 93.6 - 175.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - bytes-like object, 114
  Cluster 70
    153-71 - 404.27 - 160.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - for
  Cluster 71
    153-72 - 93.6 - 145.93 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - C
  Cluster 72
    153-73 - 430.17 - 145.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - statement, 19
  Cluster 73
    153-74 - 404.27 - 129.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Fortran contiguous, 115
  Cluster 74
    153-75 - 93.6 - 126.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - C-contiguous, 115
  Cluster 75
    153-76 - 404.27 - 114.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - function, 117
  Cluster 76
    153-77 - 93.6 - 111.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - class, 115
  Cluster 77
    153-78 - 430.17 - 98.57 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - annotations, 28
  Cluster 78
    153-79 - 93.6 - 95.61 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - class variable, 115
  Cluster 79
    153-80 - 680.63 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 147
Page 154
  Cluster 0
    154-1 - 93.6 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    154-2 - 93.6 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - function annotation, 117
  Cluster 2
    154-3 - 430.17 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - json, 59
  Cluster 3
    154-4 - 430.17 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - search path, 45
  Cluster 4
    154-5 - 93.6 - 893.15 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - G
  Cluster 5
    154-6 - 430.17 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sys, 46
  Cluster 6
    154-7 - 404.27 - 876.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module spec, 120
  Cluster 7
    154-8 - 93.6 - 873.92 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - garbage collection, 117
  Cluster 8
    154-9 - 404.27 - 860.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - MRO, 120
  Cluster 9
    154-10 - 93.6 - 858.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - generator, 117, 117
  Cluster 10
    154-11 - 404.27 - 845.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - mutable, 120
  Cluster 11
    154-12 - 93.6 - 842.84 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - generator expression, 117, 117
  Cluster 12
    154-13 - 93.6 - 827.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - generator iterator, 117
  Cluster 13
    154-14 - 404.27 - 816.84 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - N
  Cluster 14
    154-15 - 93.6 - 811.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - generic function, 118
  Cluster 15
    154-16 - 404.27 - 797.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - named tuple, 120
  Cluster 16
    154-17 - 93.6 - 796.22 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - GIL, 118
  Cluster 17
    154-18 - 404.27 - 782.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - namespace, 121
  Cluster 18
    154-19 - 93.6 - 780.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - global interpreter lock, 118
  Cluster 19
    154-20 - 404.27 - 766.53 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - namespace package, 121
  Cluster 20
    154-21 - 404.27 - 751.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - nested scope, 121
  Cluster 21
    154-22 - 93.6 - 750.82 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - H
  Cluster 22
    154-23 - 404.27 - 735.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - new-style class, 121
  Cluster 23
    154-24 - 93.6 - 731.59 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - hash-based pyc, 118
  Cluster 24
    154-25 - 93.6 - 716.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - hashable, 118
  Cluster 25
    154-26 - 404.27 - 705.21 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - O
  Cluster 26
    154-27 - 93.6 - 700.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - help
  Cluster 27
    154-28 - 404.27 - 685.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object, 121
  Cluster 28
    154-29 - 119.51 - 684.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - built-in function, 83
  Cluster 29
    154-30 - 430.17 - 670.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - ﬁle, 57
  Cluster 30
    154-31 - 93.6 - 656.47 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - I
  Cluster 31
    154-32 - 430.17 - 654.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - method, 73
  Cluster 32
    154-33 - 404.27 - 639.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - open
  Cluster 33
    154-34 - 93.6 - 637.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - IDLE, 118
  Cluster 34
    154-35 - 430.17 - 623.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - built-in function, 57
  Cluster 35
    154-36 - 93.6 - 621.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - immutable, 118
  Cluster 36
    154-37 - 93.6 - 606.16 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - import path, 118
  Cluster 37
    154-38 - 404.27 - 595.34 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - P
  Cluster 38
    154-39 - 93.6 - 590.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - importer, 118
  Cluster 39
    154-40 - 404.27 - 576.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - package, 121
  Cluster 40
    154-41 - 93.6 - 575.08 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - importing, 118
  Cluster 41
    154-42 - 404.27 - 560.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - parameter, 121
  Cluster 42
    154-43 - 93.6 - 559.53 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - interactive, 118
  Cluster 43
    154-44 - 404.27 - 545.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PATH, 45, 111
  Cluster 44
    154-45 - 93.6 - 544.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - interpreted, 118
  Cluster 45
    154-46 - 404.27 - 529.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - path
  Cluster 46
    154-47 - 93.6 - 528.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - interpreter shutdown, 119
  Cluster 47
    154-48 - 430.17 - 513.94 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module search, 45
  Cluster 48
    154-49 - 93.6 - 512.91 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - iterable, 119
  Cluster 49
    154-50 - 404.27 - 498.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - path based ﬁnder, 122
  Cluster 50
    154-51 - 93.6 - 497.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - iterator, 119
  Cluster 51
    154-52 - 404.27 - 482.86 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - path entry, 122
  Cluster 52
    154-53 - 93.6 - 468.88 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - J
  Cluster 53
    154-54 - 404.27 - 467.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - path entry ﬁnder, 122
  Cluster 54
    154-55 - 404.27 - 451.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - path entry hook, 122
  Cluster 55
    154-56 - 93.6 - 449.66 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - json
  Cluster 56
    154-57 - 404.27 - 436.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - path-like object, 122
  Cluster 57
    154-58 - 119.51 - 434.11 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module, 59
  Cluster 58
    154-59 - 404.27 - 420.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP, 122
  Cluster 59
    154-60 - 93.6 - 405.61 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - K
  Cluster 60
    154-61 - 404.27 - 405.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - portion, 122
  Cluster 61
    154-62 - 404.27 - 389.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - positional argument, 122
  Cluster 62
    154-63 - 93.6 - 386.39 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - key function, 119
  Cluster 63
    154-64 - 404.27 - 374.06 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - provisional API, 122
  Cluster 64
    154-65 - 93.6 - 370.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - keyword argument, 119
  Cluster 65
    154-66 - 404.27 - 358.51 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - provisional package, 122
  Cluster 66
    154-67 - 404.27 - 342.98 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python 3000, 122
  Cluster 67
    154-68 - 93.6 - 340.99 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - L
  Cluster 68
    154-69 - 404.27 - 327.43 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Python Enhancement Proposals
  Cluster 69
    154-70 - 93.6 - 321.76 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - lambda, 119
  Cluster 70
    154-71 - 430.17 - 311.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 1, 122
  Cluster 71
    154-72 - 93.6 - 306.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - LBYL, 119
  Cluster 72
    154-73 - 430.17 - 296.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 238, 117
  Cluster 73
    154-74 - 93.6 - 290.68 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - list, 120
  Cluster 74
    154-75 - 430.17 - 280.81 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 278, 125
  Cluster 75
    154-76 - 93.6 - 275.14 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - list comprehension, 120
  Cluster 76
    154-77 - 430.17 - 265.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 302, 117, 120
  Cluster 77
    154-78 - 93.6 - 259.6 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - loader, 120
  Cluster 78
    154-79 - 430.17 - 249.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 3107, 28
  Cluster 79
    154-80 - 430.17 - 234.18 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 3116, 125
  Cluster 80
    154-81 - 93.6 - 231.1 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - M
  Cluster 81
    154-82 - 430.17 - 218.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 3147, 46
  Cluster 82
    154-83 - 93.6 - 211.87 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - mapping, 120
  Cluster 83
    154-84 - 430.17 - 203.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 3155, 123
  Cluster 84
    154-85 - 93.6 - 196.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - meta path ﬁnder, 120
  Cluster 85
    154-86 - 430.17 - 187.56 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 343, 115
  Cluster 86
    154-87 - 93.6 - 180.79 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - metaclass, 120
  Cluster 87
    154-88 - 430.17 - 172.02 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 362, 114, 122
  Cluster 88
    154-89 - 93.6 - 165.26 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - method, 120
  Cluster 89
    154-90 - 430.17 - 156.48 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 411, 122
  Cluster 90
    154-91 - 119.51 - 149.71 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - object, 73
  Cluster 91
    154-92 - 430.17 - 140.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 420, 117, 121, 122
  Cluster 92
    154-93 - 93.6 - 134.17 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - method resolution order, 120
  Cluster 93
    154-94 - 430.17 - 125.4 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 443, 118
  Cluster 94
    154-95 - 93.6 - 118.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module, 120
  Cluster 95
    154-96 - 430.17 - 109.85 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 451, 117
  Cluster 96
    154-97 - 119.51 - 103.09 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - builtins, 47
  Cluster 97
    154-98 - 430.17 - 94.31 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 484, 28, 113, 117, 124, 125
  Cluster 98
    154-99 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - 148 Index
Page 155
  Cluster 0
    155-1 - 521.7 - 973.04 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Python Tutorial, Release 3.7.0
  Cluster 1
    155-2 - 119.51 - 923.05 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 492, 114, 115
  Cluster 2
    155-3 - 119.51 - 907.5 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 498, 116
  Cluster 3
    155-4 - 119.51 - 891.97 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 519, 122
  Cluster 4
    155-5 - 119.51 - 876.42 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 525, 114
  Cluster 5
    155-6 - 119.51 - 860.89 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 526, 113, 125
  Cluster 6
    155-7 - 119.51 - 845.34 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PEP 8, 29
  Cluster 7
    155-8 - 93.6 - 829.8 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Pythonic, 122
  Cluster 8
    155-9 - 93.6 - 814.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PYTHONPATH, 45, 47
  Cluster 9
    155-10 - 93.6 - 798.72 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - PYTHONSTARTUP, 111
  Cluster 10
    155-11 - 93.6 - 772.16 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - Q
  Cluster 11
    155-12 - 93.6 - 752.93 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - qualiﬁed name, 123
  Cluster 12
    155-13 - 93.6 - 727.96 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - R
  Cluster 13
    155-14 - 93.6 - 708.73 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - reference count, 123
  Cluster 14
    155-15 - 93.6 - 693.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - regular package, 123
  Cluster 15
    155-16 - 93.6 - 677.65 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - RFC
  Cluster 16
    155-17 - 119.51 - 662.1 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - RFC 2822, 87
  Cluster 17
    155-18 - 93.6 - 635.54 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - S
  Cluster 18
    155-19 - 93.6 - 616.32 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - search
  Cluster 19
    155-20 - 119.51 - 600.78 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - path, module, 45
  Cluster 20
    155-21 - 93.6 - 585.23 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sequence, 123
  Cluster 21
    155-22 - 93.6 - 569.7 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - single dispatch, 123
  Cluster 22
    155-23 - 93.6 - 554.15 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - slice, 123
  Cluster 23
    155-24 - 93.6 - 538.62 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - special method, 124
  Cluster 24
    155-25 - 93.6 - 523.07 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - statement, 124

    =====
    155-25 - 119.51 - 507.52 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - *, 26
  Cluster 25
    155-26 - 119.51 - 491.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - **, 27
  Cluster 26
    155-27 - 119.51 - 476.44 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - for, 19
  Cluster 27
    155-28 - 93.6 - 460.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - strings, documentation, 22, 28
  Cluster 28
    155-29 - 93.6 - 445.35 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - struct sequence, 124
  Cluster 29
    155-30 - 93.6 - 429.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - style
  Cluster 30
    155-31 - 119.51 - 414.27 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - coding, 29
  Cluster 31
    155-32 - 93.6 - 398.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - sys
  Cluster 32
    155-33 - 119.51 - 383.19 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - module, 46
  Cluster 33
    155-34 - 93.6 - 358.21 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - T
  Cluster 34
    155-35 - 93.6 - 338.99 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - text encoding, 124
  Cluster 35
    155-36 - 93.6 - 323.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - text ﬁle, 124
  Cluster 36
    155-37 - 93.6 - 307.9 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - triple-quoted string, 124
  Cluster 37
    155-38 - 93.6 - 292.37 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - type, 124
  Cluster 38
    155-39 - 93.6 - 276.82 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - type alias, 124
  Cluster 39
    155-40 - 93.6 - 261.29 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - type hint, 124
  Cluster 40
    155-41 - 93.6 - 234.96 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - U
  Cluster 41
    155-42 - 93.6 - 215.74 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - universal newlines, 124
  Cluster 42
    155-43 - 93.6 - 190.76 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - V
  Cluster 43
    155-44 - 93.6 - 171.53 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - variable annotation, 125
  Cluster 44
    155-45 - 93.6 - 156.0 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - virtual environment, 125
  Cluster 45
    155-46 - 93.6 - 140.45 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - virtual machine, 125
  Cluster 46
    155-47 - 93.6 - 115.48 41.03 - ff12 - 57.384 - rgb(0, 0, 0) - Z
  Cluster 47
    155-48 - 93.6 - 96.25 29.89 - ff4 - 39.852 - rgb(0, 0, 0) - Zen of Python, 125
  Cluster 48
    155-49 - 93.6 - 54.74 29.89 - ff1 - 39.852 - rgb(0, 0, 0) - Index 149
